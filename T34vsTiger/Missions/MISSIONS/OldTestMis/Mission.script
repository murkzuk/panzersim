//-----------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-----------------------------------------------------------------

class CMtMission extends CSPMission
{
  //
  // Contruction and initialization
  //
  String m_LocalTime             = "14:20:00";
  String m_TerrainMapTextureName = "Textures/c1m3_Map.tex";

  boolean isDebug = false;
  boolean isRadarUpdateDebug = true;

  static Array m_MissionObjectives = [
                                       [MOTID_Primary, CMtMission_Strings::Objective01, MOSID_InProgress, true],
                                       [MOTID_Primary, CMtMission_Strings::Objective02, MOSID_InProgress, false]
                                     ];

  static WString ObjectivesText = CMtMission_Strings::ObjectivesText;

  Array m_NavpointsForPlayerMap = [
      [
        ["NP_Tigers_PP_1"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(244.0/256.0, 255.0/256.0, 215.0/256.0)   // NavColor
      ],
      [
        ["NP_Tigers_PP_2"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(244.0/256.0, 255.0/256.0, 215.0/256.0)   // NavColor
      ]

  ];

  float  CockpitMapMinRange         = 1000.0;
  float  CockpitMapMaxRange         = 4500.0;
  int    CockpitMapZoomSteps        = 10;
  Vector MarksInitPoint             = new Vector(1000.0, 1000.0, 0.0);
  float  CockpitMapNavNameMaxRange  = 2000.0;
  Array  CockpitMapAccessBox        = [ new Vector(2742, 1775.0, 0.0), new Vector(7242.0, 6275.0, 0.0)];

  final static Array RouterWorkingZones = [];

  final static Array DefaultMask = [["FRIEND", "MainMesh"], ["NEUTRAL"]];
  final static Array Mask        = [["FRIEND", "MainMesh"], ["NEUTRAL", "InvisibleOnRadar"]];

  void CMtMission()
  {
    // Construct mission
    CSPMission("CMtMission", "CMtContent");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CMtTerrain>());
    SetMissionAtmosphere(new #Atmosphere<CMtAtmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));
    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());
    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

    m_MissionLensFlare =  new #LensFlare<CLensFlare>();

    SetMissionWorldMatrices(new #WorldMatrices<CMtWorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME,         "CMtLandscapeLayer"  ],
        [LAYER_TERRAIN_ZONE,         "CMtTerrainZoneLayer"],
        [LAYER_ROUTER_ZONE,          "CMtRouterZoneLayer" ],
        [LAYER_MICROTEXTURE_MAP1,    "CMtMicroTextures1"  ],
        [LAYER_TERRAIN_WATERHEIGHTS, "CMtWaterHeights"    ]
      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited
    CSPMission::StartMission();

    //addClassificatorObject("tmp_GermanSoldierGun", "GROUND");
    //addClassificatorObject("tmp_GermanSoldierGun", "STRUCTURE");

    Component console = new #GameController().GetObject(SOID_Console);
    console.disablebeh();
    //console.showbehinf(true);
  }

  event void OnMissionDialogEnd(String _DialogID)
  {
  }

  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (_IsWorkEngine)
      sendEvent(0.0, "Tigers", "PopDelayedOrder", []);
  }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
    logWarning("Object: " + _ObjectID + " enter NavPoint: " +  _NavPointID);
  }

  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
    logWarning("Object: " + _ObjectID + " leave NavPoint " +  _NavPointID);
  }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);

    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
      logError("Component 'DeadThing' == null");
      return;
    }

    logWarning("Object destroyed: " + _ObjectID + "; last damaged unit: " + new String (DeadThing.GetLastDamager()));

    if (_ObjectID.IsStartsWith("Soldier_0"))
    {
      GetObject("OTM_Group").RefreshUnitsList();
      logWarning(new String(GetObject("OTM_Group").m_Units.size()));
    }
  }

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID: " + _NavPointID + " -- null !!!");
  }

  void Shutdown()
  {
    CSPMission::Shutdown();
  }
}
