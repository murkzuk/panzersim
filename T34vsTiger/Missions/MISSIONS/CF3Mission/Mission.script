//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CCF3Mission extends CDMMission, CCF3Mission_Strings, CMissionStatus
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------

  static int   MaxPlayers           = 12;

  String m_LocalTime             = "6:20:00";
  String m_TerrainMapTextureName = "Textures/CF3_Map.tex"; //Textures/C1M3_Map.tex

  static String m_MissionBriefingPicMaterial = "CF3BriefingPic"; //C1M3BriefingPic

  static Array  m_MissionObjectives = [
      [MOTID_Primary,   CCF3Mission_Strings::Objective01, MOSID_InProgress, true,  0/*team (red)*/ ],
      [MOTID_Primary,   CCF3Mission_Strings::Objective02, MOSID_InProgress, true,  0/*team (red)*/ ],
      [MOTID_Primary,   CCF3Mission_Strings::Objective03, MOSID_InProgress, true,  1/*team (blue)*/ ],
      [MOTID_Primary,   CCF3Mission_Strings::Objective04, MOSID_InProgress, true,  1/*team (blue)*/]
                               ];
  boolean isDebug = true;
  boolean isRadarUpdateDebug = false;

  Array m_NavpointsForPlayerMap = [
      [
        ["NavPointRed"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(255.0/255.0, 0.0/256.0, 0.0/256.0)   // NavColor
      ],
      [
        ["NavPointBlue"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(0.0/256.0, 0.0/256.0, 255.0/255.0)   // NavColor
      ]
                                   ];

//  float  CockpitMapMinRange        = 300.0;
//  float  CockpitMapMaxRange        = 1800.0;
//  float  CockpitMapNavNameMaxRange = 1800.0;
//  int    CockpitMapZoomSteps       = 10;

  float  CockpitMapMinRange        = 600.0;
  float  CockpitMapMaxRange        = 2100.0;
  float  CockpitMapNavNameMaxRange = 1200.0;
  int    DerdotCount = 0;

  int    CockpitMapZoomSteps       = 10;
  Vector MarksInitPoint            = new Vector(1000.0, 1000.0, 0.0);
//  Vector MarksInitPoint            = new Vector(0.0, 0.0, 0.0);
//  Array  CockpitMapAccessBox       = [new Vector(2502, 1582.0, 0.0), new Vector(7002.0, 6082.0, 0.0)];
  Array  CockpitMapAccessBox       = [new Vector(3168, 2488.0, 0.0), new Vector(5420.0, 4740.0, 0.0)];


  final static Array RouterWorkingZones = [
    [1000.0 , 1000.0, 8000.0, 8000.0]
                                          ];

  void CCF3Mission()
  {
    // Construct mission
    CDMMission("CCF3Mission", "CCF3Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CCF3Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CCF3Atmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

    m_MissionLensFlare =  new #LensFlare<CLensFlare>();
    SetMissionWorldMatrices(new #WorldMatrices<CCF3WorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME,         "CCF3LandscapeLayer"],
        [LAYER_TERRAIN_ZONE,         "CCF3TerrainZoneLayer"],
        [LAYER_MICROTEXTURE_MAP1,    "CCF3MicroTextures1"],
        [LAYER_TERRAIN_WATERHEIGHTS, "CCF3WaterHeights"]
      ]);

//    SetRouterPrecalculatedGraph(
//      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

//    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited
    CDMMission::StartMission();
//    Component console = new #GameController().GetObject(SOID_Console);
//    console.disablebeh();
//    console.showbehinf(true);
    fireEvent(0.0, [], "MissionStarted", []);
    fireEvent(1200.0, [], "TimeOfMissionEnd", []);
  }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CDMMission::OnObjectDestroyed(_ObjectID);

        if (_ObjectID.IsStartsWith("Der_dot"))
    {
       DerdotCount=DerdotCount+1;
       logWarning("DerdotCount = " + new String(DerdotCount));

       if (DerdotCount == 4)
       {
          CompleteObjective(0);
          FailObjective(2);
          logWarning("CloseCFMission by Dots");
          sendEvent(5.0, getIdentificator(this), "CloseCFMission", []);

       }

    }



    if(isDebug)
      logWarning("Object destroyed: " + _ObjectID + ", last damaged by unit: " + new String(DeadThing.GetLastDamager()));
  }

  void Shutdown()
  {
    CDMMission::Shutdown();
  }

  event void CheckCFMissionStatus()
  {
    Component Session = new #GameController().GetGameSession();
    Array PlayersInfo = Session.GetPlayersInfo();
    int RedTeamCount = 0;
    int BlueTeamCount = 0;
    for (int i = 0; i < PlayersInfo.size(); i++)
    {
      if ((0 == PlayersInfo[i].SessionTeam) && (PlayersInfo[i].SessionDeaths == 0))
        RedTeamCount++;

      if ((1 == PlayersInfo[i].SessionTeam) && (PlayersInfo[i].SessionDeaths == 0))
        BlueTeamCount++;
    }

    if (0 == BlueTeamCount)
    {
      CompleteObjective(0);
      CompleteObjective(1);
      FailObjective(2);
      FailObjective(3);
    }

    if (0 == RedTeamCount)
    {
      CompleteObjective(2);
      CompleteObjective(3);
      FailObjective(0);
      FailObjective(1);
    }

    if ((0 == BlueTeamCount) || (0 == RedTeamCount))
    {
      logWarning("CloseCFMission");
      sendEvent(5.0, getIdentificator(this), "CloseCFMission", []);
    }
  }


  static void SetDefaultMultiplayerSettings()
  {
    FragLimit   = 0;
    TimeLimit   = 0;
    ControlMode = MCM_Both;
    AvailablePlayerUnits = [ true, true ];
  }

  event void TimeOfMissionEnd()
  {
    FailObjective(0);
    FailObjective(1);
    CompleteObjective(2);
    FailObjective(3);
    logWarning("CloseCFMission");
    sendEvent(5.0, getIdentificator(this), "CloseCFMission", []);
  }
}
