//-----------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-----------------------------------------------------------------

//------------------------
// Switch to Phase 2 and 3
//------------------------
class CC1M1PW_SwitchToPhase2 extends CPositionWatcher, CBaseUtilities
{
  final static String Positionable  = "PopulatedDzot";    // кто следимт
  final static Array  ControlPoints = ["MainPlayerUnit"]; // за кем следим

  // количество зон
  final static Array RegionDefs = [650.0];

  void PointRegionChanged(
    Component _PositionWatcher,
    int       _Point,
    int       _RegionMask
                         )
  {
    GetMission().ShutdownWatcher(_PositionWatcher);

    fireEvent(0.0, [], "InitPhase2", []);
    GetMission().isPhase1 = false;
    GetMission().isPhase2 = true;
  }

  void PointRelativeSpeedChanged(Component _PositionWatcher, int _Point, float _RelativeSpeed)
  {
  }
}

class CC1M1PW_SwitchToPhase3 extends CPositionWatcher, CBaseUtilities
{
  final static String Positionable  = "PopulatedDzot";    // кто следимт
  final static Array  ControlPoints = ["MainPlayerUnit", "PlayerTank_1", "PlayerTank_2", "ReinforcementTank_1", "ReinforcementTank_2"]; // за кем следим

  // количество зон
  final static Array RegionDefs = [600.0];

  void PointRegionChanged(
    Component _PositionWatcher,
    int       _Point,
    int       _RegionMask
                         )
  {
    GetMission().ShutdownWatcher(_PositionWatcher);

    sendEvent(0.0, "CC1M1Gr_GermanTanks", "StartAttack", []);

    fireEvent(0.0, [], "InitPhase3", []);
    GetMission().isPhase2_AP = false;
    GetMission().isPhase3    = true;
  }

  void PointRelativeSpeedChanged(Component _PositionWatcher, int _Point, float _RelativeSpeed)
  {
  }
}

//------------
// Tanks Speed
//------------
class CC1M1PW_Tanks extends CPositionWatcher, CBaseUtilities
{
  final static String Positionable  = "PopulatedDzot"; // кто следимт
  final static Array  ControlPoints;                   // за кем следим

  Component m_ObDzot;
  Component m_ObPlayer;
  Component m_ObTanks;

  final static int m_PlayerIndex = 0;
  final static int m_TanksIndex  = 1;

  float m_PlayerFromDzot = 0.0;
  float m_PlayerSpeed    = 0.0;

  float m_TanksFromDzot   = 0.0;
  float m_TanksFromPlayer = 0.0;

  String m_CurrentRing;

  float m_RadiusRingPlayer = 15.0;
  float m_RadiusRingFirst  = 55.0;

  String WhatRing(float _distance)
  {
    if (_distance > m_RadiusRingFirst)
      return "IS_RING_TWO_PLUS";
    else if ((_distance <= m_RadiusRingFirst) && (_distance > m_RadiusRingPlayer))
      return "IS_RING_ONE_PLUS";
    else if ((_distance <= m_RadiusRingPlayer) && (_distance > (0.0 - m_RadiusRingPlayer)))
      return "IS_RING_PLAYER";
    else if ((_distance <= (0.0 - m_RadiusRingPlayer)) && (_distance > (0.0 - m_RadiusRingFirst)))
      return "IS_RING_ONE_MINUS";
    else if (_distance <= (0.0 - m_RadiusRingFirst))
      return "IS_RING_TWO_MINUS";
  }

  Initialize(Component _Mission, String _Name)
  {
    CPositionWatcher::Initialize(_Mission, _Name);
    m_ObDzot   = GetMission().GetObject(Positionable);                 // кто следит PopulatedDzot
    m_ObPlayer = GetMission().GetObject(ControlPoints[m_PlayerIndex]); // за кем следим MainPlayerUnit
    m_ObTanks  = GetMission().GetObject(ControlPoints[m_TanksIndex]);  // за кем следим CC1M1Gr_PlayerTanks

    GetMission().GetObject(_Name).SetUpdatePeriod(300);
  }

  void Update(Component _Watcher)
  {
    Array PointInfo = _Watcher.GetPointInfo(m_PlayerIndex);

    PointRegionChanged(_Watcher, m_PlayerIndex, PointInfo[INDEX_RegionMask]);
  }

  void PointRegionChanged(
    Component _PositionWatcher,
    int       _Point,
    int       _RegionMask
                         )
  {
    Array PlayerInfo   = _PositionWatcher.GetPointInfo(m_PlayerIndex);
    Array TanksInfo    = _PositionWatcher.GetPointInfo(m_TanksIndex);

    m_PlayerFromDzot = PlayerInfo[INDEX_Distance];
    m_PlayerSpeed    = PlayerInfo[INDEX_Speed];

    m_TanksFromDzot   = TanksInfo[INDEX_Distance];
    m_TanksFromPlayer = m_PlayerFromDzot - m_TanksFromDzot;

    m_CurrentRing = WhatRing(m_TanksFromPlayer);

    if (m_CurrentRing == "IS_RING_TWO_PLUS")
      m_ObTanks.ChangeMoveSpeed(0.001);
    else if (m_CurrentRing == "IS_RING_ONE_PLUS")
      m_ObTanks.ChangeMoveSpeed(m_PlayerSpeed);
    else if (m_CurrentRing == "IS_RING_PLAYER")
      m_ObTanks.ChangeMoveSpeed(m_PlayerSpeed + 2.0);
    else if (m_CurrentRing == "IS_RING_ONE_MINUS")
      m_ObTanks.ChangeMoveSpeed(m_PlayerSpeed + 3.0);
    else if (m_CurrentRing == "IS_RING_TWO_MINUS")
      m_ObTanks.ChangeMoveSpeed(0.0);
  }

  void PointRelativeSpeedChanged(Component _PositionWatcher, int _Point, int _RegionMask)
  {
  }
}

// Speed for Player Tanks
class CC1M1PW_PlayerTanks extends CC1M1PW_Tanks
{
  final static Array  ControlPoints = ["MainPlayerUnit", "CC1M1Gr_PlayerTanks"]; // за кем следим
}
// Speed for 76 Tanks
class CC1M1PW_76Tanks extends CC1M1PW_Tanks
{
  final static Array  ControlPoints = ["MainPlayerUnit", "CC1M1Gr_76Tanks"]; // за кем следим
}

//-----------------------------
// Agressive Zone for AntiTanks
//-----------------------------
class CC1M1PW_AgressiveZoneAntiTanks extends CPositionWatcher, CBaseUtilities
{
  final static String Positionable  = "LeftAntiTank_1";   // кто следимт
  final static Array  ControlPoints = ["MainPlayerUnit", "ReinforcementTank_1"]; // за кем следим

  // количество зон
  final static Array RegionDefs = [600.0];

  void PointRegionChanged(
      Component _PositionWatcher,
      int       _Point,
      int       _RegionMask
                         )
  {
    if (GetMission().isPhase2)
    {
      fireEvent(2.0, [], "InitPhase2_AP", []);
      GetMission().isPhase2    = false;
      GetMission().isPhase2_AP = true;
    }
  }

  void PointRelativeSpeedChanged(Component _PositionWatcher, int _Point, int _RegionMask)
  {
  }
}

// Agressive Zone for Left AntiTanks
class CC1M1PW_AZLeftAntiTanks extends CC1M1PW_AgressiveZoneAntiTanks
{
  final static String Positionable  = "NP_AgressiveZone_1"; // кто следимт
}
// Agressive Zone for Right AntiTanks
class CC1M1PW_AZRightAntiTanks extends CC1M1PW_AgressiveZoneAntiTanks
{
  final static String Positionable  = "NP_AgressiveZone_2"; // кто следимт
}

//------------------------
// Infantry Start Movement
//------------------------
class CC1M1PW_InfantryZone extends CPositionWatcher, CBaseUtilities
{
  final static String Positionable  = "NP_InfantryTwoZone"; // кто следимт
  final static Array  ControlPoints = ["MainPlayerUnit"];   // за кем следим

  // количество зон
  final static Array RegionDefs = [110.0];

  void PointRegionChanged(
      Component _PositionWatcher,
      int       _Point,
      int       _RegionMask
                         )
  {
    sendEvent(2.0, "CC1M1Gr_LeftInfantryTwo", "StartInfantryAttack", []);
    sendEvent(0.0, "CC1M1Gr_RightInfantryTwo", "StartInfantryAttack", []);

    GetMission().ShutdownWatcher(_PositionWatcher);
  }

  void PointRelativeSpeedChanged(Component _PositionWatcher, int _Point, int _RegionMask)
  {
  }
}
