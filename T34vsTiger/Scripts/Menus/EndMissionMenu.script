//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CEndMissionMenu
  extends CBaseMenu, CEndMissionControls, CBackgroundsMenu
{
  static String m_MenuClassName = "CEndMissionMenu";

  static WString CamaignName      = CCampaignNames::str_CAMPAIGN1;
  static String  MissionClassName = "CC1M1Mission"; //$TMP

  static int     MissionStatus = CMission::MOSID_InProgress;

  final static Array MissionResults = [
      [L"", /* invsible dummy  */                     new Color(1.0, 1.0, 1.0, 1.0)],
      [getLocalized("Menu", "str_MISSSION_SUCCESS"),  new Color(1.0, 1.0, 1.0, 1.0)],
      [getLocalized("Menu", "str_MISSSION_FAILED"),   new Color(1.0, 0.0, 0.0, 1.0)],
      [getLocalized("Menu", "str_MISSSION_SUCCESS"),  new Color(1.0, 1.0, 1.0, 1.0)]
    ];

  void OnInitMenu()
  {
    Component GameSettings = new #GameSettings();
    MissionClassName = CStartMissionMenu::MissionClassName;

    if (CMission::MOSID_Failed == MissionStatus)
      SetBackground(CMissionsMenu::CampaignNumber, 1);
    else
    {
      SetBackground(CMissionsMenu::CampaignNumber, 0);

      int MissionNum = 0;

      if (1 == CMissionsMenu::CampaignNumber)
      {
        for (int i = 0; i < CMissionsMenu::USSR_Missions.size(); i++)
        {
          if (CMissionsMenu::USSR_Missions[i] == MissionClassName)
            MissionNum = i + 2;
        }

        if (MissionNum > GameSettings.GetUserValue(L"USSRCampaign", 1))
          GameSettings.SetUserValue(L"USSRCampaign", MissionNum);
      }
      else
      if (2 == CMissionsMenu::CampaignNumber)
      {
        for (int i = 0; i < CMissionsMenu::Germany_Missions.size(); i++)
        {
          if (CMissionsMenu::Germany_Missions[i] == MissionClassName)
            MissionNum = i + 2;
        }

        if (MissionNum > GameSettings.GetUserValue(L"GerCampaign", 1))
          GameSettings.SetUserValue(L"GerCampaign", MissionNum);
      }
    }

//    logError("Campaing: " + new String(CMissionsMenu::CampaignNumber));

    m_MenuController.SetDefaultCommands("", "BackButton");

    GetObject("MissionName").SetText(
        CamaignName + L" - " +
        getStaticClassMember(MissionClassName + "_Strings", "MissionName")
      );

//    GetObject("BriefingText").SetSlaveScroller(GetObject("vs_scroll"));
//    GetObject("BriefingText").SetText(getStaticClassMember(MissionClassName + "_Strings", "BriefingText"));


    Component Mission = new #GameController().GetLoadedMission();
    if (Mission == null)
      logError("[CEndMissionMenu] Mission component is null!");

    GetObject("t_shoots").SetText(new WString(Mission.m_PlayerShoots));
    GetObject("t_hits").SetText(new WString(Mission.m_PlayerHits));
    int Accuracy = 0;
    if (Mission.m_PlayerShoots > 0)
      Accuracy = (Mission.m_PlayerHits* 100)/Mission.m_PlayerShoots;

    GetObject("t_aquracy").SetText(new WString(Accuracy) + L"%");

    GetObject("t_killed_tanks").SetText(new WString(Mission.m_PlayerVictims_Tanks));
    GetObject("t_killed_firedots").SetText(new WString(Mission.m_PlayerVictims_FireDots));
    GetObject("t_killed_bmp").SetText(new WString(Mission.m_PlayerVictims_BTRs));
    GetObject("t_killed_auto").SetText(new WString(Mission.m_PlayerVictims_Autos));
    GetObject("t_killed_people").SetText(new WString(Mission.m_PlayerVictims_Humans));

    FillObjectivesList(0.0);

    // Setup timer
    Component Timer = new #Timer();
    Timer.SetEventHandler(this);
    Timer.SetTickEvent("Update", 0.5);
    Timer.Enable(true);
    RegisterObject("EscTimer", Timer);

    // mission status
    GetObject("s_mission_result").SetText(MissionResults[MissionStatus][0]);
    GetObject("s_mission_result").SetTextColor(MissionResults[MissionStatus][1]);
    
    if (1 == CMissionsMenu::CampaignNumber && (CMissionsMenu::MissionNumber+1) >= CMissionsMenu::USSR_Missions.size())
      GetObject("ContinueButton").Enable(false);
    if (2 == CMissionsMenu::CampaignNumber && (CMissionsMenu::MissionNumber+1) >= CMissionsMenu::Germany_Missions.size())
      GetObject("ContinueButton").Enable(false);
    if(CMission::MOSID_Failed == MissionStatus)
      GetObject("ContinueButton").Enable(false);
  }

  void OnCloseMenu()
  {
    MissionStatus = CMission::MOSID_InProgress;

    UnregisterObject("EscTimer");
  }

  void OnControlActivated(
      String _ID
    )
  {
    GetObject("BriefingText").Update();

    if ("Quit2Button" == _ID)
      sendEvent(0.0, SOID_GameController, "QuitToMainMenu", []);
    else
    if ("RestartButton" == _ID)
    {
//      String MissionClass = clone(new #GameController().GetLoadedMission().GetClassName());
      sendEvent(0.0, SOID_GameController, "BeginNewGame", [CStartMissionMenu::MissionClassName]);
    }
    else
    if ("ContinueButton" == _ID)
    {
      final int iMission = CMissionsMenu::MissionNumber + 1;
      CMissionsMenu::MissionNumber = iMission;
      if (-1 != iMission)
      {
        if (1 == CMissionsMenu::CampaignNumber)
          CStartMissionMenu::MissionClassName = CMissionsMenu::USSR_Missions[iMission];
        else
        if (2 == CMissionsMenu::CampaignNumber)
          CStartMissionMenu::MissionClassName = CMissionsMenu::Germany_Missions[iMission];
        Invoke("StartMissionMenu");
      }
    }
    else
    if ("vs_scroll_Arrow1" == _ID)
      GetObject("BriefingText").ScrollUp();
    else
    if ("vs_scroll_Arrow2" == _ID)
      GetObject("BriefingText").ScrollDown();
  }

  void FillObjectivesList(
      float _Z
    )
  {
    GetObject("ObjectivesList").ClearWithUnregister();
    GetObject("ObjectivesList").SetListScrollStep(CUIObjectiveElement::GetElementHeight());

    Array Objectives = new #GameController().GetLoadedMission().GetMissionObjectives();

    Component Position = new CUIPosition(0.0, 0.0, 0.29, 14.0 / 768.0);
    Array Props = [];

    for (int Index = 0; Index < Objectives.size(); Index++)
    {
      if (Objectives[Index][3])
      {
        String NewID = "ObjectivesElement_" + new String(Index + 1);
        CreateUIControl(NewID,
                        "",
                        "CUIObjectiveElement",
                        Position,
                        Props);

        GetObject(NewID).SetObjectiveText(Objectives[Index][1]);
        GetObject(NewID).SetObjectiveStatus(Objectives[Index][2]);

        GetObject("ObjectivesList").AddControl(NewID);
      }
    }
  }

  void Update(
      float _DelatTime
    )
  {
    GetObject("BriefingText").Update(); // render time update
  }
}
