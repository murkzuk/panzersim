//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------
class CGermanSoldierRifleLoadTransportAnim
{
  final static String  AnimationName     = "load";
  final static float   AnimationTime     = 1.0;
}

class CGermanSoldierRifleUnloadTransportAnim
{
  final static String  AnimationName     = "unload";
  final static float   AnimationTime     = 1.0;
}

//Rifle
class CGermanSoldierRifleBulletExplosion
  extends CRifleBulletExplosion
{
  float  Damage   = 5.0;
}

class CGermanSoldierRifleFakeBulletControl
  extends CFakeRifleBulletControl
{
  String    ExplosionId  = "GermanSoldierRifleBulletExplosion";
  Component BulletRender = null; //new #StaticEffect<CRifleBulletEffect>();
}

class CGermanSoldierRifle
  extends CRifle
{
  final static String BulletPatternId = "GermanSoldierRifleFakeBullet";
  final static String FireSoundId     = "98kRifleFireSound";

  Component BurstFireSound  = null; //new #Emitter<CM60RifleFireSound>();

  final static float LockAngleHMin = - 46;
  final static float LockAngleHMax =   46;
  final static float LockAngleVMin = - 46;
  final static float LockAngleVMax =   46;

  // *** Rifle parameters for behavior
  final static int  FirePeriod        = 3200; // ms
  final static int  FirePeriodRandAdd = 500;  // ms

  final static float MinDistance      = 1;
  final static float MaxDistance      = 250;

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0;    // ms

  final static int  BurstDelay        = 3000; // ms
  final static int  BurstDelayRandAdd = 2000; // ms

  final static int     AutoRepeatDelay  = 110;
  final static boolean   CanFireInMove   = false;

  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["HUMAN"],[]],  // high priority mask
                                [["AIR"],  []],  // low priority mask
                                [[],       []]   // low priority mask: RestrictTo, Exclude
                              ];
}

class CGermanSoldierRifleBehaviorParams extends CBaseBehaviorParams
{
  float MaxAttackSpeed    = 3.5;
}

class CGermanSoldierRifleBehavior
  extends CHumanBehavior
{
  final static Component SpecParams = new CGermanSoldierRifleBehaviorParams();
  
  static category UnitType = CLASSIFICATOR_T34_SOLDER;

  boolean  CanMove   = true;
  boolean  HasRouter = true;
  boolean  HasRadar  = true;


  // *** radar parameters

  float  MaxRadarDistance = 300; // m
  float  MinRadarDistance = 5;    // m

  float   AttackDistanceMin           =  50.0;
  float   AttackDistanceMax           = 200.0;

  int    UpdateRadarPeriod        = 3000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms
}


class CGermanSoldierRifleUnit
  extends CHumanUnit
{
  final static float DefaultHitPoints = CHitPoints::GermanSoldierRifleUnitHitPoints;

//  final static boolean CanStayAttack = false;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "HUMAN"];

  // =======================================
  // Contruction and initialization
  // =======================================

  void CGermanSoldierRifleUnit()
  {
    SetupMesh(new #AnimatedObject<Chum_GermanSoldierRifleModel>(), [30, 2]);

    // Setup default substance id
    SetupObjectSubstance(CSubstances::Body);

    //$TODO animator
    //GetObject("AnimWeapon").EnableAnimator(false);
    SetupWeapon("Weapon", new #Weapon<CGermanSoldierRifle>(), ["Fire_A"], null);
    SetupBehavior(new #HumanBehavior<CGermanSoldierRifleBehavior>());

    // Load additionals animations
    LoadAnimations("ChumansAnimation");

    //SetupLoadTransportAnimation(new #LineAnimator<CGermanSoldierRifleLoadTransportAnim>(),
    //                            new #LineAnimator<CGermanSoldierRifleUnloadTransportAnim>()
    //                            );

  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CHumanUnit::Construct(_Mission, _PropMap);
  }
}
