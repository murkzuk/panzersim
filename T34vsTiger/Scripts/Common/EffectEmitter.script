//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

//
// Effect emitter script
//

class CEffectEmitter
  extends CBaseSysObject
{
  // Special object class
  final static String SPEC_CLASS = "Effect Emitters";

  // Default properties
  final static String  DefaultEffectID  = "";
  final static boolean DefaultAutoStart = true;

  // Effect emitter properties
  String  m_EffectID  = DefaultEffectID;
  boolean m_AutoStart = DefaultAutoStart;

  // Effects properties
  final static Array  SysEffects = [ 
                                     "EffectEmitterCenter"
                                   ];
  final static Array  EffectsSrc = [ 
                                     "CEffectEmitterCenterEffect"
                                   ];


  int m_DisplayEffectId = INVALID_EFFECT_ID;

  //
  // Service functions
  //

  Array GetDefaultProperties()
  {
    Array Default = CEditable::GetDefaultProperties();

    Default.append([
        ["EffectID",  DefaultEffectID],
        ["AutoStart", DefaultAutoStart]
      ]);

    return Default;
  }

  void SetProperties(
      Component _PropMap
    )
  {
    CEditable::SetProperties(_PropMap);

    SetActive(0);

    m_EffectID  = _PropMap.Get("EffectID",  DefaultEffectID);
    m_AutoStart = _PropMap.Get("AutoStart", DefaultAutoStart);

    if (m_AutoStart)
      SetActive(1);
  }

  void Initialize(
      Component _Level,
      Component _PropMap
    )
  {
    SetProperties(_PropMap);

    if (CSpecialSettings::IsSpecObjectsVisible(SPEC_CLASS))
      Show();

    if (m_AutoStart)
      SetActive(1);
  }

  void Shutdown(
      Component _Level
    )
  {
    if (CSpecialSettings::IsSpecObjectsVisible(SPEC_CLASS))
      Hide();

    SetActive(0);
  }

  //
  // Object state functions
  //

  void SetActive(
      int _Active
    )
  {
    if (1 == _Active)
    {
      if (INVALID_EFFECT_ID == m_DisplayEffectId)
        m_DisplayEffectId = (new #EffectsArray()).
          CreateEffect(m_EffectID, getPosition(this), this);
    }
    else
    if (0 == _Active)
    {
      if (INVALID_EFFECT_ID != m_DisplayEffectId)
        (new #EffectsArray()).DeleteEffect(m_DisplayEffectId);
      m_DisplayEffectId = INVALID_EFFECT_ID;
    }
  }
}
