//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CGameSettings extends CSpecialSettings, CDebugSettings
{
  //  Set to empty string to disable output.      "RC13E.30112006"
  final static String  VersionID                = "";

  //
  // System settings
  //

  final static int     WindowWidth              = 1024;
  final static int     WindowHeight             = 768;
  final static int     RefreshRate              = 60;
  final static int     ColorDepth               = 32;
  final static boolean WindowMode               = false;

  final static int     LightingModel            = LMDL_Pixel;
  final static float   RenderDetail             = 1.0;
  final static float   ForestDetail             = 1.0;
  final static float   GrassDetail              = 1.0;
  final static float   TerrainDetail            = 1.0;
  final static float   WaterDetail              = 1.0;
  final static float   GammaCoef                = 0.0;
  final static int     MaxLightsQty             = 4;
  final static int     TextureBestLOD           = 1;
  final static int     ShadowDetail             = 1.0;
  final static boolean IsBloomEnabled           = false;// murkz true to false
  final static boolean UseInstancing            = true;

  final static float   InteriorDetail           = 1.0;
  final static float   ObjectsDetail            = 1.0;

  final static int     ChannelsQty              = 2;
  final static int     SoundFrequency           = 22050;
  final static int     SoundBitRate             = 16;
  final static float   SoundVolume              = 1.0;
  final static float   MusicVolume              = 0.6;

  final static boolean EnableTextureCache       = false;

  //
  // Game settings
  //

  final static int     DifficultyLevel          = 2;
  final static int     TargetingMode            = ETM_Arcade;
  final static boolean TargetsOnMap             = true;
  final static int     OrientationMode          = 0;
  final static int     Crosshair                = TC_Crosshair1;
  final static int     WingmanMenuStyle         = WMS_Line;
  final static int     CockpitDevicesColor      = 0;
  final static int     ManualControlMode        = MCM_Simulator;

  final static boolean DynamicLift              = false;
  final static boolean IntelligentCompass       = false;
  final static boolean WindEffectMode           = true;
  final static boolean FlaterMode               = true;
  final static boolean AircushionMode           = true;
  final static boolean PayloadMode              = true;
  final static boolean ShockwaveMode            = true;
  final static boolean VortexRingMode           = true;
  final static boolean RetreatingBladeStallMode = true;
  final static int     InjuryMode               = IM_Arcade;
  final static int     CockpitMode              = CM_Cockpit;
  final static int     FlaresControlMode        = CTLM_Auto;
  final static boolean InverseY                 = false;
  final static float   MouseSensitivity         = 0.5;
  final static boolean IsTorqueControl          = false;
  final static boolean NavpointNavigationMode   = true;

  final static boolean ForceFeedbackEnabled     = false;
  final static float   ForceFeedbackStrength    = 0.5;
  final static float   JoystickSensitivity      = 0.5;

  // joystick deadzone
  final static float   MinJoystickDeadZone      = 0.10; // 10%
  final static float   MaxJoystickDeadZone      = 0.50; // 50%
  final static float   JoystickDeadZone         = MaxJoystickDeadZone;
  final static float   ArcadeSliderDeadZone     = 0.05; // 5%

  // axis inversion
  final static boolean InvertRotateLRAxis       = false;
  final static boolean InvertMoveFBAxis         = false;
  final static boolean InvertMoveLRAxis         = false;
  final static boolean InvertSpeedAxis          = false;
  final static boolean InvertBladesSpeedAxis    = false;

  // sound inversion
  final static boolean InvertSoundFB            = false;
  final static boolean InvertSoundLR            = false;

  // EAX sound
  final static boolean UseEAX                   = true;

  // enable/disable joystick
  final static boolean EnableJoystick           = true;

  // joystick sensitivity
  final static float   MinJoystickSensitivity   = 0.03;
  final static float   MaxJoystickSensitivity   = 1.0;

  // preload background
  final static String  BackgroundTextureName    = "Resources/MainMenuBackground.tex";

  // Useable action maps
  final static Array   UseableActionMaps        = [ AMID_HeliSim, AMID_Menu, AMID_Edit ];
  final static int     DefaultActionMap         = AMID_HeliSim;

  final static boolean EnableCutScenes          = true;

  final static boolean EnableLowTextures        = false;

}
class CIntroSettings extends CApplicationSettings
{
  final static String  VideoPath = "Video\\";
  Array Movies;

  void CIntroSettings()
  {
    // Get video path
//    String VideoPath = new #GameSettings().GetVideoPath();

    Movies.add(VideoPath + "evolved.avi");
    Movies.add(VideoPath + "1c.avi");
    Movies.add(VideoPath + "g5.avi");
  }
}
