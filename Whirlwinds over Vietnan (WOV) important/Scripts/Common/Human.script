//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CHumanStateControl
  extends CUnitStateControl
{
}

class CHumanTargetingAnimator
  extends CTargetingAnimator
{
  String HorAnimName    = "";
  String VerAnimName    = "";

  float  LeftEndAngle   = -180.0;
  float  RightEndAngle  =  180.0;
  float  TopEndAngle    =  40.0;
  float  BottomEndAngle = -15.0;
}

class CHumanUnit
  extends CUnit, CHumanStateControl
{
  final static boolean Targeting_IsCanBeMarked = false;

  final static String DefaultSurfaceControl = "PutonGroundUpright";

  final static boolean CanStayAttack = true;

  int SpecHeliLoadAnim = -1;

  final static Array DeathRunAnimations = [ ["death_run", 6.36f] ];

  final static Array DeathAnimations = [["death_stand_fr", 4.33],
                                        ["death_sit_fr", 4.0]];
;

  final static boolean DefaultShowInCinema = false;


//  Animation Arrays
/*
  final static int STATE_Default              = 0;
  final static int STATE_NearHeli             = 1;
  final static int STATE_Ready                = 2;
  final static int STATE_Aim                  = 3;
*/
  // from CHumanAnimatorConfig

  final static Array RunAnimations = [
                                        [
                                          CHumanAnimatorConfig::iANIM_RunCommon
                                        ],
                                        [
                                          CHumanAnimatorConfig::iANIM_RunHeli
                                        ],
                                        [
                                          CHumanAnimatorConfig::iANIM_RunReady
                                        ],
                                        [
                                          CHumanAnimatorConfig::iANIM_RunReady
                                        ]
                                      ];

  final static Array StayAnimations = [
                                        [
                                          CHumanAnimatorConfig::iANIM_StayFree
                                        ],
                                        [
                                          CHumanAnimatorConfig::iANIM_StayFree
                                        ],
                                        [
                                          CHumanAnimatorConfig::iANIM_StayReady
                                        ]
                                      ];

  // ==================================
  // Costruction
  // ==================================
  
  CHumanUnit()
  {
  }

  // ==================================
  // Interface
  // ==================================

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    // Call inherited function
    CUnit::Construct(_Mission, _PropMap);

    // Setup animator
    SetupAnimator("HumanAnimator", new #StateAnimator<CHumanAnimator>());

    if (!DeathAnimations.isEmpty() ||
        !DeathRunAnimations.isEmpty())
      SetupAnimator("DeathAnimator", new #LineAnimator());    
    
    SpecHeliLoadAnim = _PropMap.Get("SpecHeliLoadAnim", -1);
    if (SpecHeliLoadAnim != -1)
      SetupHeliLoadAnimator();

    Component SurfaceControl = GetObject("SurfaceControl");
    Component Mesh  = GetMeshComponent();
    Component Joint = Mesh.GetJoint("WalkPoint");
    if (Joint == null)
      logWarning("Invalid WalkPoint joint for human: " + getIdentificator(user));
    else
      SurfaceControl.SetGearJoints([Joint]);
  }

  void Initialize(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Initialize(_Mission, _PropMap);

    Component HumanAnimator = GetHumanAnimator();
    HumanAnimator.Initialize(GetMeshComponent());

    HumanAnimator.InitPossibleAnimations(GetHumanAnimations(RunAnimations, _PropMap.Get("RunAnimations", [])),
                                         GetHumanAnimations(StayAnimations, _PropMap.Get("StayAnimations", [])));

    HumanAnimator.SetMinVisibleLOD(3.0f);

    // Register animator in mesh for send show/hide messages
    GetMeshComponent().AppendRenderNotifyObject(HumanAnimator);

    if (!m_WeaponList.isEmpty())
    {
      HumanAnimator.InitializeWeaponJoint(m_WeaponList[0]);

      Component Behavior = GetBehavior();
      if (Behavior != null)
      {            
        if (CHumanAnimatorConfig::MaxHAngle < Behavior.GetSpecParams().NonRotatableAngle)
          Behavior.SetWeaponAnimatedHAngle(CHumanAnimatorConfig::MaxHAngle);
        Behavior.InvokeTaskFunction("SetIsHuman", [true]);
      }
    }

    // initial anim 
    OnAttackStateChanged(CHumanAttackStates::STATE_Default);
  }

  void SetProperties(
      Component _PropMap
    )
  {
    CUnit::SetProperties(_PropMap);
  }  

  // ==================================
  // Service
  // ==================================

  void SetupLoadTransportAnimation(
      Component _LoadLineAnimator,
      Component _UnloadLineAnimator
    )
  {
    Component Mesh = GetMeshComponent();

    setSlaveObject(_LoadLineAnimator, Mesh);
    RegisterObject("LoadAnimator", _LoadLineAnimator);

    setSlaveObject(_UnloadLineAnimator, Mesh);
    RegisterObject("UnloadAnimator", _UnloadLineAnimator);
  }
  
  Component GetHumanAnimator()
  {
    return GetObject("HumanAnimator");
  }
  
  void OnLifeStateChanged(
      boolean _IsAlive
    )
  {
    // check if this is destructible
    if (-1.0 == m_MaxHitPoints)
      return;

    if (!_IsAlive)
    {
      DestroyHuman();
    }
    else
      sendEvent(0.0, getIdentificator(this), "RestoreObject", []);
  }

  void DestroyHuman()
  {
    logMessage(getIdentificator(this) + "::DestroyHuman()");

    Component DeathAnimator = GetObject("DeathAnimator");
    if (DeathAnimator == null)
    {
      sendEvent(0.0, getIdentificator(this), "DestroyObject", []);
      return;
    }

    // Set dead classificator
    addClassificator(this, CLASSIFICATOR_DEAD_OBJECT);
    addClassificator(this, CLASSIFICATOR_DO_NOT_COLLISION_CHECK);
 
    // Create death effect & sound
    if ("" != PrevDeathEffect)
      (new #EffectsArray()).
        CreateEffect(PrevDeathEffect, getPosition(this), this);

    if ("" != PrevDeathSound)
      (new #SoundsArray()).
        CreateSound(PrevDeathSound, getPosition(this));

    // clear events scheduled earlier for this object
    clearEventsForObject(getIdentificator(this));

    // get beh component
    Component Behavior = GetBehavior();
    if (Behavior != null)   
    {
      // deactivate beh
      Behavior.ActivateBehavior(false);
    }

    Map ContextInfo = GetHumanAnimator().GetContextInfo();

    EnableAnimators(false);

    boolean Visible = true;

    if (ContextInfo.find("Visible"))
      Visible = ContextInfo.getValue();

    if (ContextInfo.find("Speed"))
    {
      float Speed = ContextInfo.getValue();
      if (Speed >= 0.5f) //$TODO Constant
      {
        float Time = DeathRunAnimations[0][1] / sqrt(Speed);
        if (Visible)
        {
          DeathAnimator.SetAnimationName(DeathRunAnimations[0][0]);
          DeathAnimator.SetAnimationTime(Time);
          DeathAnimator.AnimateForward();
        }
        else
        {
          // dont play anim just set last phase
          Time = 0.0;
          GetMeshComponent().SetAnimationPhase(DeathRunAnimations[0][0], 1.0f);
        }

        sendEvent(Time, getIdentificator(GetMission()), "OnObjectDestroyed", [getIdentificator(this)]);
        sendEvent(Time, getIdentificator(this), "OnObjectDestroyed", [getIdentificator(this)]);
        return;     
      }
    }

    int CurAnim = GetSitState();
    if (CurAnim >= DeathAnimations.size())
      CurAnim = 0;

    float Time = DeathAnimations[CurAnim][1];
    if (Visible)
    {
      DeathAnimator.SetAnimationName(DeathAnimations[CurAnim][0]);
      DeathAnimator.SetAnimationTime(Time);
      DeathAnimator.AnimateForward();
    }
    else
    {
      // dont play anim just set last phase
      Time = 0.0;
      GetMeshComponent().SetAnimationPhase(DeathAnimations[CurAnim][0], 1.0f);
    }

    // Send destruction event
    sendEvent(Time, getIdentificator(GetMission()), "OnObjectDestroyed", [getIdentificator(this)]);
    sendEvent(Time, getIdentificator(this), "OnObjectDestroyed", [getIdentificator(this)]);
    //sendEvent(Time, getIdentificator(this), "EnableSurfaceControl", [false]);
  }
  
  int GetAttackState()
  {
    return GetHumanAnimator().GetAttackState();
  }

  int GetSitState()
  {
    return GetHumanAnimator().GetSitState();
  }


  // ==================================
  // Events
  // ==================================

  event void RestoreObject()
  {
    removeClassificator(this, CLASSIFICATOR_DO_NOT_COLLISION_CHECK);
    Component DeathAnimator = GetObject("DeathAnimator");
    if (DeathAnimator != null)
    {
      DeathAnimator.Stop();
    }

    EnableAnimators(true);

    CObject::RestoreObject();
  }

  event void EnableAnimators(
      boolean _IsEnabled
    )
  {
    GetHumanAnimator().EnableControl(_IsEnabled);
  }

  event void OnAttackStateChanged(
      int _StateID
    )
  {
    
    GetHumanAnimator().OnAttackStateChanged(_StateID);

    if (!CanStayAttack &&
        _StateID >= CHumanAttackStates::STATE_Ready)
    {
      OnSitStateChanged(CHumanAttackStates::STATE_Sit);
    }
  }

  void OnMoveOrder()
  {
    GetHumanAnimator().SetMoveState(1);
  }

  void OnMoveOrderEnd()
  {
    GetHumanAnimator().SetMoveState(0);
  }

  event void OnSitStateChanged(
      int _StateID
    )
  {    

    if (!CanStayAttack &&
        GetAttackState() >= CHumanAttackStates::STATE_Ready)
    {
      _StateID = CHumanAttackStates::STATE_Sit;
    }
    
    GetHumanAnimator().OnSitStateChanged(_StateID);
  }

  event void ShowAnimDebugInfo(
      boolean _Show
    )
  {
    GetHumanAnimator().ShowDebugInfo(_Show);
  }

  event void ShowAnimParams(
      int     _Param,
      boolean _Show
    )
  {
    GetHumanAnimator().ShowParameter(_Param, _Show);
  }

  void PlayLoadTransportAnimation(
      String _TransportID,
      Array  _AnimInfo
    )
  {  
    Component LoadAnimator = GetObject("LoadAnimator");
    if (LoadAnimator != null)
    {
      EnableAnimators(false);    
      if (_AnimInfo.size() == 2)
      {
        LoadAnimator.SetAnimationName(_AnimInfo[0]);
        LoadAnimator.SetAnimationTime(_AnimInfo[1]);
      }
      LoadAnimator.AnimateForward();
      GetMeshComponent().SetAnimationPhase(LoadAnimator.GetAnimationName(), 0.0);
      sendEvent(LoadAnimator.GetAnimationTime(), getIdentificator(this), "LoadAnimationEnd", []);
      sendEvent(LoadAnimator.GetAnimationTime() + 1.0, getIdentificator(this), "LoadAnimationContinue", []);
    }
    else
      sendEvent(0.0, getIdentificator(this), "LoadAnimationEnd", []);   
  }

  event void LoadAnimationContinue()
  {
    EnableAnimators(true);
  }

  void PlayUnloadTransportAnimation(
      String _TransportID
    )
  {  
    Component UnloadAnimator = GetObject("UnloadAnimator");
    if (UnloadAnimator != null)
    {
      EnableAnimators(false);
      UnloadAnimator.AnimateForward();

      sendEvent(UnloadAnimator.GetAnimationTime(), getIdentificator(this), "EnableAnimators", [true]);   
      sendEvent(UnloadAnimator.GetAnimationTime(), getIdentificator(this), "UnloadAnimationEnd", []);
    }
    else
      sendEvent(0.0, getIdentificator(this), "UnloadAnimationEnd", []);   
  }


  void EnablePhysics()
  {
    CUnit::EnablePhysics();
  }

  void SetupHeliLoadAnimator()
  {
    Component HeliLoadAnimator = new #StateAnimator();
    loadFromScript(HeliLoadAnimator, "CHumanLoadHeliAnimator", [SpecHeliLoadAnim]);

    setSlaveObject(HeliLoadAnimator, GetSlaveObject());
    RegisterObject("HeliLoadAnimator", HeliLoadAnimator);

    if (CHumanLoadHeliAnimatorConfig::AnimationsInitPos[SpecHeliLoadAnim] == new Vector(0.0, 0.0, 0.0))// assume 0.0 vector is spec value
    {
      Component Mesh = GetMeshComponent();
      Mesh.SetAnimateAlways(true);
      Mesh.SetAnimationPhase(CHumanLoadHeliAnimatorConfig::Animations[SpecHeliLoadAnim][1][0], 0.0f);
      Mesh.SetAnimateAlways(false);      

      // initial pos relative to root joint
      CHumanLoadHeliAnimatorConfig::AnimationsInitPos[SpecHeliLoadAnim] = getPosition(Mesh.GetRootJoint()).multInvVrt(getPosition(Mesh.GetJoint("m_Hips")).origin);
    }

    HeliLoadAnimator.EnableControl(false);
    // $TMP
//    HeliLoadAnimator.EnableControl(true);
//    GetHumanAnimator().EnableControl(false);
  }

  void HeliLoadRun()
  {
    GetObject("HeliLoadAnimator").SetRunState();
  }

  float GetHeliLoadTime()
  {
    return CHumanLoadHeliAnimatorConfig::Animations[SpecHeliLoadAnim][1][1];
  }  
  
  Matrix GetHeliLoadInitPos(
      Matrix _HeliPos
    )
  {
    Matrix T = new Matrix(_HeliPos);
    T.xvec = - T.xvec;
    T.yvec = - T.yvec;
    T.origin =  _HeliPos.multVrt(CHumanLoadHeliAnimatorConfig::AnimationsInitPos[SpecHeliLoadAnim]);
    return T;
  }

  Array GetHumanAnimations(
      Array _Default,
      Array _Local
    )
  {
    if (_Local.isEmpty())
      return _Default;
    
    Array CurAnimations = clone(_Default);
    for (int i = 0; i < _Local.size(); i++)
    {
      CurAnimations[_Local[0]] = _Local[1];
    }
    return CurAnimations;
  }
}
