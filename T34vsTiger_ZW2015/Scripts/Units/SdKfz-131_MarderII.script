/*

  Array  Animation = [
      ["gun_a_recoil", ["Weapon_A", 0, 30]],
      ["gun_a", ["Weapon_Base", 0, 1],["ShieldTop", 0, 1]],
      ["turret_a", ["Turret_A", 0, 1]],
      ["L_Wheel01_lift", ["joint_WheelLeftMain_1", 0, 20]],
      ["L_Wheel02_lift", ["joint_WheelLeftMain_2", 0, 20]],
      ["L_Wheel03_lift", ["joint_WheelLeftMain_3", 0, 20]],
      ["L_Wheel04_lift", ["joint_WheelLeftMain_4", 0, 20]],
      ["L_Wheel05_lift", ["joint_WheelLeftMain_5", 0, 20]],
      ["R_Wheel01_lift", ["joint_WheelRightMain_1", 0, 20]],
      ["R_Wheel02_lift", ["joint_WheelRightMain_2", 0, 20]],
      ["R_Wheel03_lift", ["joint_WheelRightMain_3", 0, 20]],
      ["R_Wheel04_lift", ["joint_WheelRightMain_4", 0, 20]],
      ["R_Wheel05_lift", ["joint_WheelRightMain_5", 0, 20]],
      ["body_recoil_fb", ["Body", 0, 30]],
      ["body_recoil_bf", ["Body", 30, 60]],
      ["body_recoil_lr", ["Body", 60, 90]],
      ["body_recoil_rl", ["Body", 90, 120]],
      ["wheels_left", ["WheelLeftMainFront", 0, 60], ["WheelLeftMain_1", 0, 60], ["WheelLeftMain_2", 0, 60], ["WheelLeftMain_3", 0, 60], ["WheelLeftMain_4", 0, 60], ["WheelLeftMain_5", 0, 60], ["WheelLeftMain_11", 0, 60], ["WheelLeftMain_12", 0, 60], ["WheelLeftMain_13", 0, 60], ["WheelLeftRear", 0, 60]],
      ["wheels_right", ["WheelRightMainFront", 0, 60], ["WheelRightMain_1", 0, 60], ["WheelRightMain_2", 0, 60], ["WheelRightMain_3", 0, 60], ["WheelRightMain_4", 0, 60], ["WheelRightMain_5", 0, 60], ["WheelRightMain_11", 0, 60], ["WheelRightMain_12", 0, 60], ["WheelRightMain_13", 0, 60], ["WheelRightRear", 0, 60]]
    ];

  Map    ConfigSets = new Map([
      [ "Body_NormalSet", [ "Body_NormalSet", "Turret" ] ],
      [ "Body_crashedSet", [ "TrackLeft_crashedSet", "TrackRight_crashedSet"] ]
    ]);

  Map    MaterialsNameId = new Map([
      [ "Hull_MarkingsMaterial", "0"],
      [ "K_RINGSMaterial", "1"],
      [ "Pak40Mat", "2"],
      [ "ShieldMat", "3"],
      [ "Body_NormalSet", "4"],
      [ "FLAGMaterial", "5"],
      [ "Turret", "6"],
      [ "NumberMaterial", "7"],
      [ "HullRIGHT", "8"],
      [ "HullLEFT", "9"],
      [ "HullBottom", "10"],
      [ "HullTop", "11"],
      [ "HullREAR", "12"],
      [ "HullFWD", "13"],
      [ "TrackLeft_crashedSet", "14"],
      [ "TrackLeftMaterial", "15"],
      [ "TrackRight_crashedSet", "16"]
    ]);
*/

//=======================================================================


// Unit Explosion
class CSAUSdKfz131_MarderIIExplosion
  extends CGunPak40Explosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
}

class CSAUSdKfz131_MarderIIGunTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 15.0;
  float  RightEndAngle  =  -15.0;
  float  TopEndAngle    =  -6.0;
  float  BottomEndAngle =  20.0;
}

// Main cannon bullet explosion
class CSAUSdKfz131_MarderIIGunCalibreBulletExplosion
  extends CGunPak40GunCalibreBulletExplosion
{

}

class CSAUSdKfz131_MarderIIGunCalibreBulletDebrisCloud
  extends CGunPak40GunCalibreBulletDebrisCloud
{

}

class CSAUSdKfz131_MarderIIGunCalibreBulletDebrisControl
   extends CGunPak40GunCalibreBulletDebrisControl
{

}

class CSAUSdKfz131_MarderIIGunCalibreBulletDebrisExplosion
  extends CGunPak40GunCalibreBulletDebrisExplosion
{

}

class CSAUSdKfz131_MarderIIGunSubcalibreBulletExplosion
  extends CGunPak40GunSubcalibreBulletExplosion
{

}

class CSAUSdKfz131_MarderIIGunHEBulletExplosion
  extends CGunPak40GunHEBulletExplosion
{

}

class CSAUSdKfz131_MarderIIGunHEBulletDebrisCloud
   extends CGunPak40GunHEBulletDebrisCloud
{

}
class CSAUSdKfz131_MarderIIGunHEBulletDebrisControl
  extends CGunPak40GunHEBulletDebrisControl
{

}

class CSAUSdKfz131_MarderIIGunHEBulletDebrisExplosion
  extends CGunPak40GunHEBulletDebrisExplosion
{

}
class CSAUSdKfz131_MarderIIGunCalibreBulletControl
  extends CGunPak40GunCalibreBulletControl
{

}

class CSAUSdKfz131_MarderIIGunSubCalibreBulletControl
  extends CGunPak40GunSubCalibreBulletControl
{

}

class CSAUSdKfz131_MarderIIGunHEBulletControl
  extends CGunPak40GunHEBulletControl
{

}

class CSAUSdKfz131_MarderIICalibreAmmo
{
  final static String BulletPatternId = "SAUSdKfz131_MarderIIGunCalibreBullet";
  final static int    Ammunition      =  2000; // Was    111 ;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;

}

class CSAUSdKfz131_MarderIISubCalibreAmmo
{
  final static String BulletPatternId = "SAUSdKfz131_MarderIIGunSubCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HUMAN"]];
  final static float  LoadingTime     = 0.0f;
}

class CSAUSdKfz131_MarderIIHEAmmo
{
  final static String BulletPatternId = "SAUSdKfz131_MarderIIGunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

// Main cannon properties
class CSAUSdKfz131_MarderIIGun
  extends CHeavyGun, CWeaponFireRecoil      //   CPlayerWeapon,
{
  String CloudEffectId   = "HeavyGunFireMuzzleEffect";
  final static float  InitBulletSpeed = 0.0f;
  final static float  FireDeviation   = 0.05;
  final static Vector GravityVector   = CPiercing::ShellGravityVector;
  final static boolean HighTrajectory  = false;

  final static String BulletPatternId = "";
  final static String FireSoundId     = "Pak40GunFireSound";

  
  final static Array Ammo = [
                              new CSAUSdKfz131_MarderIICalibreAmmo(),
                              new CSAUSdKfz131_MarderIICalibreAmmo(),    // CSAUSdKfz131_MarderIISubCalibreAmmo()
                              new CSAUSdKfz131_MarderIIHEAmmo()
                            ];

  //$TMP TEST DATA
  final static Array AmmoTargetUse    = [
                                          //HEAVYTANK
                                          [0, [["HEAVYTANK"],[]], [[500.0, 25.0, 2000.0, 100.0], [[1000.0, 40.0], [1500.0, 80.0]]]],
                                          [1, [["HEAVYTANK"],[]], [[500.0, 75.0, 2000.0, 0.0  ], [[1000.0, 60.0], [1500.0, 20.0]]]],
                                          //TANK
                                          [0, [["TANK"],     []], [[500.0, 35.0, 2000.0, 100.0], [[1000.0, 45.0], [1500.0, 90.0]]]],
                                          [1, [["TANK"],     []], [[500.0, 65.0, 2000.0, 0.0  ], [[1000.0, 55.0], [1500.0, 10.0]]]],
                                          //VEHICLE
                                          [2, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 100.0], [[1000.0, 90.0], [1500.0, 100.0]]]],
                                          //HUMAN
                                          [2, [["HUMAN"],    []], [[500.0, 20.0, 1500.0, 0.0],   [[1000.0, 10.0]]]], //
                                          //BLD_WAR
                                         // [0, [["BLD_WAR"],  []], [[500.0, 90.0, 1000.0, 100.0], []]],
                                          [2, [["BLD_WAR"],  []], [[500.0, 10.0, 1000.0, 0.0  ], []]],
                                          //BLD_CIV
                                          [2, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 100.0], []]]
                                        ];

  final static float  LockAngleHMin     = -15.0;
  final static float  LockAngleHMax     =  15.0;
  final static float  LockAngleVMin     = -6.0;
  final static float  LockAngleVMax     =  20.0;
  final static float  BlockedLockAngle  =  1.0;

  final static float DirectionSpeedH  = 2.5; // deg / sec  • horizontal
  final static float DirectionSpeedV  =  2.0; // deg / sec  • vertical

 // Component DirectionSoundH  = new #Emitter<CTankMediumTurretDirectionSoundV>();
//  Component DirectionSoundV  = new #Emitter<CTankMediumTurretDirectionSoundV>();


  final static int     Ammunition     = 2000;        // wrong value

  // *** Gun parameters for behavior

  final static int  FirePeriod        = 11000; // ms
  final static int  FirePeriodRandAdd = 2000; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 3000; // ms
  final static int  BurstDelayRandAdd = 1000; // ms

//  final static int     Slot             = 0;
//  final static boolean Primary          = true; // GUN should be marked as Primary

  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["HEAVYTANK"],[]], // high priority mask: RestrictTo, Exclude
                                [["GROUND"],[]]  // very-very low priority target with a pulley in the middle
                              ];
  Component FireAnimator = new #LineAnimator<CSAUSdKfz131_MarderIIFireAnimation>();
}

/* */

// Engine system

class CSAUSdKfz131_MarderIIEngineSystem
{

  float MaxPower      = 1000.0;  // maximum horse power
  float MinSpeed      = 600.0;   // minimum RPM
  float MaxSpeed      = 2800.0;  // maximum RPM

  Array Gears         = [
                          -0.10,
                           0.00,
                           0.10,
                           0.20,
                           0.30,
                           0.45,
                           0.60
                        ];


  float LoForce       = 800.0;   // force of engine if brake is disable
  float HiForce       = 5000.0;  // force of engine if brake is enable



}

// Movement animator

class CSAUSdKfz131_MarderIIBaseTrack
{
  String  JointName           = "";
  String  TrackTexName        = "Textures/u_veh_PnZ_II_track_.tex";  //
  String  WheelAnimName       = "";

  Array   TrackTexScrollScale = [0.0, -0.58 ];
  float   WheelRotateScale    = 0.04;
  float   RealTrackPathScale  = 2.0f;

  boolean IsLeftTrack;

  float   WheelRadius         = 0.277 + 0.062; // whell radius + track radius
  float   WhellLiftDown       = 0.070;         // max down wheel offset
  float   WhellLiftUp         = 0.070;         // max up wheel offset

 // float   TrackSoft           = 0.5;
  // Collision mask [restrict], [exclude]
  Array   CollisionMask = [[CLASSIFICATOR_WALK_SURFACE], []];
}

class CSAUSdKfz131_MarderIILeftTrack
  extends CSAUSdKfz131_MarderIIBaseTrack
{
  String  JointName     = "TrackLeft";
  String  WheelAnimName = "wheels_left";

  boolean IsLeftTrack = true;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["joint_WheelLeftMain_1", "L_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelLeftMain_2", "L_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelLeftMain_3", "L_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelLeftMain_4", "L_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelLeftMain_5", "L_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

class CSAUSdKfz131_MarderIIRightTrack
  extends CSAUSdKfz131_MarderIIBaseTrack
{
  String  JointName     = "TrackRight";
  String  WheelAnimName = "wheels_right";
  boolean IsLeftTrack   = false;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["joint_WheelRightMain_1", "R_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelRightMain_2", "R_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelRightMain_3", "R_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelRightMain_4", "R_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["joint_WheelRightMain_5", "R_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
 }
/*  
//Turret out animator
class CSAUSdKfz131_MarderIITurretOutAnimator1
{
  String AnimationName = "turret_out1";  //
  float  AnimationTime = 1.5;
};
class CSAUSdKfz131_MarderIITurretOutAnimator2
{
  String AnimationName = "turret_out2";       //
  float  AnimationTime = 1.5;
};
*/ 
// Fire Animator
class CSAUSdKfz131_MarderIIFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

// Behavior

class CSAUSdKfz131_MarderIIBehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 3.5;
  float   CollisionAddRadius = 4.0;
}

class CSAUSdKfz131_MarderIIBehavior extends CBaseSAUBehavior
{
  final static Component SpecParams = new CSAUSdKfz131_MarderIIBehaviorParams();   //     , CBaseTankBehavior
 


  int      AttackStyle        = AttackStyle_SAU;            //        AttackStyle_LightTank;              
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true;     //
  boolean CanFireInMove  = false;
 // float SafeFrontConeAngle = 20.0;     
  float  MinRotateRadius = 0; // unit can turn when staying   //

  float   CollisionRadius = 8.5;
  float   AttackDistanceMin = 20.0;
  float   AttackDistanceMax = 2100.0;

  // *** radar parameters

  float MaxRadarDistance = 2100.0; // m
  float MinRadarDistance = 1.0;    // m
  float MaxRadarAngle    = 90.0;

  int    UpdateRadarPeriod        = 5000; // ms
  int    UpdateRadarPeriodRandAdd = 2000; // ms

  // *** movement physical parameters

  // physical limitations

  float   MaxRotateSpeed                = 3.0f;
  Vector  MaxSpeed                      = new Vector( 6.2, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 5.2, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.3, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 1.5, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 1.0, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 3.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 1.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 2.0); //1);  // [rad/(s*s)]


}

// ================================================
// Device classes
// ================================================

class CSAUSdKfz131_MarderIIHullDriverDevice
  extends CHullDriverDevice
{
 String m_NormalSetId  = "Body_NormalSet";  //"";    /* */
 String m_CrashedSetId = "";  //"Body_CrashedSet";

    void HullDriverDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - Marder HullDriver ");
        Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 30);
    }
  }

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed Marder HullDriver ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CSAUSdKfz131_MarderIIHullGunlayerDevice
  extends CHullGunlayerDevice
{
  String m_NormalSetId  = "";       /*  /**/   */
  String m_CrashedSetId = "";   

  void HullGunlayerDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged Marder HullGunlayer ");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
     Behavior.SetFireAbility(false,40);
    }
  }

  void HullGunlayerDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed Marder HullGunLayerDevice");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 0);
      Behavior.SetFireAbility(false, 0);
      Behavior.SetMoveAbility(false, 0);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackLeft").Index, 0.0, 0);

      if (1 == randnum(2))
      StateControl.SetDelayItemHP(_HostObject.GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("Turret_A").Index, 0.0, 0);

 //     StateControl.SetHitPoints(0.0);
    }
  }
}

class CSAUSdKfz131_MarderIIHullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
/*  String m_CrashedSetId = "";//"Body_CrashedSet"; //     */

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Dameged Marder HullEngineDevice ");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Vector  MaxSpeed  = new Vector( 1.0, 0, 0);   // m/s
      Behavior.SetMoveAbility(false, 30);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed Marder HullEngineDevice");

    clearEventsForObject(getIdentificator(_HostObject));

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      // Change Item hit points after delay in N seconds. SetDelayItemHP(ItemIndex, HitPoints, Time)
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 3 + randnum(5));
      StateControl.SetHitPoints(0.0);
    }

   Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CSAUSdKfz131_MarderIITrackLeftDevice
  extends CTrackLeftDevice
{
//  String m_NormalSetId  = "TrackLeft_NormalSet";    //
 //  String m_CrashedSetId = "TrackLeft_CrashedSet";    //          TrackLeft_CrashedSet

  void TrackLeftDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - Marder TrackLeft");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 300);
    }
    sendEvent(0.0, getIdentificator(_HostObject), "DamageItem", ["TrackLeft"]);
  }

  void TrackLeftDeviceDestroyed(Component _HostObject)
  { logWarning("Device Destroyed - Marder TrackLeft");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.ActivateMovement(false);  //
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false,0);
    }
  }
}

class CSAUSdKfz131_MarderIITrackRightDevice
  extends CTrackRightDevice
{
//   String m_NormalSetId  = "TrackRight_NormalSet";    
 //   String m_CrashedSetId = "TrackRight_CrashedSet";                 

  void TrackRightDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - Marder TrackRight ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 300);
    }
    sendEvent(0.0, getIdentificator(_HostObject), "DamageItem", ["TrackRight"]);
  }

  void TrackRightDeviceDestroyed(Component _HostObject)
  { logWarning("Device Destroyed - Marder TrackRight ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.ActivateMovement(false);   //
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false,0);
    }
  }
}

class CSAUSdKfz131_MarderIITurretDevice
  extends CTurretDevice
{
//    String m_NormalSetId  = "Turret_A_NormalSet";          /* */
//  String m_CrashedSetId = "Turret_A_CrashedSet";

  void TurretDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - Marder Turret ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 15);
      Behavior.SetAimAbility(false, 20);
      Vector  MaxSpeed  = new Vector( 1.5, 0, 0);   // m/s
    }
  }

  void TurretDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
//      Behavior.SetMoveAbility(false, 0); 

    }
      Component IdleSound = _HostObject.GetObject("IdleSound");   //
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }   

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    }
  }
}

class CSAUSdKfz131_MarderIIRecoilController
{
  String FToBAnim   = "body_recoil_fb";
  String BToFAnim   = "body_recoil_bf";
  String RToLAnim   = "body_recoil_rl";
  String LToRAnim   = "body_recoil_lr";
  float  RecoilTime = 1.0;
}

class CSAUSdKfz131_MarderIISubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.7;
  float  Friction1        = 1.0;;
  float  Elasticity       = 0.0;
}

class CSAUSdKfz131_MarderIIManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 36000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.1;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.4;    // cm
  float  SuspensionPower  = 20000;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

// ================================================
// Unit class
// ================================================
class CSAUSdKfz131_MarderIIUnit
  extends CGerTankUnit, CWeaponConfig, CPushVehicleObject
{

  final static float  DefaultHitPoints = 300; // CHitPoints::SAUSU_85UnitHitPoints;
  
  boolean m_flag = false;

  final static boolean DefaultSetFlagMode       = false;

  static Array PostExplosionID = [
                                    ["", "HullGunLayerExplosionEffect"]
                                 ];

  static category UnitType = CLASSIFICATOR_T34_UNIT;

  static Array Hatches = [
                           // [ "Loader",   "luk_Rear_Door",     2.0 ],                                                         //  CHANGED 11-13-08
                          //  [ "Driver",  "luk_Driver_open", 2.0 ]
                         ];

  static Array HatchesStates = [
                               //   [ "Normal", [],  // ["Driver", 2.0 ], [ "Loader", 0.0 ]  ]
                                //  [ "Attack", []  //  [ "Driver", 0.0 ], [ "Loader", 0.0 ]  ]
                               ];


  final static String BodyJoint   = "Body";
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower       = MENACE_NORMAL;  // Heavy weapon
  final static Array AutomaticClassificators  = ["GROUND", "TANK", "SAU", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

/*  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                                      ];              */

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["HullDriver", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;
  // =======================================
  // Contruction and initialization
  // =======================================

  void CSAUSdKfz131_MarderIIUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SdKfz131_MarderIIModel>(),[0]  );

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CSAUSdKfz131_MarderIILeftTrack>(),
        new #TrackAnimator<CSAUSdKfz131_MarderIIRightTrack>()
      );

    SetupWeapon( "Weapon_A", new #Weapon<CSAUSdKfz131_MarderIIGun>(),
      ["Fire_A1"], new #TargetingAnimator<CSAUSdKfz131_MarderIIGunTargetingAnimatorA>());


    SetMovementEffects(
          new #Emitter<CTankPzIVGMovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke", "PetrolSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CTankPzIVGAccelSound>(),
      [
        ["Smoke", "PetrolAccelSmokeEffect"]
      ]
    );

    // Setup turret out animator
 //   SetTurretOutEffectsArray( TurretOutAnimations );

    SetupBehavior( new #VehicleBehavior<CSAUSdKfz131_MarderIIBehavior>());

  }

  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component   _Mission,
      Component   _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],    
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );  

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPzIVAusfGUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPzIVAusfGUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPzIVAusfGUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );    
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPzIVAusfGUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPzIVAusfGUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );  
   CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPzIVAusfGUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "Turret_A"
      );   
 /*  CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"    

      );
*/
    LinkDeviceToUnitItem("HullDriver",   new CSAUSdKfz131_MarderIIHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSAUSdKfz131_MarderIIHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSAUSdKfz131_MarderIIHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSAUSdKfz131_MarderIITrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSAUSdKfz131_MarderIITrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSAUSdKfz131_MarderIITurretDevice()); /*  */

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CSAUSdKfz131_MarderIIRecoilController>());
    CreateCollisionControl("CBaseCollisionControl");

    Component VehicleController = new #AITankVehicle<CSAUSdKfz131_MarderIIManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSAUSdKfz131_MarderIISubstance", 60000.0, 0.0);

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );
       EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  void SetFlagMode(
      boolean _Enable
    )
  {
    if (_Enable)
    {
     setVisibleState(GetMeshComponent().GetJoint("Flag"), true);
     }
    else
      setVisibleState(GetMeshComponent().GetJoint("Flag"), false);
   }

  // ======================================
  // Armour descriptor
  // ======================================
/*  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                       // [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUStuG40UnitArmourHullTOP    ],
                        //[CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUStuG40UnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                      ]);
  }                          */

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }

  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================
  
//   boolean m_Objectdestroyed = false;

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  }
}

// ================================================
// Unit class
// ================================================
class CSAUSdKfz131_MarderII_WUnit
  extends CGerTankUnit, CWeaponConfig, CPushVehicleObject
{

  final static float  DefaultHitPoints = 300; // CHitPoints::SAUSU_85UnitHitPoints;
  
  boolean m_flag = false;

  final static boolean DefaultSetFlagMode       = false;

  static Array PostExplosionID = [
                                    ["", "HullGunLayerExplosionEffect"]
                                 ];

  static category UnitType = CLASSIFICATOR_T34_UNIT;

  static Array Hatches = [
                           // [ "Loader",   "luk_Rear_Door",     2.0 ],                                                         //  CHANGED 11-13-08
                          //  [ "Driver",  "luk_Driver_open", 2.0 ]
                         ];

  static Array HatchesStates = [
                               //   [ "Normal", [],  // ["Driver", 2.0 ], [ "Loader", 0.0 ]  ]
                               //   [ "Attack", []  //  [ "Driver", 0.0 ], [ "Loader", 0.0 ]  ]
                               ];


  final static String BodyJoint   = "Body";
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower       = MENACE_NORMAL;  // Heavy weapon
  final static Array AutomaticClassificators  = ["GROUND", "TANK", "SAU", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

/*  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                                      ];              */

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["HullDriver", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;
  // =======================================
  // Contruction and initialization
  // =======================================

  void CSAUSdKfz131_MarderII_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SdKfz131_MarderII_WModel>(),[0]  );

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CSAUSdKfz131_MarderIILeftTrack>(),
        new #TrackAnimator<CSAUSdKfz131_MarderIIRightTrack>()
      );

    SetupWeapon( "Weapon_A", new #Weapon<CSAUSdKfz131_MarderIIGun>(),
      ["Fire_A1"], new #TargetingAnimator<CSAUSdKfz131_MarderIIGunTargetingAnimatorA>());


    SetMovementEffects(
          new #Emitter<CTankPzIVGMovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke", "PetrolSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CTankPzIVGAccelSound>(),
      [
        ["Smoke", "PetrolAccelSmokeEffect"]
      ]
    );

    // Setup turret out animator
 //   SetTurretOutEffectsArray( TurretOutAnimations );

    SetupBehavior( new #VehicleBehavior<CSAUSdKfz131_MarderIIBehavior>());

  }

  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component   _Mission,
      Component   _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],    
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );  

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPzIVAusfGUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPzIVAusfGUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPzIVAusfGUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );    
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPzIVAusfGUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPzIVAusfGUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );  
   CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPzIVAusfGUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "Turret_A"
      );   
 /*  CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"    

      );
*/
    LinkDeviceToUnitItem("HullDriver",   new CSAUSdKfz131_MarderIIHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSAUSdKfz131_MarderIIHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSAUSdKfz131_MarderIIHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSAUSdKfz131_MarderIITrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSAUSdKfz131_MarderIITrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSAUSdKfz131_MarderIITurretDevice()); /*  */

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CSAUSdKfz131_MarderIIRecoilController>());
    CreateCollisionControl("CBaseCollisionControl");

    Component VehicleController = new #AITankVehicle<CSAUSdKfz131_MarderIIManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSAUSdKfz131_MarderIISubstance", 60000.0, 0.0);

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );
       EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  void SetFlagMode(
      boolean _Enable
    )
  {
    if (_Enable)
    {
     setVisibleState(GetMeshComponent().GetJoint("Flag"), true);
     }
    else
      setVisibleState(GetMeshComponent().GetJoint("Flag"), false);
   }

  // ======================================
  // Armour descriptor
  // ======================================
/*  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                       // [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUStuG40UnitArmourHullTOP    ],
                        //[CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUStuG40UnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                      ]);
  }                          */

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }

  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================
  
//   boolean m_Objectdestroyed = false;

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  }
}

