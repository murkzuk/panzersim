//-------------------------------------------------------------------
// 
/*  olddata
   Array  Animation = [
       ["gun_a", ["Weapon_Base", 0, 5], ["LowRods", 0, 5], ["RecoilCYL", 0, 5], ["Rod_B", 0, 5]],
      ["gun_a_recoil", ["Weapon_A", 0, 30]],
      ["turret_a", ["Turret_A", 0, 20]]
  ];
newdata  u_stat_Flak88_2Model
   Array  Animation = [
       ["gun_a", ["WeaponBase", 0, 30], ["LowRods", 0, 30], ["RecoilCYL", 0, 30], ["Rod_B", 0, 30], ["HndWhl_2", 0, 30], ["TargetScope", 0, 30]],
      ["gun_a_recoil", ["Weapon_A", 0, 30]],
      ["turret_a", ["Turret_A", 0, 30], ["HndWhl_1", 0, 30]]
  ];

*/

//
//-------------------------------------------------------------------

class CGunFlak88FireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

class CGunFlak88Explosion
  extends CUnitExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 3.0;
  String SoundId  = "GunPak40ExplosionSound";
}

class CGunFlak88GunCalibreBulletExplosion
  extends CCalibreGun7576BulletExplosion
{
  float  Damage   = CPiercing::GunFlak88CalibreDamage;
  float  FireDamage   = CPiercing::GunFlak88CalibreFireDamage;
  float     Radius     = CPiercing::GunFlak88CalibreRadius;
  //Component Debris     = new CGunFlak88GunCalibreBulletDebrisCloud();
}

class CGunFlak88GunCalibreBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunFlak88CalibreDebrisQuantity;
  String DebrisPatternID = "GunFlak88GunCalibreBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.0, 0.0, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}

class CGunFlak88GunCalibreBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunFlak88CalibreDebrisMaxDistance;
  String    ExplosionId   = "GunFlak88GunCalibreBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunFlak88GunCalibreBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunFlak88CalibreDebrisDamage;
}
/* */
class CGunFlak88GunSubcalibreBulletExplosion
  extends CSubcalibreGun88BulletExplosion
{
  float  Damage   = CPiercing::GunFlak88SubcalibreDamage;
  float  FireDamage   = CPiercing::GunFlak88SubcalibreFireDamage;
}

class CGunFlak88GunHEBulletExplosion
  extends CHEGun88BulletExplosion
{
  float  Damage   = CPiercing::GunFlak88HEDamage;
  float  FireDamage   = CPiercing::GunFlak88HEFireDamage;

  float     Radius = CPiercing::GunFlak88HERadius;
 Component Debris = new CGunFlak88GunHEBulletDebrisCloud();
}

class CGunFlak88GunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunFlak88HEDebrisQuantity;
  String DebrisPatternID = "GunFlak88GunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CGunFlak88GunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunFlak88HEDebrisMaxDistance;
  String    ExplosionId   = "GunFlak88GunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunFlak88GunHEBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunFlak88HEDebrisDamage;
}
class CGunFlak88GunCalibreBulletControl
  extends CCalibreBulletControl
{
  String    ExplosionId  = "TankPzVIAusfEGunCalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::GunFlak88CalibreBulletSpeed;
  float     MaxDistance           = CPiercing::GunFlak88CalibreMaxDistance;
  float     PenetrationPower      = CPiercing::GunFlak88CalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunFlak88CalibrePenetrationByDistance;
  float     PenetrationModifierMin   = CPiercing::GunFlak88CalibrePenetrationModifier[0];
  float     PenetrationModifierMax   = CPiercing::GunFlak88CalibrePenetrationModifier[1];
}
    
class CGunFlak88GunSubCalibreBulletControl
  extends CSubcalibreBulletControl
{
  String    ExplosionId  = "TankPzVIAusfEGunSubcalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::GunFlak88SubcalibreBulletSpeed;
  float     MaxDistance     = CPiercing::GunFlak88SubcalibreMaxDistance;
  float     PenetrationPower = CPiercing::GunFlak88SubcalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunFlak88SubcalibrePenetrationByDistance;
   float     PenetrationModifierMin   = CPiercing::GunFlak88SubcalibrePenetrationModifier[0];
  float     PenetrationModifierMax   = CPiercing::GunFlak88SubcalibrePenetrationModifier[1];
}

class CGunFlak88GunHEBulletControl
  extends CHEBulletControl
{
  String    ExplosionId  = "TankPzVIAusfEGunHEBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::GunFlak88HEBulletSpeed;
  float     MaxDistance  = CPiercing::GunFlak88HEMaxDistance;
  float     PenetrationPower = CPiercing::GunFlak88HEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunFlak88HEPenetrationByDistance;
} 

class CGunFlak88CalibreAmmo
{
  final static String BulletPatternId = "GunFlak88GunCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HUMAN", "VEHICLE"]];
  final static float  LoadingTime     = 0.0f;
}
/*  */
class CGunFlak88SubCalibreAmmo
{
  final static String BulletPatternId = "GunFlak88GunSubCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HUMAN", "VEHICLE", "BLD_WAR", "BLD_CIV", "AIR"]];
  final static float  LoadingTime     = 0.0f;
}

class CGunFlak88HEAmmo
{
  final static String BulletPatternId = "GunFlak88GunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HEAVYTANK", "TANK"]];
  final static float  LoadingTime     = 0.0f;
}   

class CGunFlak88TargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 180.0;
  float  RightEndAngle  = -180.0;
  float  TopEndAngle    = -3.0;
  float  BottomEndAngle = 70.0;
}

class CGunFlak88Gun
  extends CHeavyGun
{ 
  String CloudEffectId   = "HeavyGunFireMuzzleEffect";
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 0.5;
  final static String BulletPatternId = "";
  Vector GravityVector   = CPiercing::BulletGravityVector;

  final static boolean HighTrajectory  = false;

  final static String FireSoundId     = "Flak88FireSound";

   /*  */
  final static Array Ammo = [
                              new CGunFlak88CalibreAmmo(),
                              new CGunFlak88SubCalibreAmmo(),
                              new CGunFlak88HEAmmo()
                            ];
  //$TMP TEST DATA
  final static Array AmmoTargetUse    = [
                                          [1, [["AIR"],      []], [[500.0, 95.0, 3000.0, 100.0  ], [[2000.0, 95.0], [2500.0, 100.0]]]],
                                          //HEAVYTANK
                                          [0, [["HEAVYTANK"],[]], [[500.0, 25.0, 2000.0, 100.0], [[1000.0, 40.0], [1500.0, 80.0]]]],
                                          [1, [["HEAVYTANK"],[]], [[500.0, 75.0, 2000.0, 90.0  ], [[1000.0, 60.0], [1500.0, 20.0]]]],
                                          //TANK
                                          [0, [["TANK"],     []], [[500.0, 35.0, 2000.0, 100.0], [[1000.0, 45.0], [1500.0, 90.0]]]],
                                          [1, [["TANK"],     []], [[500.0, 65.0, 2000.0, 90.0  ], [[1000.0, 55.0], [1500.0, 10.0]]]],
                                          //VEHICLE
                                          [2, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 100.0], [[1000.0, 90.0], [1500.0, 100.0]]]],
                                          //HUMAN
                                          [2, [["HUMAN"],    []], [[500.0, 100.0, 1500.0, 60.0],   [[1000.0, 40.0]]]]//,
                                          //BLD_WAR
                                          //[0, [["BLD_WAR"],  []], [[500.0, 90.0, 1000.0, 100.0], []]],
                                          //[2, [["BLD_WAR"],  []], [[500.0, 10.0, 1000.0, 0.0  ], []]],
                                          //BLD_CIV
                                          //[2, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 100.0], []]]
                                        ];
  //$TMP TEST DATA

  final static float    LockAngleHMin   = -180.0;
  final static float    LockAngleHMax   = 180.0;
  final static float    LockAngleVMin     = -3;
  final static float    LockAngleVMax     =  70.0;
  final static float    BlockedLockAngle  =  1.0;

  final static float DirectionSpeedH  = 18.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 12.0; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;


  // *** Gun parameters for behavior
  final static int     FirePeriod        = 5000; // ms
  final static int     FirePeriodRandAdd = 0; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms


  // gun specific fire mask with priorities       // //  //  //
  final static Array GunSpecificFireMask = [
                               [["AIR"],[]], // low priority mask: RestrictTo, Exclude
                               [["GROUND"],[]]
                                    ];


  Component FireAnimator = new #LineAnimator<CGunFlak88FireAnimation>();
}

// Behavior

class CGunFlak88UnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = false;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;

   /*// *** radar parameters  /* */
  Array EnemyRankDangerByDistance =  [
                                       [[ ["AIR"],      []],  [ [ 0.0, 200.0, 3600.0, 100.0 ], [ [1000.0, 195.0] ] ] ],
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0, 200.0, 2500.0, 100.0 ], [ [1000.0, 150.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0, 150.0, 2500.0, 100.0 ], [ [1000.0, 140.0] ] ] ], // [ Mask, PiercLinFunctionByDist]
                                       [[ ["BTR"],[] ],       [ [ 0.0, 130.0, 2500.0, 90.0 ],  [ [1000.0,  125.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  10.0, 2500.0, 85.0 ],  [ [1000.0, 100.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0,  35.0, 2500.0, 20.0 ],  [ [1000.0, 95.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask
                                  
 // float   AttackDistanceMin =  15.0;     
 // float   AttackDistanceMax = 3000.0;

   // *** radar parameters

  float  MaxRadarDistance = 5200; // m
  float  MinRadarDistance = 30;    // m
  float  MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 500; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms
 // static Array Mask        = [["", "CLASSIFICATOR_GROUND"], ["", ""]];

  // *** movement physical parameters

  // physical limitations
  Vector MaxSpeed = new Vector( 0.0, 0, 0);
  float  MinRotateRadius = 0; // unit can turn when staying
}

class CGunFlak88Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.2;
  float  Friction1        = 0.2;
  float  Elasticity       = 0.04;
}

class CGunFlak88DamagedDevice
  extends CBulkDevice
{

  void BulkDeviceDestroyed(Component _HostObject) // called when destroyed  TurretDevice
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
        Behavior.SetFireAbility(false, 0);
        Behavior.SetAimAbility(false, 0);
        Behavior.ActivateBehavior(false);
    }    
  }
}
class CGunFlak88TurretDevice
  extends CTurretDevice
{

  void TurretDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false,20);
      Behavior.SetAimAbility(false, 20);
      Behavior.SetFireAbility(false, 20);
       }
  }
}

class CGunFlak88Unit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::GunFlak88UnitHitPoints ;   // CHitPoints::GunFlak88UnitHitPoints
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  //static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "Gun", "GER"];
  final static int    UnitMenacePower        = MENACE_GODZILLA;   //MENACE_GODZILLA;   light weapon
  final static String DefaultSurfaceControl = "PutonGround";

  static Array        LandingJoints            = ["Corner_FL", "Corner_FR", "Corner_RR", "Corner_RL"];  //

  void CGunFlak88UnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
    }
  }
   event void SetModelLifeState(
      boolean   _State
    )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  }

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  // =======================================
  // Contruction and initialization         
  // =======================================

  void CGunFlak88Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_Flak88_2Model>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunFlak88Gun>(),["Fire_A1"],
      new #TargetingAnimator<CGunFlak88TargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunFlak88UnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunFlak88Substance", 1100.0*6, 0.0003);
  }
}
// WINTER_UNIT

class CGunFlak88_WUnit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::GunFlak88UnitHitPoints ;   // CHitPoints::GunFlak88UnitHitPoints
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  //static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "Gun", "GER"];
  final static int    UnitMenacePower        = MENACE_GODZILLA;   //MENACE_GODZILLA;   light weapon
  final static String DefaultSurfaceControl = "PutonGround";

  static Array        LandingJoints            = ["Corner_FL", "Corner_FR", "Corner_RR", "Corner_RL"];  //

  void CGunFlak88UnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
    }
  }
   event void SetModelLifeState(
      boolean   _State
    )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  }

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  // =======================================
  // Contruction and initialization         
  // =======================================

  void CGunFlak88_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_Flak88_2_WModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunFlak88Gun>(),["Fire_A1"],
      new #TargetingAnimator<CGunFlak88TargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunFlak88UnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunFlak88Substance", 1100.0*6, 0.0003);
  }
}
