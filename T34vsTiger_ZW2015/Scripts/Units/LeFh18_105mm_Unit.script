/*
//  u_stat_LeFh18_105mm

   Array  Animation = [
      ["gun_a", ["Weapon_Base", 0, 20],["Vert_HndWhls", 0, 20], ["BalanceCyl_Low", 0, 20], ["BalanceCyl", 0, 20]],
      ["gun_a_recoil", ["Weapon_A", 0, 30]],
      ["turret_a", ["Turret_A", 0, 20], ["Horz_HndWhls", 0, 20]]
  ];

 */


class CGunLeFh18_105mmFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

class CGunLeFh18_105mmExplosion
  extends CUnitExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 3.0;
  String SoundId  = "";
}

class CGunLeFh18_105mmMovementAnimator
{
  String LineSpeedAnim = "wheels_rotate";
//  String TurnSpeedAnim = "turret_a";  

  boolean RotateAnim = true;  //

  float MaxLineSpeed = 3.895;            // speed when wheel make full animation per one sec == length of circle
  float MaxTurnSpeed = Math_HALFPI / 3.0;    // max angle in rotation mode
}

class CGunLeFh18_105mmGunCalibreBulletExplosion
  extends CCalibreGun7576BulletExplosion
{
  float  Damage   = CPiercing::SAUSturmHaubitzCalibreDamage;
  float  FireDamage   = CPiercing::SAUSturmHaubitzCalibreFireDamage;
  float     Radius     = CPiercing::SAUSturmHaubitzCalibreRadius;
}

class CGunLeFh18_105mmGunCalibreBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::SAUSturmHaubitzCalibreDebrisQuantity;
  String DebrisPatternID = "SAUSturmHaubitzGunCalibreBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.0, 0.0, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}

class CGunLeFh18_105mmGunCalibreBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::SAUSturmHaubitzCalibreDebrisMaxDistance;
  String    ExplosionId   = "SAUSturmHaubitzGunCalibreBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunLeFh18_105mmGunCalibreBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::SAUSturmHaubitzCalibreDebrisDamage;
}
/* */
class CGunLeFh18_105mmGunSubcalibreBulletExplosion
  extends CSubcalibreGun88BulletExplosion
{
  float  Damage   = CPiercing::SAUSturmHaubitzSubcalibreDamage;
  float  FireDamage   = CPiercing::SAUSturmHaubitzSubcalibreFireDamage;
}

class CGunLeFh18_105mmGunHEBulletExplosion
  extends CHEGun88BulletExplosion
{
  float  Damage   = CPiercing::SAUSturmHaubitzHEDamage;
  float  FireDamage   = CPiercing::SAUSturmHaubitzHEFireDamage;

  float     Radius = CPiercing::SAUSturmHaubitzHERadius;
 Component Debris = new CCSAUSturmHaubitzGunHEBulletDebrisCloud();
}

class CGunLeFh18_105mmGunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::SAUSturmHaubitzHEDebrisQuantity;
  String DebrisPatternID = "SAUSturmHaubitzGunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CGunLeFh18_105mmGunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::SAUSturmHaubitzHEDebrisMaxDistance;
  String    ExplosionId   = "SAUSturmHaubitzGunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunLeFh18_105mmGunHEBulletDebrisExplosion
  extends CDebrisExplosion   //CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::SAUSturmHaubitzHEDebrisDamage;
}
class CGunLeFh18_105mmGunCalibreBulletControl
  extends CCalibreBulletControl
{
  String    ExplosionId  = "SAUSturmHaubitzGunCalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::SAUSturmHaubitzCalibreBulletSpeed;
  float     MaxDistance           = CPiercing::SAUSturmHaubitzCalibreMaxDistance;
  float     PenetrationPower      = CPiercing::SAUSturmHaubitzCalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::SAUSturmHaubitzCalibrePenetrationByDistance;
  float     PenetrationModifierMin   = CPiercing::SAUSturmHaubitzCalibrePenetrationModifier[0];
  float     PenetrationModifierMax   = CPiercing::SAUSturmHaubitzCalibrePenetrationModifier[1];
  float     DamageModifierMin        = CPiercing::SAUSturmHaubitzCalibreDamageModifier[0];
  float     DamageModifierMax        = CPiercing::SAUSturmHaubitzCalibreDamageModifier[1]; /**/
}
    
class CGunLeFh18_105mmGunSubCalibreBulletControl
  extends CSubcalibreBulletControl
{
  String    ExplosionId  = "SAUSturmHaubitzGunSubcalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::SAUSturmHaubitzSubcalibreBulletSpeed;
  float     MaxDistance     = CPiercing::SAUSturmHaubitzSubcalibreMaxDistance;
  float     PenetrationPower = CPiercing::SAUSturmHaubitzSubcalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::SAUSturmHaubitzSubcalibrePenetrationByDistance;
  float     PenetrationModifierMin   = CPiercing::SAUSturmHaubitzSubcalibrePenetrationModifier[0];
  float     PenetrationModifierMax   = CPiercing::SAUSturmHaubitzSubcalibrePenetrationModifier[1];
  float     DamageModifierMin        = CPiercing::SAUSturmHaubitzSubcalibreDamageModifier[0];
  float     DamageModifierMax        = CPiercing::SAUSturmHaubitzSubcalibreDamageModifier[1]; /**/
}

class CGunLeFh18_105mmGunHEBulletControl
  extends CHEBulletControl
{
  String    ExplosionId  = "SAUSturmHaubitzGunHEBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::SAUSturmHaubitzHEBulletSpeed;
  float     MaxDistance  = CPiercing::SAUSturmHaubitzHEMaxDistance;
  float     PenetrationPower = CPiercing::SAUSturmHaubitzHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::SAUSturmHaubitzHEPenetrationByDistance;
} 

class CGunLeFh18_105mmCalibreAmmo
{
  final static String BulletPatternId = "SAUSturmHaubitzGunCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}
/*  */
class CGunLeFh18_105mmSubCalibreAmmo
{
  final static String BulletPatternId = "SAUSturmHaubitzGunSubCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

class CGunLeFh18_105mmHEAmmo
{
  final static String BulletPatternId = "SAUSturmHaubitzGunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}
class CGunLeFh18_105mmGun
  extends CHeavyGun
{
  String CloudEffectId   = "HeavyGunFireMuzzleEffect";     // HeavyGunNoMuzzleGroundEffect  HeavyGunNoMuzzleCloudEffect
  float  InitBulletSpeed = 0.0;
  float  FireDeviation   = 0.25;
  String BulletPatternId = "";
  Vector GravityVector   =  CPiercing::ShellGravityVector;

  final static boolean HighTrajectory  = false;
  final static String BulletPatternId = "";
  String    FireSoundId     = "FeldHowitzer";                 //        ML20GunFireSound

  final static Array Ammo = [
                             //new CGunLeFh18_105mmCalibreAmmo(),
                             //new CGunLeFh18_105mmSubCalibreAmmo(),
                             new CGunLeFh18_105mmHEAmmo()
                            ];

  final static float    LockAngleHMin     = -30.0;
  final static float    LockAngleHMax     =  30.0;
  final static float    LockAngleVMin     = -5.0;
  final static float    LockAngleVMax     =  35.0;
  final static float    BlockedLockAngle  =  4.0;

  final static float DirectionSpeedH  = 1.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 1.0; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior

  int  FirePeriod        = 10000;  // ms
  int  FirePeriodRandAdd = 2000;   // ms

  boolean BurstFire      = false;
  int  BurstTime         = 2000; // ms
  int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms


  Component FireAnimator = new #LineAnimator<CGunLeFh18_105mmFireAnimation>();
}

// Behavior

class CGunLeFh18_105mmUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = true;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;

  float  MaxRadarDistance = 13200; // m
  float  MinRadarDistance = 100;    // m
  float  MaxRadarAngle    = 30.00;

  int    UpdateRadarPeriod        = 3000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms

 static Array Mask        = [["", "CLASSIFICATOR_GROUND"], ["", ""]]; //


      // radar visibility
  float  StaySpeed            = 0.5f;
  String MovingClassificator  = "MOVING_UNIT";
  String FireingClassificator = "TARGETING_UNIT";

  boolean SpecVisibilityCheck = true;

  Array ViewProbabilityByDistance = [[MinRadarDistance, 1.0f, MaxRadarDistance, 0.9],
                                            [
                                            ]
                                           ];

  final static Array ViewProbabilityByAngle = [[- Math_PI, 0.3f, Math_PI, 0.3],
                                         [
                                          [0.0f, 1.0f]
                                         ]
                                        ];

  final static Array ViewProbabilityByState = [
                                          [1, 1.5f] // UST_ATTACK
                                        ];

  final static Array ViewProbabilityByMask =  [
                                          [["MOVING_UNIT"],[], 2.0f],
                                          [["TARGETING_UNIT"],[], 2.0f],
                                          [["OPENLANDSCAPE_UNIT"],[], 2.0f],
                                          [["BUSHLANDSCAPE_UNIT"],[], 2.0f],
                                          [["FORESTLANDSCAPE_UNIT"],[], 0.9f],
                                          [["CLOSELANDSCAPE_UNIT"],[], 0.9f]
                                        ];

  float ViewProbabilityByPreviousStep = 2.0f;

  // *** movement physical parameters
  // physical limitations
  Vector MaxSpeed = new Vector( 1.0, 0, 0);

  float   MaxRotateSpeed                = 2.0f;
  Vector  MaxSpeed                      = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.2, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.8, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 0.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 0.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 0.5); //1);  // [rad/(s*s)]

  float  MinRotateRadius = 1.0; // unit can turn when staying
}

class CGunLeFh18_105mmTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  30.00;
  float  RightEndAngle  =  -30.00;
  float  TopEndAngle    =  -5.0;
  float  BottomEndAngle =  35.0;
}

class CGunLeFh18_105mmSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.4;
  float  Friction1        = 1.2;
  float  Elasticity       = 0.04;
  float  LinearDamping    = 0.0;
}
class CGunLeFh18_105mmManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 9000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.0;    // cm
  float  SuspensionPower  = 0.0;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

class CGunLeFh18_105mmUnit extends CUnit, CPushVehicleObject
{

 final static float DefaultHitPoints = CHitPoints::GunHvyPaK43UnitHitPoints;
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER" ];
  
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;

    void CGunLeFh18_105mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false,20);
      Behavior.SetAimAbility(false, 20);
      Behavior.SetMoveAbility(false,20);
    }
     if ((HitPoints <= 0.0)&&(!m_Objectdestroyed))
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       Behavior.SetMoveAbility(false,0);       
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("LeFh18_105mm DESTROYED");
   }                                              

     }
 event void SetModelLifeState(           //       /* */
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("LeFh18_105mm damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("LeFh18_105mm sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and LeFh18_105mm have now HP = "+new String(HitPoints)+" and LeFh18_105mm has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
      //  logWarning("LeFh18_105mm destroyed");  
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}   


  void CGunLeFh18_105mmUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_GunLeFh18_105mmModel>(), [0]);

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunLeFh18_105mmMovementAnimator>()
         );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunLeFh18_105mmGun>(),["Fire_A1"],
    new #TargetingAnimator<CGunLeFh18_105mmTargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunLeFh18_105mmUnitBehavior>());

  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.6);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunLeFh18_105mmSubstance", 1900.0*6, 0.0);
  }
}
// WINTER_Unit

class CGunLeFh18_105mm_WUnit extends CUnit, CPushVehicleObject
{

 final static float DefaultHitPoints = CHitPoints::GunHvyPaK43UnitHitPoints;
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER" ];
  
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;

    void CGunLeFh18_105mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false,20);
      Behavior.SetAimAbility(false, 20);
      Behavior.SetMoveAbility(false,20);
    }
     if ((HitPoints <= 0.0)&&(!m_Objectdestroyed))
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       Behavior.SetMoveAbility(false,0);       
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("LeFh18_105mm DESTROYED");
   }                                              

     }
 event void SetModelLifeState(           //       /* */
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("LeFh18_105mm damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("LeFh18_105mm sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and LeFh18_105mm have now HP = "+new String(HitPoints)+" and LeFh18_105mm has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
      //  logWarning("LeFh18_105mm destroyed");  
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}   


  void CGunLeFh18_105mm_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_GunLeFh18_105mm_WModel>(), [0]);

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunLeFh18_105mmMovementAnimator>()
         );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunLeFh18_105mmGun>(),["Fire_A1"],
    new #TargetingAnimator<CGunLeFh18_105mmTargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunLeFh18_105mmUnitBehavior>());

  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.6);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunLeFh18_105mmSubstance", 1900.0*6, 0.0);
  }
}
