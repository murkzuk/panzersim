//-------------------------------------------------------------------
//
/*   u_stat_sIG33_GUN

   Array  Animation = [
      ["gun_a", ["Weapon_Base", 0, 20],["Horz_HndWhls", 0, 20], ["Rods", 0, 20], ["VertCyl", 0, 20]],
      ["gun_a_recoil", ["Weapon_A", 0, 30]],
      ["turret_a", ["Turret_A", 0, 4 ], ["WheelLeftMain1_joint1", 0, 4],["WheelRightMain1_joint1", 0, 4]],
      ["wheels_rotate", ["WheelLeftMain1", 4, 7],["WheelRightMain1", 4, 7]]
  ];

   Component Radar = new #RadarObject();
    setPositionable(Radar, Camera);
    Radar.SetDetectAllObjectsMode();
    Radar.EnableVisibilityCheck(false);
    Radar.SetObjectsDetectionMask(              // enable all objects except not editable
        [ ],
        [ CLASSIFICATOR_NOTEDITABLE ]
      );    
*/
//
/*
   Array  Animation = [
      ["gun_a", ["Weapon_Base", 0, 20],["Vert_HndWhls", 0, 20], ["LowRods", 0, 20], ["RecoilCYL", 0, 20]],
      ["gun_a_recoil", ["Weapon_A", 0, 60]],
      ["turret_a", ["Turret_A", 0, 30], ["Horz_HndWhls", 0, 30]]
  ];


  Map    ConfigSets = new Map([
      [ "Normal_Set", [ "Body","Weapon_Base", "Turret_A", "Weapon_A", "AxelAssy" ] ],
      [ "Crashed_Set", [ "crashed" ] ]
      ]);
  
  */
//-------------------------------------------------------------------

class CGunML20_152mmFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

class CGunML20_152mmExplosion
  extends CUnitExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 3.0;
  String SoundId  = "GunPak40ExplosionSound";
}
class CGunML20_152mmMovementAnimator
{
  String LineSpeedAnim = "wheels_rotate";
//  String TurnSpeedAnim = "turret_a"; 

  boolean RotateAnim = true;  //

  float MaxLineSpeed = 3.9898;            // speed when wheel make full animation per one sec == length of circle
  float MaxTurnSpeed = Math_HALFPI / 3.0;    // max angle in rotation mode
}
class CGunML20_152mmTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  30.0;
  float  RightEndAngle  =  -30.0;
  float  TopEndAngle    =  -7.0;
  float  BottomEndAngle =  48.0;
}

class CGunML20_152mmGunHEBulletExplosion
  extends CHEGun88BulletExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = CPiercing::GunML20_152mmHEDamage;
  float  FireDamage   = CPiercing::GunML20_152mmHEFireDamage;
  float  Radius = CPiercing::GunML20_152mmHERadius;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud(); 
}

class CGunML20_152mmGunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunML20_152mmHEDebrisQuantity;
  String DebrisPatternID = "GunML20_152mmGunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CGunML20_152mmGunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunML20_152mmHEDebrisMaxDistance;
  String    ExplosionId   = "GunML20_152mmGunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunML20_152mmGunHEBulletDebrisExplosion
  extends CHEGun88BulletExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunML20_152mmHEDebrisDamage;
}
class CGunML20_152mmGunHEBulletControl
  extends CHEBulletControl
{
  String    ExplosionId  = "GunML20_152mmGunHEBulletExplosion";
  float     BulletSpeed  = CPiercing::GunML20_152mmHEBulletSpeed;
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     MaxDistance           = CPiercing::GunML20_152mmHEMaxDistance;
  float     PenetrationPower      = CPiercing::GunML20_152mmHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunML20_152mmHEPenetrationByDistance;
}

class CGunML20_152mmHEAmmo
{
  final static String BulletPatternId = "GunML20_152mmGunHEBullet";
  final static int    Ammunition      = 200;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}
class CGunML20_152mmGun
  extends CHeavyGun
{
  String CloudEffectId   = "HeavyGunFireMuzzleEffect";     // HeavyGunNoMuzzleGroundEffect  HeavyGunNoMuzzleCloudEffect
  float  InitBulletSpeed = 0.0f;
 // float  ShellSpeedDeviation = 0.0;
  float  FireDeviation   = 2.75;
  float  MinFireDeviation   = 0.75;
  String BulletPatternId = "GunML20_152mmGunHEBullet";
 // static Vector HvyShellGravityVector =  Vector(0.0, 0.0, -10.0);        //CPiercing::BulletGravityVector;
  Vector GravityVector   =  CPiercing::ShellGravityVector;                          //HvyShellGravityVector;

  final static boolean HighTrajectory  = false;
  //final static String BulletPatternId = "";
  String    FireSoundId     = "ML20GunFireSound";

  final static Array Ammo = [
                             new CGunML20_152mmHEAmmo()
                            ];

  final static float    LockAngleHMin     = -30.0;
  final static float    LockAngleHMax     =  30.0;
  final static float    LockAngleVMin     = -7.0;
  final static float    LockAngleVMax     =  48.0;
  final static float    BlockedLockAngle  =  0.0;

  final static float DirectionSpeedH  = 1.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 1.0; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  int  FirePeriod        = 13000;  // ms
  int  FirePeriodRandAdd = 3000;   // ms

  boolean BurstFire      = false;
  int  BurstTime         = 2000; // ms
  int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms

/*  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], // low priority mask: RestrictTo, Exclude
                                [["HUMAN"],[]]
                                 ];            */
  Component FireAnimator = new #LineAnimator<CGunML20_152mmFireAnimation>();
}

// Behavior

class CGunML20_152mmUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = true;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;


/*  Array EnemyRankDangerByDistance =  [
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0, 200.0, 2500.0, 100.0 ], [ [1000.0, 150.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0, 150.0, 2500.0, 100.0 ], [ [1000.0, 140.0] ] ] ], // [ Mask, PiercLinFunctionByDist]
                                       [[ ["BTR"],[] ],       [ [ 0.0, 130.0, 2500.0, 90.0 ], [ [1000.0, 125.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  10.0, 2500.0, 85.0 ],  [ [1000.0,  100.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0,  35.0, 2500.0, 20.0 ],  [ [1000.0,   95.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask              */

  // *** radar parameters

 // final float  TargetingRange   = 25600;
  float  MaxRadarDistance = 26000; // m
  float  MinRadarDistance = 2500;    // m
  float  MaxRadarAngle    = 30.0;

  int    UpdateRadarPeriod        = 12000; // ms
  int    UpdateRadarPeriodRandAdd = 3000; // ms

  static Array Mask        = [["", "CLASSIFICATOR_GROUND"], ["", ""]];
  
      // radar visibility
  float  StaySpeed            = 0.5f;
  String MovingClassificator  = "MOVING_UNIT";
  String FireingClassificator = "TARGETING_UNIT";

  boolean SpecVisibilityCheck = true;

  Array ViewProbabilityByDistance = [[MinRadarDistance, 1.0f, MaxRadarDistance, 0.9],
                                            [
                                            ]
                                           ];

  final static Array ViewProbabilityByAngle = [[- Math_PI, 0.3f, Math_PI, 0.3],
                                         [
                                          [0.0f, 1.0f]
                                         ]
                                        ];

  final static Array ViewProbabilityByState = [
                                          [1, 1.5f] // UST_ATTACK
                                        ];

  final static Array ViewProbabilityByMask =  [
                                          [["MOVING_UNIT"],[], 2.0f],
                                          [["TARGETING_UNIT"],[], 2.0f],
                                          [["OPENLANDSCAPE_UNIT"],[], 2.0f],
                                          [["BUSHLANDSCAPE_UNIT"],[], 2.0f],
                                          [["FORESTLANDSCAPE_UNIT"],[], 0.9f],
                                          [["CLOSELANDSCAPE_UNIT"],[], 0.9f]
                                        ];

  float ViewProbabilityByPreviousStep = 2.0f;

  // *** movement physical parameters
  // physical limitations
  Vector MaxSpeed = new Vector( 1.0, 0, 0);

  float   MaxRotateSpeed                = 2.0f;
  Vector  MaxSpeed                      = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.2, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.8, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 0.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 0.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 0.5); //1);  // [rad/(s*s)]

  float  MinRotateRadius = 1.0; // unit can turn when staying
}
class CGunML20_152mmSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.4;
  float  Friction1        = 1.2;
  float  Elasticity       = 0.04;
  float  LinearDamping    = 0.0;
}
class CGunML20_152mmManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 9000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.0;    // cm
  float  SuspensionPower  = 0.0;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}
class CGunML20_152mmUnit extends CUnit, CPushVehicleObject
{


  final static float DefaultHitPoints = CHitPoints::GunML20_152mmUnitHitPoints; //-1;
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "RU" ];

  final static int    UnitMenacePower      = MENACE_GODZILLA;  // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;


  
    void CGunML20_152mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 20);
    }
     if (!m_Objectdestroyed)
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("152mm Feldgun dead");
   }

     }
 event void SetModelLifeState(           
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )              
  {
    // create new trigger ///* */  
    logWarning("ML20_152mmUnit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("Pak40 sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Pak40 have now HP = "+new String(HitPoints)+" and Pak40 has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("Pak40Unit destroyed");
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}


  // =======================================
  // Contruction and initialization
  // =======================================

  void CGunML20_152mmUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_ML20_152mmModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunML20_152mmGun>(),["Fire_A1"],new #TargetingAnimator<CGunML20_152mmTargetingAnimatorA>());

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunML20_152mmMovementAnimator>()
         );
    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunML20_152mmUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunML20_152mmSubstance", 14900.0, 0.0);
  }
}

// WINTER_UNIT

class CGunML20_152mm_WUnit extends CUnit, CPushVehicleObject
{


  final static float DefaultHitPoints = CHitPoints::GunML20_152mmUnitHitPoints; //-1;
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                       ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "RU" ];

  final static int    UnitMenacePower      = MENACE_GODZILLA;  // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;


  
    void CGunML20_152mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 20);
    }
     if (!m_Objectdestroyed)
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("152mm Feldgun dead");
   }                                              

     }
 event void SetModelLifeState(           
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger ///* */  
    logWarning("ML20_152mmUnit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("Pak40 sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Pak40 have now HP = "+new String(HitPoints)+" and Pak40 has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("Pak40Unit destroyed");
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}


  // =======================================
  // Contruction and initialization
  // =======================================

  void CGunML20_152mm_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_ML20_152mm_WModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunML20_152mmGun>(),["Fire_A1"],new #TargetingAnimator<CGunML20_152mmTargetingAnimatorA>());
    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunML20_152mmMovementAnimator>()
         );
    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunML20_152mmUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);


    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunML20_152mmSubstance", 14900.0, 0.0);
  }
}
