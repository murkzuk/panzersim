//-------------------------------------------------------------------//

/*


  Array  Animation = [
      ["L_Wheel01_lift", ["joint_WheelLeftMain1_UP", 0, 2]],
      ["L_Wheel02_lift", ["joint_WheelLeftMain2_UP", 0, 2]],
      ["L_Wheel03_lift", ["joint_WheelLeftMain3_UP", 0, 2]],
      ["L_Wheel04_lift", ["joint_WheelLeftMain4_UP", 0, 2]],
      ["L_Wheel05_lift", ["joint_WheelLeftMain5_UP", 0, 2]],
      ["L_Wheel06_lift", ["joint_WheelLeftMain6_UP", 0, 2]],
      ["L_Wheel07_lift", ["joint_WheelLeftMain7_UP", 0, 2]],
      ["L_Wheel08_lift", ["joint_WheelLeftMain8_UP", 0, 2]],
      ["R_Wheel01_lift", ["joint_WheelRightMain1_UP", 0, 2]],
      ["R_Wheel02_lift", ["joint_WheelRightMain2_UP", 0, 2]],
      ["R_Wheel03_lift", ["joint_WheelRightMain3_UP", 0, 2]],
      ["R_Wheel04_lift", ["joint_WheelRightMain4_UP", 0, 2]],
      ["R_Wheel05_lift", ["joint_WheelRightMain5_UP", 0, 2]],
      ["R_Wheel06_lift", ["joint_WheelRightMain6_UP", 0, 2]],
      ["R_Wheel07_lift", ["joint_WheelRightMain7_UP", 0, 2]],
      ["R_Wheel08_lift", ["joint_WheelRightMain8_UP", 0, 2]],
      ["body_recoil_fb", ["Body",  0, 10]],
      ["body_recoil_bf", ["Body", 10, 20]],
      ["body_recoil_lr", ["Body", 20, 30]],
      ["body_recoil_rl", ["Body", 30, 40]],
      ["gun_a", ["Weapon_Base", 0, 20],["Vert_HndWhls", 0, 20], ["BalanceCyl_Low", 0, 20], ["BalanceCyl", 0, 20]],
      ["gun_a_recoil", ["Weapon_A", 0, 60]],
      ["turret_a", ["Turret_A", 0, 20], ["Horz_HndWhls", 0, 20],["Vrt_Link", 0, 20],["Vrt_Link1", 0, 20],["WHL_R", 0, 20],["WHL_L", 0, 20]],
      ["luk_body_left", ["Luk_A", 0, 1]],
      ["luk_body_right", ["Luk_B", 0, 1]],
      ["luk_main", ["Luk_G", 0, 1], ["Luk_H", 0, 1]],
      ["wheels_left", ["WheelLeftFront", 0, 60], ["WheelLeftMain1", 0, 60], ["WheelLeftMain11", 0, 60], ["WheelLeftMain12", 0, 60], ["WheelLeftMain13", 0, 60], ["WheelLeftMain14", 0, 60], ["WheelLeftMain2", 0, 60], ["WheelLeftMain3", 0, 60], ["WheelLeftMain4", 0, 60], ["WheelLeftMain5", 0, 60], ["WheelLeftMain6", 0, 60], ["WheelLeftMain7", 0, 60], ["WheelLeftMain8", 0, 60], ["WheelLeftRear", 0, 60]],
      ["wheels_right", ["WheelRightFront", 0, 60], ["WheelRightMain1", 0, 60], ["WheelRightMain11", 0, 60], ["WheelRightMain12", 0, 60], ["WheelRightMain13", 0, 60], ["WheelRightMain14", 0, 60], ["WheelRightMain2", 0, 60], ["WheelRightMain3", 0, 60], ["WheelRightMain4", 0, 60], ["WheelRightMain5", 0, 60], ["WheelRightMain6", 0, 60], ["WheelRightMain7", 0, 60], ["WheelRightMain8", 0, 60], ["WheelRightRear", 0, 60]]
    ];

  Map    ConfigSets = new Map([
      [ "Body_CrashedSet", [ "Body_Crashed", "TrackBody_Crashed" ] ],
      [ "Body_NormalSet", [ "Body", "HullEngine", "HullGunlayer", "Luk_A", "Luk_B","Weapon_C" ] ],
      [ "TrackLeft_CrashedSet", [ "TrackLeft_Crashed" ] ],
      [ "TrackLeft_NormalSet", [ "TrackLeft", "WheelLeftFront", "WheelLeftMain1", "WheelLeftMain11", "WheelLeftMain12", "WheelLeftMain13", "WheelLeftMain14", "WheelLeftMain2", "WheelLeftMain3", "WheelLeftMain4", "WheelLeftMain5", "WheelLeftMain6", "WheelLeftMain7", "WheelLeftMain8", "WheelLeftRear", "Wheel_L_down", "Wheel_L_up" ] ],
      [ "TrackRight_CrashedSet", [ "TrackRight_Crashed" ] ],
      [ "TrackRight_NormalSet", [ "TrackRight", "WheelRightFront", "WheelRightMain1", "WheelRightMain11", "WheelRightMain12", "WheelRightMain13", "WheelRightMain14", "WheelRightMain2", "WheelRightMain3", "WheelRightMain4", "WheelRightMain5", "WheelRightMain6", "WheelRightMain7", "WheelRightMain8", "WheelRightRear", "Wheel_R_down", "Wheel_R_up" ] ],
      [ "Turret_A_CrashedSet", [ "Turret_A_Crashed" ] ],
      [ "Turret_A_NormalSet", [ "Turret_A"] ]
    ]);
*/
//-------------------------------------------------------------------

// Unit Explosion
class CSPGun_HummelExplosion
  extends CHeavyTankExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
}

// Machine gun

// Main cannon section
// Main cannon animator
class CSPGun_HummelGunTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  15.0;
  float  RightEndAngle  = -15.0;
  float  TopEndAngle    =  -3.0;
  float  BottomEndAngle =  45.0;
}
// Main cannon bullet explosion

class CSPGun_HummelGunHEBulletExplosion
  extends CHEGun88BulletExplosion
{
  float  Damage   = CPiercing::GunFH18_150mmHEDamage;
  float  FireDamage   = CPiercing::GunFH18_150mmHEFireDamage;
  float  Radius = CPiercing::GunFH18_150mmHERadius;
 // Component Debris = new CGunFH18_150mmGunHEBulletDebrisCloud();      
}

class CSPGun_HummelGunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunFH18_150mmHEDebrisQuantity;
  String DebrisPatternID = "GunFH18_150mmGunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CSPGun_HummelGunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunFH18_150mmHEDebrisMaxDistance;
  String    ExplosionId   = "GunFH18_150mmGunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CSPGun_HummelGunHEBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunFH18_150mmHEDebrisDamage;
}
class CSPGun_HummelGunHEBulletControl
  extends CHEBulletControl
{
  String    ExplosionId  = "GunFH18_150mmGunHEBulletExplosion";
  float     BulletSpeed  = CPiercing::GunFH18_150mmHEBulletSpeed;
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     MaxDistance           = CPiercing::GunFH18_150mmHEMaxDistance;
  float     PenetrationPower      = CPiercing::GunFH18_150mmHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunFH18_150mmHEPenetrationByDistance;
}
class CSPGun_HummelHEAmmo
{
  final static String BulletPatternId = "GunFH18_150mmGunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

// Main cannon properties
class CSPGun_HummelGun
    extends CHeavyGun, CWeaponFireRecoil
{
  final static String FireEffectId    = "HeavyGunFireMuzzleEffect";
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 0.10;
  Vector GravityVector   = CPiercing::ShellGravityVector;
  final static boolean HighTrajectory  = false;

  final static String BulletPatternId = "";
  final static String FireSoundId     = "ML20GunFireSound";

  final static Array Ammo = [
                               new CSPGun_HummelHEAmmo()
                            ];

  final static float    LockAngleHMin     = -15.0;
  final static float    LockAngleHMax     =  15.0;
  final static float    LockAngleVMin     = -3.0;
  final static float    LockAngleVMax     =  45.0;
  final static float    BlockedLockAngle  =  4.0;

  final static float DirectionSpeedH  = 1.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 1.0; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior

  int  FirePeriod        = 11000;  // ms
  int  FirePeriodRandAdd = 2000;   // ms

  boolean BurstFire      = false;
  int  BurstTime         = 2000; // ms
  int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms

 final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], // low priority mask: RestrictTo, Exclude
                                [["" ],[]]  //
                                 ];     /*   */
  Component FireAnimator = new #LineAnimator<CSPGun_HummelFireAnimation>();
}
// Machinegun section
// Machinegun animator

// Movement animator

class CSPGun_HummelBaseTrack
{
  String  JointName           = "";
  String  TrackTexName        = "Textures/u_veh_PnZ3_track_.tex";  //
  String  WheelAnimName       = "";

  Array   TrackTexScrollScale = [0.0, -0.4];
  float   WheelRotateScale    = 0.04;
  float   RealTrackPathScale  = 2.0f;
  boolean IsLeftTrack;

  float   WheelRadius         = 0.233 + 0.070; // whell radius + track radius
  float   WhellLiftDown       = 0.049;         // max down wheel offset
  float   WhellLiftUp         = 0.144;         // max up wheel offset

  // Collision mask [restrict], [exclude]
  Array   CollisionMask = [[CLASSIFICATOR_WALK_SURFACE], []];
}

class CSPGun_HummelLeftTrack
  extends CSPGun_HummelBaseTrack
{
  String  JointName     = "TrackLeft";
  String  WheelAnimName = "wheels_left";
  boolean IsLeftTrack = true;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelLeftMain1", "L_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain2", "L_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain3", "L_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain4", "L_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain5", "L_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain6", "L_Wheel06_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain7", "L_Wheel07_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain8", "L_Wheel08_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

class CSPGun_HummelRightTrack
  extends CSPGun_HummelBaseTrack
{
  String  JointName     = "TrackRight";
  String  WheelAnimName = "wheels_right";
  boolean IsLeftTrack   = false;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelRightMain1", "R_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain2", "R_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain3", "R_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain4", "R_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain5", "R_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain6", "R_Wheel06_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain7", "R_Wheel07_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain8", "R_Wheel08_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

// Fire Animator
class CSPGun_HummelFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

// Behavior
class CSPGun_HummelBehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 3.5;
  float   CollisionAddRadius = 3.0;
}

class CSPGun_HummelBehavior extends CBaseTankBehavior
{
  final static Component SpecParams = new CSPGun_HummelBehaviorParams();

  int      AttackStyle        = AttackStyle_SAU;            //        AttackStyle_LightTank;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true;     //
  boolean CanFireInMove  = true;
//  float SafeFrontConeAngle = 20.0;     
  float  MinRotateRadius = 0; // unit can turn when staying

  float   CollisionRadius = 8.5;
  float   AttackDistanceMin = 20.0;     //
  float   AttackDistanceMax = 18300.0;    //

  // *** radar parameters

  float MaxRadarDistance = 18300.0; // m
  float MinRadarDistance = 1.0;    // m
  float MaxRadarAngle    = 90.0;

  int    UpdateRadarPeriod        = 5000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms

  // radar visibility
  float  StaySpeed            = 0.5f;  //

  // *** movement physical parameters

  // physical limitations
  float   MaxRotateSpeed                = 1.5f;
  Vector  MaxSpeed                      = new Vector( 5.8, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 5.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.2, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.5, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 1.0, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 1.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 1.0); //1);  // [rad/(s*s)]

  // Router parameters

}

// ================================================
// Device classes
// ================================================

class CSPGun_HummelHullDriverDevice
  extends CHullDriverDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet";

  void HullDriverDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 5);
    }
  }

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CSPGun_HummelHullGunlayerDevice
  extends CHullGunlayerDevice
{
  String m_NormalSetId  = "Body_NormalSet";
  String m_CrashedSetId = "Body_CrashedSet";


  void HullGunlayerDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false,20);
    }
  }

  void HullGunlayerDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
    }

  //  boolean TurretOut = (rand(0.0f, 1.0f) >= 0.4);

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackLeft").Index, 0.0, 0);

      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("Turret_A").Index, 0.0, 0);

//      StateControl.SetHitPoints(0.0);
    }

  }
}

class CSPGun_HummelHullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet";

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 10);
      Behavior.SetFireAbility(false, 15);

    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {

    clearEventsForObject(getIdentificator(_HostObject));

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      // Change Item hit points after delay in N seconds. SetDelayItemHP(ItemIndex, HitPoints, Time)
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 10);
      StateControl.SetHitPoints(0.0);
    }
  }
}

class CSPGun_HummelTrackLeftDevice
  extends CTrackLeftDevice
{
 // String m_NormalSetId  = "TrackLeft_NormalSet";
 // String m_CrashedSetId = "TrackLeft_CrashedSet";

  void TrackLeftDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 20);
    }
  }

  void TrackLeftDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 0);
      //Behavior.ActivateMovement(false);
    }
  }
}

class CSPGun_HummelTrackRightDevice
  extends CTrackRightDevice
{
  //String m_NormalSetId  = "TrackRight_NormalSet";
  //String m_CrashedSetId = "TrackRight_CrashedSet";

  void TrackRightDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 20);
    }
  }

  void TrackRightDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 0);
      //Behavior.ActivateMovement(false);
    }
  }
}

class CSPGun_HummelTurretDevice
  extends CTurretDevice
{
  //String m_NormalSetId  = "Turret_A_NormalSet";
//  String m_CrashedSetId = "Turret_A_CrashedSet";


  void TurretDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 45);
      Behavior.SetAimAbility(false, 30);
    }
  }

  void TurretDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
      Behavior.SetMoveAbility(false, 0);
    }

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    }
  }
}

class CSPGun_HummelRecoilController
{
  String FToBAnim   = "body_recoil_fb";
  String BToFAnim   = "body_recoil_bf";
  String RToLAnim   = "body_recoil_rl";
  String LToRAnim   = "body_recoil_lr";
  float  RecoilTime = 1.0;
};

class CSPGun_HummelTurretSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.7;
  float  Friction1        = 0.7;
  float  Elasticity       = 0.1;
}
class CSPGun_HummelSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.7;
  float  Friction1        = 1.0;
  float  Elasticity       = 0.0;
}

class CSPGun_HummelManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 40000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.3;    // cm
  float  SuspensionPower  = 30000;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

// ================================================
// Unit class
// ================================================

class CSPGun_HummelUnit
    extends CGerSPTankUnit, CWeaponConfig, CPushVehicleObject
{
  final static float  DefaultHitPoints = CHitPoints::TankPzIVAusfGUnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_UNIT;

  static Array PostExplosionID = [
                                    ["", "TankPzIVGExplosion"]
                                 ];
  static Array Hatches       = [
                                 [ "RearDoors", "luk_main",           1.0 ],    // ID , Animation name, animation time
                                 [ "Driver",     "luk_body_left", 1.0 ]    // ID , Animation name, animation time
                               ];
  static Array HatchesStates = [
                                 [ "Normal", [[ "RearDoors", 0.0 ], [ "Driver", 0.0 ]] ],
                                 [ "Attack", [[ "RearDoors", 0.0 ], [ "Driver", 0.0  ]] ]
                               ];

  final static String BodyJoint   = "Body";
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower        = MENACE_NORMAL;  // light weapon
  final static Array  AutomaticClassificators  = ["GROUND", "TANK", "SAU", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints            = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];
/*
  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPzIVAusfGUnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPzIVAusfGUnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPzIVAusfGUnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPzIVAusfGUnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPzIVAusfGUnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPzIVAusfGUnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPzIVAusfGUnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPzIVAusfGUnitArmourHullTOP    ],
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPzIVAusfGUnitArmourHullBOTTOM ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPzIVAusfGUnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPzIVAusfGUnitArmourHullLEFT   ]
                                      ];  */

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["HullDriver", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;

  void CSPGun_HummelUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_HummelModel>(), [0]);

    // Setup animations   
/*
    SetupAnimator(
        "MoveAnimLeft", new #MovementAnimator<CSPGun_HummelMovementLeftDrivingWheelAnimator>()   
      );
    SetupAnimator(
        "MoveAnimRight", new #MovementAnimator<CSPGun_HummelMovementRightDrivingWheelAnimator>()
      );
*/
    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CSPGun_HummelLeftTrack>(),
        new #TrackAnimator<CSPGun_HummelRightTrack>()
      );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CSPGun_HummelGun>(),
      ["Fire_A1"], new #TargetingAnimator<CSPGun_HummelGunTargetingAnimatorA>());



    // Creates and register unit state component
    // MoveSound, TraceEffectId
    SetMovementEffects(
        new #Emitter<CTankPzIVGMovementSound>(),
        [
          ["Vapor_L", "GroundUnitTraceEffect"],
          ["Vapor_R", "GroundUnitTraceEffect"],
          ["Smoke",   "PetrolSmokeEffect"]
        ]
      );

    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
      );

    SetAccelEffects(
        new #Emitter<CTankPzIVGAccelSound>(),
        [
          ["Smoke", "PetrolAccelSmokeEffect", new Vector ( 0.0, 0.0, 0.0)]
        ]
      );

      // Setup turret out animator
    // SetTurretOutEffectsArray( TurretOutAnimations );
     SetupBehavior( new #VehicleBehavior<CSPGun_HummelBehavior>());

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );

  }


  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPzIVAusfGUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPzIVAusfGUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPzIVAusfGUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPzIVAusfGUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPzIVAusfGUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );
    CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPzIVAusfGUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericLargeFirePostSmokeRefuseEffect"],
        //["Turret_A_Crashed", "Turret_A_Crashed"],
        "Turret_A"
      );

    logWarning("Weapon fire deviation for " + getIdentificator(this) + "=" + new String(GetObject("Weapon_A").FireDeviation));

    LinkDeviceToUnitItem("HullDriver",   new CSPGun_HummelHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSPGun_HummelHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSPGun_HummelHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSPGun_HummelTrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSPGun_HummelTrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSPGun_HummelTurretDevice());

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.6, 0.0, 0.0));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.6, 0.0, 0.0));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.6, 0.0, 0.0));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.6, 0.0, 0.0));

    SetupRecoilController(new #RecoilController<CSPGun_HummelRecoilController>());

    Component VehicleController = new #AITankVehicle<CSPGun_HummelManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSPGun_HummelSubstance", 40000.0, 0.0);

  }

  // ======================================
  // Armour descriptor
  // ======================================     
/*  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPzIVAusfGUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPzIVAusfGUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPzIVAusfGUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPzIVAusfGUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPzIVAusfGUnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPzIVAusfGUnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPzIVAusfGUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPzIVAusfGUnitArmourHullTOP    ],
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPzIVAusfGUnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPzIVAusfGUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPzIVAusfGUnitArmourHullLEFT   ]
                      ]); 
  }    */

   event void SetModelViewState(
       boolean _State
     )
   {
     // TMP
   }
}


