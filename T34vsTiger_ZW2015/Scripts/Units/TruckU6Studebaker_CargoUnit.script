//-------------------------------------------------------------------
//
/*

  Array  Animation = [
      //["DriverAnim", ["Driver", 0, 1]],
     // ["bort_open", ["Bort", 0, 2]],
      ["DoorLeft", ["Door_Left", 0, 1]],
      ["DoorRight", ["Door_Right", 0, 1]],
      ["wheels_rotate", ["WheelLeftFront", 0, 3], ["WheelRightFront", 0, 3], ["WheelLeftMain1", 0, 3], ["WheelLeftMain2", 0, 3], ["WheelRightMain1", 0, 3], ["WheelRightMain2", 0, 3]],
      ["wheels_turn", ["Shkvoren_L", 0, 2], ["Shkvoren_R", 0, 2], ["SterWHL", 0, 2]]
    ];

  Map    ConfigSets = new Map([
      [ "Body_CrashedSet", [ "Body_Crashed" ] ],
      [ "Body_NormalSet", [ "Body", "Body_attach", "DoorLeftGlass", "DoorRightGlass" ] ],
      [ "Damaged_CrashedSet", [ "Damaged_Crashed" ] ],
      [ "Damaged_NormalSet", [ "Bort", "Damaged" ] ],
      [ "Driver_CrashedSet", [ "Dead_Driver" ] ],
      [ "Driver_NormalSet", [ "Driver" ] ]

    ]);

*/
//
//-------------------------------------------------------------------

// Unit Explosion
class CTruckU6_CargoExplosion
  extends CHeavyTankExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
  float  AlarmRadius = 2.0f;
}
// Movement animator
class CTruckU6_CargoMovementAnimator
{
  String LineSpeedAnim = "wheels_rotate";
  String TurnSpeedAnim = "wheels_turn";

  boolean RotateAnim = true;

  float MaxLineSpeed = 3.003;            // speed when wheel make full animation per one sec == length of circle
  float MaxTurnSpeed = Math_HALFPI / 3.0;    // max angle in rotation mode
}

class CTruckU6_CargoLeftDoorAnimator
{
  String AnimationName = "DoorLeft";
  float  AnimationTime = 1.0;
}
class CTruckU6_CargoRightDoorAnimator
{
  String AnimationName = "DoorRight";
  float  AnimationTime = 1.0;
}
class CTruckU6_CargoBortDoorAnimator
{
  String AnimationName = "DoorRight";   // Bort
  float  AnimationTime = 1.0;
}

// Behavior
class CTruckU6_CargoBehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 4.5;
}

class CTruckU6_CargoBehavior extends CBaseTruckBehavior
{
  final static Component SpecParams = new CTruckU6_CargoBehaviorParams();

  boolean  CanMove   = true;
  boolean  HasRouter = true;
  boolean  HasRadar  = false;

  float MaxRadarDistance = 600.0; // m
  float MinRadarDistance = 0.5;   // m
  float MaxRadarAngle    = 180.0;

  // physical limitations
  float   MaxRotateSpeed                = 4.0f;
  Vector  MaxSpeed                      = new Vector( 7.4, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 7.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.2, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.8, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 0.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 0.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 0.5); //1);  // [rad/(s*s)]

  float  MinRotateRadius = 12; // unit can turn when staying
}

// ================================================
// Device classes
// ================================================

class CTruckU6_CargoHullDriverDevice
  extends CHullDriverDevice
{
  String m_NormalSetId  = "Driver_NormalSet";
//  String m_CrashedSetId = "Driver_CrashedSet";

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
//        Behavior.SetMoveAbility(false,600);
        Behavior.ActivateMovement(false);

    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(_HostObject));
       if(Object != null)
       {
       logWarning("U6_CargoHullDriverDevice has been destroyed! Object component not eq null, sending 0.0 HP to HullEngine!");
     //    Object.SetUnitItemHPPercent("HullEngine", 0.0);
       }
    }
  }
}
class CTruckU6_CargoHullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "Body_NormalSet";
//  String m_CrashedSetId = "Body_CrashedSet";

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 15);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {
    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component MoveSound = _HostObject.GetObject("MoveSound");
    if (IdleSound != null)
    {
      MoveSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(_HostObject));
       if(Object != null)
       {
         Component StateControl = _HostObject.GetObject("StateControl");
         if (StateControl != null)
         {
            StateControl.SetDelayItemHP(_HostObject.GetItem("Damaged").Index, 0.0, 5);
         }

         Object.OnLifeStateChanged(false);
         Object.SetUnitItemHPPercent("HullDriver", 0.0);
       }
    }
  }
}

class CTruckU6_CargoDamagedDevice
  extends CBulkDevice
{
 // String m_NormalSetId  = "Damaged_NormalSet";
//  String m_CrashedSetId = "Damaged_CrashedSet";
  void BulkDeviceDestroyed(Component _HostObject) // called when destroyed  TurretDevice
  {
   // logWarning("ZiS - BULK Destroyed");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
   {
      logWarning("Studebaker DamagedDevice - ActivateMovement false");
      Behavior.SetMoveAbility(false,0);
      Component StateControl = _HostObject.GetObject("StateControl");
      if (StateControl != null)

     {
   //     StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);
          StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 30);
     }
//        Behavior.ActivateMovement(false);
   }
  }
}

class CTruckU6_CargoSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 1.4;     // ось вдоль колес
  float  Friction1        = 1.9;     // поперек
  float  Elasticity       = 0.0;
  float  LinearDamping    = 0.0;
}
// ================================================
// Unit class
// ================================================
class CTruckU6_CargoUnit extends CUnit, CPushVehicleObject, CCReSupplyTsk
{
  final static float DefaultHitPoints = CHitPoints::TruckUS6_BM13UnitHitPoints;

  static Array PostExplosionID = [
                                    ["", "Pe8_Hvy_BomberAirBombExplosion2"]     //   TruckZis5Explosion
                                 ];
                                 
  static category UnitType = CLASSIFICATOR_T34_TRUCK;

  final static Array AutomaticClassificators  = ["GROUND", "VEHICLE", "RU"];

  final static String DefaultSurfaceControl = "PutonGround";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  void CTruckU6_CargoUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_TruckU6Studebaker_CargoModel>(), [0]);

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CTruckU6_CargoMovementAnimator>()
      );

    // Door animator
    SetDoorEffects(
        new #LineAnimator<CTruckU6_CargoLeftDoorAnimator>(),
        new #LineAnimator<CTruckU6_CargoRightDoorAnimator>()
      );

//    SetupWeapon("Weapon_B", new #Weapon<CT80MachineGun>(),
//      "Turret_A", ["Fire_B"],
//      new #TargetingAnimator<CT80TargetingAnimatorB>());

    // Creates and register unit state component
    // MoveSound, TraceEffectId
    SetMovementEffects(
        new #Emitter<CTruckZis5MovementSound>(),
        [
          ["Vapor_RL", "GroundUnitTraceEffect"],
          ["Vapor_RR", "GroundUnitTraceEffect"],
          ["Smoke",   "DiselSmokeEffect"]
        ]
      );

    SetIdleEffects(
        new #Emitter<CTruckOpelBlitzIdleSound>()

      );

    SetAccelEffects(
        new #Emitter<CT34AccelSound>(),
        [
          ["Smoke", "DiselAccelSmokeEffect"]
        ]
      );

//    SetupPhysicsController("PhysicsController", new #ObjectPhysicsController<CMetalSubstance>(), 100.0);
//    CreateDestructibleRoot("PhysicsController");

    SetupBehavior( new #VehicleBehavior<CTruckU6_CargoBehavior>());
  }

  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_COLLISION_SHAPES, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);


    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );



    CreateUnitItem(
        "HullDriver",
        CJointPoints::TruckUS6_BM13UnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", ""],
        "HullDriver"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TruckUS6_BM13UnitHULL_ENGINEPoints,
        ["GenericSmallFireEffect", "HE7576_85_88BulletArmourHitEffect"],
        "HullEngine"
      );
    //  Getting Item ID for modificator
    int DamagedID = CreateUnitItem(
        "Damaged",
        CJointPoints::TruckUS6_BM13UnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "Damaged"
      );
    LinkDeviceToUnitItem("HullDriver",   new CTruckU6_CargoHullDriverDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTruckU6_CargoHullEngineDevice());
    LinkDeviceToUnitItem("Damaged",      new CTruckU6_CargoDamagedDevice());

    // Setting modificator for Item ID (UnitModificator * ItemModificator)
    GetDamageHandler().SetItemDamageTypeModifier(
      DamagedID,
      CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792,
      0.0);
    GetDamageHandler().SetItemDamageTypeModifier(
      DamagedID,
      CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,
      0.0);

    SetupPhysicaleObject("CTruckU6_CargoSubstance", 3000.0, 0.0);
  }
  event void SetModelViewState(
      boolean _State
    )
  {
    // #TODO
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    //$LOG
    logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " OnSuccessTouchTrigger energy = " + new String(_Energy));
    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      StateControl.SetHitPoints(HitPoints);

      if (HitPoints <= 0.0)
        user.SetUnitItemHPPercent("HullEngine", 0.0);
    }

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    // play touch sound
    if(_Energy > MinEnergyToSound)
    (new #SoundsArray()).CreateSound("TankCollisionBtrLowSpeedSound", getPosition(this));

    Component Behavior = GetBehavior();
    if (null != Behavior)
    {
      Behavior.ActivateMovement(false);
      PhysicsController.EnableControl(true);
      //$HACK
      CurrentEventID = randnum(INT_MAX);
      if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
      {
        logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " enabling Behavior after 7 sec");
        sendEvent(7.0, getIdentificator(this), "OnBehaviorEnabled", [true, CurrentEventID]);
      }
    }

    Vector m_Point = new Vector(0.0, 0.0, 0.05);
    //PushTruck(_Energy*0.15, m_Point);
    PhysicsController.AppendExternalForce(m_Point, new Vector(0.1, 0.1, 0.2));
    logWarning("Push: " + new String(m_Point));
  }

  event void PushTruck(
      float _Energy,
      Vector _Point
    )
  {
   //   if(checkMask(this,[],[]))
   //   return;

    //SetSurfaceControl("None");
    /////////// KillHuman();

    Component PhysicsController = GetPhysicsController();
    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);

  // Vector Force = (new Vector(3.0f, 3.0f, 3.0f) - (getPosition(user).origin - _Point))/3.0f;
    Vector Force = (getPosition(user).origin - _Point);
    if (Force.x > 0)
      Force.x = 4.0 - Force.x/2;
    else
      Force.x = -4.0 + Force.x/2;

    if (Force.y > 0)
      Force.y = 4.0 - Force.y/2;
    else
      Force.y = -4.0 + Force.y/2;

    Force.z = 1.5f;
    Force.x = Force.x/3;
    Force.y =  Force.y/3;

    logWarning("MODForce X: " + new String(Force.x));
    logWarning("MODForce Y: " + new String(Force.y));


    PhysicsController.AppendExternalForce(Force, new Vector(0.1, 0.1, 0.2));
    logWarning("Push: " + new String(Force));

             Component Behavior = GetBehavior();
    if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
    {
       PhysicsController.Activate(false);   //
       PhysicsController.EnableControl(false);   //
      logWarning(" PUSHTRUCK CLASSIFICATOR_DEAD_OBJECT   " );

        Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
    {
      logWarning("PUSHTRUCK ENABLE SurfaceControl  " );

      SurfaceControl.EnableSurfaceControl(true);
      PhysicsController.Activate(false);        //
      PhysicsController.EnableControl(false); //
    }

    }
     logWarning("PUSHTRUCK END " );

  }
}

