/*
  Array  Animation = [
      ["gun_a_recoil", ["Weapon_A", 0, 4]],
      ["gun_a", ["Weapon_Base", 0, 4]],
      ["turret_a", ["Turret_A", 0, 4]],
      ["L_Wheel01_lift", ["LiftLeftMain_1", 0, 2]],
      ["L_Wheel02_lift", ["LiftLeftMain_2", 0, 2]],
      ["L_Wheel03_lift", ["LiftLeftMain_3", 0, 2]],
      ["L_Wheel04_lift", ["LiftLeftMain_4", 0, 2]],
      ["L_Wheel05_lift", ["LiftLeftMain_5", 0, 2]],
      ["R_Wheel01_lift", ["LiftRightMain_1", 0, 2]],
      ["R_Wheel02_lift", ["LiftRightMain_2", 0, 2]],
      ["R_Wheel03_lift", ["LiftRightMain_3", 0, 2]],
      ["R_Wheel04_lift", ["LiftRightMain_4", 0, 2]],
      ["R_Wheel05_lift", ["LiftRightMain_5", 0, 2]],
      ["body_recoil_fb", ["Body",  0, 10]],
      ["body_recoil_bf", ["Body", 10, 20]],
      ["body_recoil_lr", ["Body", 20, 30]],
      ["body_recoil_rl", ["Body", 30, 40]],
      ["luk_Commander_Door", ["Luk_A", 0, 1]],
      ["luk_main_commander", ["Commander", 0, 60]],
      ["wheels_left", ["WheelLeftMainFront", 0, 60], ["WheelLeftMain_1", 0, 60], ["WheelLeftMain_2", 0, 60], ["WheelLeftMain_3", 0, 60], ["WheelLeftMain_4", 0, 60], ["WheelLeftMain_5", 0, 60], ["WheelLeftMain_10", 0, 60],["WheelLeftMain_11", 0, 60], ["WheelLeftMain_12", 0, 60], ["WheelLeftMain_13", 0, 60], ["WheelLeftMain_14", 0, 60], ["WheelLeftRear", 0, 60]],
      ["wheels_right", ["WheelRightMainFront", 0, 60], ["WheelRightMain_1", 0, 60], ["WheelRightMain_2", 0, 60], ["WheelRightMain_3", 0, 60], ["WheelRightMain_4", 0, 60], ["WheelRightMain_5", 0, 60], ["WheelRightMain_10", 0, 60], ["WheelRightMain_11", 0, 60], ["WheelRightMain_12", 0, 60], ["WheelRightMain_13"], ["WheelRightMain_14", 0, 60], ["WheelRightRear", 0, 60]]
    ];

  Map  ConfigSets = new Map([
      [ "Body_NormalSet", [ "Body", "Body_2"] ],
      [ "Body_CrashedSet", [ "Body", "Body_2"] ],
      [ "TrackLeft_NormalSet", [ "TrackLeftMaterial"] ],
      [ "TrackRight_NormalSet", [ "TrackRightMaterial" ] ],
      [ "TrackLeft_CrashedSet", [ "TrackLeft_crashedSet"] ],
      [ "TrackRight_CrashedSet", [ "TrackRight_crashedSet" ] ],
      [ "Turret_A_CrashedSet", [ "Turret_A1" ] ],
      [ "Turret_A_NormalSet", [ "Turret_A1", "Commander" ] ]
    ]);

*/

//=======================================================================
// Unit Explosion
class CTankPanzer_IICExplosion
  extends CHeavyTankExplosion
{
  float  Damage   = 100.0;
  float  Radius   = 3.0;
}

class CTankPanzer_IICMachineGunBulletExplosion
  extends CMachineGun127BulletExplosion
{
  float  Damage   = CPiercing::TankPzVIAusfEMachineGunDamage;
}
class CTankPanzer_IICMachineGunBulletControl
  extends CMachineGunBulletControl
{
  String ExplosionId  = "TankPzVIAusfEMachineGunBulletExplosion";
  Vector GravityAccel = CPiercing::BulletGravityVector;
  float  BulletSpeed  = 750.0;
  Vector GravityAccel = CPiercing::BulletGravityVector;
  float  Mass         = 0.004;
}

class CTankPanzer_IICMachineGun
    extends CMachineGun//, CPlayerWeapon
{

//  final static int CoAxialMaster = 0;

  final static String FireEffectId     = "MachineGunDTFireEffect";
  final static String BulletPatternId  = "TankPanzer_IICMachineGunBullet";
    final static int    Ammunition      =  40000; // Was    111 ;
  final static float     FireDeviation   = 0.15;

  Component BurstFireSound  = new #Emitter<CMG34MachineGunFireSound>();
  final static Vector  GravityVector   = CPiercing::BulletGravityVector;
  final static boolean HighTrajectory  = false;

  final static boolean CanFireInMove  = true;
  final static int Slot = 1;


  // *** Gun parameters for behavior
  final static int  FirePeriod        = 10; // ms
  final static int  FirePeriodRandAdd = 0; // ms

  final static boolean BurstFire      = true;
  final static int  BurstTime         = 3000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 1000; // ms
  final static int  BurstDelayRandAdd = 0; // ms

  final static Array GunSpecificFireMask = [
                                [["HUMAN"],[]], // low priority mask: RestrictTo, Exclude
                                [["AIR"],[]], //
                                [[],[]]   //
                              ];
}

// Main cannon animator
class CTankPanzer_IICGunTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 180.0;
  float  RightEndAngle  = -180.0;
  float  TopEndAngle    = -12.0;
  float  BottomEndAngle =  30.0;
}
 /**/
// Main cannon bullet explosion
class CTankPanzer_IICGunSubCalibreBulletExplosion
  extends CCalibreGunLtFlakBulletExplosion //CSubcalibreGun7576BulletExplosion      
{                                                                                 
  float  Damage   = CPiercing::TankPanzer_IICSUBCALIBREDamage;
  float  FireDamage   = CPiercing::TankPanzer_IICSUBCALIBREFireDamage;
  float     Radius     = CPiercing::TankPanzer_IICSUBCALIBRERadius;

}

class CTankPanzer_IICGunSubCalibreBulletControl
  extends CLtFlakGunBulletControl  //CSubcalibreBulletControl
{
  String    ExplosionId  = "TankPanzer_IICGunSubCalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::AABulletGravityVector;
  float     BulletSpeed  = CPiercing::TankPanzer_IICSUBCALIBREBulletSpeed;
  float     MaxDistance           = CPiercing::TankPanzer_IICSUBCALIBREMaxDistance;
  float     PenetrationPower      = CPiercing::TankPanzer_IICSUBCALIBREPenetrationPower;
  Array     PenetrationByDistance = CPiercing::TankPanzer_IICSUBCALIBREPenetrationByDistance;

}

class CTankPanzer_IICSubCalibreAmmo
{
  final static String BulletPatternId = "TankPanzer_IICGunSubCalibreBullet";
  final static int    Ammunition      =  20000; // Was    111 ;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;

}

// Main cannon properties
class CTankPanzer_IICGun
  extends CLightGun //, CWeaponFireRecoil       CSKS45GunCLightFlakGun  CPlayerWeapon,
{
  String CloudEffectId   = "";
  final static float  InitBulletSpeed = 0.0f;
  final static float  FireDeviation   = 0.05;
  final static Vector GravityVector   = CPiercing::AABulletGravityVector;
  final static boolean HighTrajectory  = false;

  final static String BulletPatternId = "";
  final static String FireSoundId     = "Flak20mmFireSound";


  final static Array Ammo = [
                              new CTankPanzer_IICSubCalibreAmmo() //,
                             // new CTankPanzer_IICSubCalibreAmmo(),
                            //  new CTankPanzer_IICHEAmmo()
                            ];

  final static boolean CanFireInMove  = true;

  final static float  LockAngleHMin     = -180.0;
  final static float  LockAngleHMax     =  180.0;
  final static float  LockAngleVMin     = -12.0;
  final static float  LockAngleVMax     =  30.0;
  final static float  BlockedLockAngle  =  1.0;

  final static float DirectionSpeedH  = 64.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  =  18.0; // deg / sec  • vertical

  //Component DirectionSoundH  = new #Emitter<CTankMediumTurretDirectionSoundV>(); 
  //Component DirectionSoundV  = new #Emitter<CTankMediumTurretDirectionSoundV>();  

  final static int     Ammunition     = 20000;        // wrong value

  // *** Gun parameters for behavior

  final static int  FirePeriod        =  250; // ms
  final static int  FirePeriodRandAdd = 0; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 4000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 0; // ms
  final static int  BurstDelayRandAdd = 0; // ms
  final static int     Slot             = 0;
 // final static boolean Primary          = true; // GUN should be marked as Primary
                                                                                          //
  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]],
                                [["AIR"],[]],
                                [[],[]]
                              ];
  Component FireAnimator = new #LineAnimator<CTankPanzer_IICFireAnimation>();
}

// Movement animator

class CTankPanzer_IICBaseTrack
{
  String  JointName           = "";
  String  TrackTexName        = "Textures/u_veh_PnZ_II_track_.tex";  //
  String  WheelAnimName       = "";

  Array   TrackTexScrollScale = [0.0, -0.58 ];
  float   WheelRotateScale    = 0.04;
  float   RealTrackPathScale  = 2.0f;

  boolean IsLeftTrack;

  float   WheelRadius         = 0.277 + 0.062; // whell radius + track radius
  float   WhellLiftDown       = 0.100;         // max down wheel offset
  float   WhellLiftUp         = 0.100;         // max up wheel offset

 // float   TrackSoft           = 0.5;
  // Collision mask [restrict], [exclude]
  Array   CollisionMask = [[CLASSIFICATOR_WALK_SURFACE], []];
}

class CTankPanzer_IICLeftTrack
  extends CTankPanzer_IICBaseTrack
{
  String  JointName     = "TrackLeft";
  String  WheelAnimName = "wheels_left";

  boolean IsLeftTrack = true;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["LiftLeftMain_1", "L_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftLeftMain_2", "L_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftLeftMain_3", "L_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftLeftMain_4", "L_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftLeftMain_5", "L_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

class CTankPanzer_IICRightTrack
  extends CTankPanzer_IICBaseTrack
{
  String  JointName     = "TrackRight";
  String  WheelAnimName = "wheels_right";

  boolean IsLeftTrack   = false;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["LiftRightMain_1", "R_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftRightMain_2", "R_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftRightMain_3", "R_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftRightMain_4", "R_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["LiftRightMain_5", "R_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
 }
/*  
//Turret out animator
class CTankPanzer_IICTurretOutAnimator1
{
  String AnimationName = "turret_out1";  //
  float  AnimationTime = 1.5;
};
class CTankPanzer_IICTurretOutAnimator2
{
  String AnimationName = "turret_out2";       //
  float  AnimationTime = 1.5;
};
*/ 

// Fire Animator
class CTankPanzer_IICFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 0.1;
}

// Behavior

class CTankPanzer_IICBehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 3.0;
  float   CollisionAddRadius = 6.0;
}

class CTankPanzer_IICBehavior extends CBaseTankBehavior
{
  final static Component SpecParams = new CTankPanzer_IICBehaviorParams();   //     , CBaseTankBehavior
  int      AttackStyle        = AttackStyle_NonStop;           // AttackStyle_LightTank AttackStyle_NonStop AttackStyle_SAU ;//AttackStyle_LightTank  AttackStyle_NonStop      ;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true; //
  boolean CanFireInMove  = true;
  float    NonRotatableAngle = 9.0;  
//  float SafeFrontConeAngle = 20.0;      
  float  MinRotateRadius = 0; // unit can turn when staying   //

  float   CollisionRadius = 8.0;
  float   AttackDistanceMin = 10.0; //
  float   AttackDistanceMax = 1600.0; //
  /// *** radar parameters
  Array EnemyRankDangerByDistance =  [
                                      // [[ ["AIR"],[] ],       [ [ 0.0, 200.0, 4000.0, 100.0 ], [ [400.0, 150.0] ] ] ],
                                       [[ ["ANTITANK"],[] ],  [ [ 0.0, 180.0, 2500.0, 25.0 ], [ [400.0,  160.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0, 150.0, 1500.0, 25.0 ], [ [400.0, 150.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  80.0, 1500.0, 35.0 ], [ [400.0, 140.0] ] ] ],
                                       [[ ["BTR"],[] ],       [ [ 0.0,  85.0, 1500.0, 15.0 ], [ [400.0,  40.0] ] ] ],
                                       [[ ["BLD_WAR"],[] ],   [ [ 0.0,  80.0, 1500.0, 20.0 ], [ [400.0,  40.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0,  100.0, 1500.0,  5.0 ], [ [400.0,  35.0] ] ] ],
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0,  100.0, 1500.0,  2.0 ], [ [400.0,  40.0] ] ] ]
                                     ]; /**/// default Rank = distance if object not fit any mask

  // *** radar parameters

  float MaxRadarDistance = 1600.0; // m
  float MinRadarDistance = 10.0;    // m
  float MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 2000; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms

  // *** movement physical parameters

  // physical limitations

  float   MaxRotateSpeed                = 2.0f;
  Vector  MaxSpeed                      = new Vector( 9.5, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 6.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.7, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 1.0, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 1.0, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 2.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 1.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 2.0); //1);  // [rad/(s*s)]

}

// ================================================
// Device classes
// ================================================

class CTankPanzer_IICHullDriverDevice
  extends CHullDriverDevice
{
/* String m_NormalSetId  = "";  //"";
 String m_CrashedSetId = "";  //"Body_CrashedSet";
*/
    void HullDriverDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - PNZ II HullDriver ");
        Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 10);
    }
  }

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed PNZ II HullDriver ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CTankPanzer_IICHullGunlayerDevice
  extends CHullGunlayerDevice
{
/*  String m_NormalSetId  = "";            
  String m_CrashedSetId = "";   
*/
  void HullGunlayerDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged PNZ II HullGunlayer ");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
     Behavior.SetFireAbility(false,10);
    }
  }

  void HullGunlayerDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed PNZ II HullGunLayerDevice");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 0);
      Behavior.SetFireAbility(false, 0);
      Behavior.SetMoveAbility(false, 0);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackLeft").Index, 0.0, 0);

      if (1 == randnum(2))
      StateControl.SetDelayItemHP(_HostObject.GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("Turret_A").Index, 0.0, 0);

 //     StateControl.SetHitPoints(0.0);
    }
  }
}

class CTankPanzer_IICHullEngineDevice
  extends CHullEngineDevice
{
/*  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet"; //    
                                                           */
  void HullEngineDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Dameged PNZ II HullEngineDevice ");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Vector  MaxSpeed  = new Vector( 2.0, 0, 0);   // m/s
      Behavior.SetMoveAbility(false, 10);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed PNZ II HullEngineDevice");

    clearEventsForObject(getIdentificator(_HostObject));

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      // Change Item hit points after delay in N seconds. SetDelayItemHP(ItemIndex, HitPoints, Time)
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 8);
      StateControl.SetHitPoints(0.0);
    }
  }
}

class CTankPanzer_IICTrackLeftDevice
  extends CTrackLeftDevice
{
  //String m_NormalSetId  = "TrackLeft_NormalSet";    //
 // String m_CrashedSetId = "TrackLeft_CrashedSet";     //          TrackLeft_CrashedSet

  void TrackLeftDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - PNZ II TrackLeft");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 10);
    }
  }

  void TrackLeftDeviceDestroyed(Component _HostObject)
  { 
    logWarning("Device Destroyed - PNZ II TrackLeft");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.ActivateMovement(false);  //
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false,0);
    }
  }
}

class CTankPanzer_IICTrackRightDevice
  extends CTrackRightDevice
{
//    String m_NormalSetId  = "TrackRight_NormalSet";   
//   String m_CrashedSetId = "TrackRight_CrashedSet";   

  void TrackRightDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - PNZ II TrackRight ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 10);
    }
  }

  void TrackRightDeviceDestroyed(Component _HostObject)
  { 
    logWarning("Device Destroyed - PNZ II TrackRight ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.ActivateMovement(false);   //
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false,0);
    }
  }
}

class CTankPanzer_IICTurretDevice
  extends CTurretDevice
{
//    String m_NormalSetId  = "Turret_A_NormalSet";
//  String m_CrashedSetId = "Turret_A_CrashedSet";

  void TurretDeviceDamaged(Component _HostObject)
  {
    logWarning("Device Damaged - PNZ II Turret ");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 10);
      Behavior.SetAimAbility(false, 20);
      Vector  MaxSpeed  = new Vector( 2.0, 0, 0);   // m/s  //
    }
  }

  void TurretDeviceDestroyed(Component _HostObject)
  {
    logWarning("Device Destroyed - PNZ II Turret ");

    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
      Behavior.SetMoveAbility(false, 0);    

    }
     Component IdleSound = _HostObject.GetObject("IdleSound");   
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      //int UnitMenacePower  = MENACE_UNARMED;
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 8);
      StateControl.SetHitPoints(0.0);
    } 
  }
}

class CTankPanzer_IICRecoilController
{
  String FToBAnim   = "body_recoil_fb";
  String BToFAnim   = "body_recoil_bf";
  String RToLAnim   = "body_recoil_rl";
  String LToRAnim   = "body_recoil_lr";
  float  RecoilTime = 0.2;
}

class CTankPanzer_IICTurretSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.5;
  float  Friction1        = 0.9;
  float  Elasticity       = 0.0;
}

class CTankPanzer_IICSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.7;
  float  Friction1        = 1.0;;
  float  Elasticity       = 0.0;
}

class CTankPanzer_IICManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 16000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.1;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.4;    // cm
  float  SuspensionPower  = 8000;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

// ================================================
// Unit class
// ================================================
class CTankPanzer_IICUnit
  extends CGerTankUnit, CWeaponConfig, CPushVehicleObject
{
   boolean m_flag = false;
  
  final static boolean DefaultSetFlagMode       = false;
 
  final static float  DefaultHitPoints = CHitPoints::TankPNZIIUnitHitPoints;

  static category UnitType = CLASSIFICATOR_T34_LIGHT_TANK;

  static Array PostExplosionID = [
                                    ["", "HullGunLayerExplosionEffect"]
                                 ];

  static Array Hatches = [
                            [ "Body",  "luk_Commander_Door", 1.0 ],
                            [ "Commander",  "luk_main_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [  [ "Commander", 1.0 ], [ "Body", 1.0 ]  ] ],
                                  [ "Attack", [  [ "Commander", 0.0 ], [ "Body", 0.0 ]  ] ]
                               ];


  final static String BodyJoint   = "Body";  //
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution  HP_FRAGILE
  final static int    UnitMenacePower       = MENACE_NORMAL;  // Heavy weapon
  final static Array AutomaticClassificators  = ["GROUND", "TANK", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ], //
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],//
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                                      ];

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["Turret_A", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;
  // =======================================
  // Contruction and initialization
  // =======================================

  void CTankPanzer_IICUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SdKfz121_PNZ_IIModel>(),[0]);

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CTankPanzer_IICLeftTrack>(),
        new #TrackAnimator<CTankPanzer_IICRightTrack>()
      );

    SetupWeapon( "Weapon_A", new #Weapon<CTankPanzer_IICGun>(),
      ["Fire_A1"], new #TargetingAnimator<CTankPanzer_IICGunTargetingAnimatorA>());

   // SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICCoaxialMachineGun>(), "Fire_A1", ["Fire_B1"], null);

    SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICMachineGun>(),"Fire_A1", ["Fire_B1"], null);
      

    SetMovementEffects(
          new #Emitter<CTankPzIVGMovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke", "PetrolSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CTankPzIVGAccelSound>(),
      [
        ["Smoke", "PetrolAccelSmokeEffect"]
      ]
    );

    // Setup turret out animator
 //   SetTurretOutEffectsArray( TurretOutAnimations );

    SetupBehavior( new #VehicleBehavior<CTankPanzer_IICBehavior>());
  }

  void SetFlagMode(
      boolean _Enable
    )
  {

    if (_Enable)
    {
     setVisibleState(GetMeshComponent().GetJoint("Flag"), true);
     }
    else
    setVisibleState(GetMeshComponent().GetJoint("Flag"), false);
   }

  void Construct(
      Component   _Mission,
      Component   _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],    
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );  

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPNZIIUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPNZIIUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPNZIIUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );    
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPNZIIUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPNZIIUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );  
   CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPNZIIUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A"
      );
 /*  CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"    

      );
*/
    LinkDeviceToUnitItem("HullDriver",   new CTankPanzer_IICHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CTankPanzer_IICHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTankPanzer_IICHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CTankPanzer_IICTrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CTankPanzer_IICTrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CTankPanzer_IICTurretDevice()); /*  */

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CTankPanzer_IICRecoilController>());
   
     Component VehicleController = new #AITankVehicle<CTankPanzer_IICManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CTankPanzer_IICSubstance", 20000.0, 0.0);

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );
      EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  // ======================================
  // Armour descriptor
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ],  //
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],  //
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                      ]);
  }

  event void HideCommander()
  {
    Component Mesh = GetMeshComponent();
    //if (Mesh == "Commander")  //     "Commander"
    setVisibleState(GetMeshComponent().GetJoint("Commander"), false);

  }

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }
    
  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================
  
   boolean m_Objectdestroyed = false; //

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  /*  if (TurretOut)
    {
      logWarning("[TurretOut] Is there section for Turret OUT animation!");
      //StateControl.SetCustomState(CUnitStateControl::USID_TurretOut, CUnitStateControl::US_TurretOut);
      Component Mesh = _HostObject.GetObject("Mesh");
      Component Game = new #GameController();
      if(Mesh != null && Game.GetGameMode() == "Single")
      {
        logWarning("UnlinkJoint Turret_A_Crashed");
        Component PhysicsController = _HostObject.SetupPhysicaleItem("CTankPanzer_IICTurretSubstance", 10000.0, "Turret_A_Crashed");
        //PhysicsController.AppendExternalForce(GetForce(), GetRadius());
        PhysicsController.AppendExternalForceTheta(GetForce(), GetThetaForce(), GetRadius());
      }
    } */

  }
}

class CTankPanzer_IIC_WUnit
  extends CGerTankUnit, CWeaponConfig, CPushVehicleObject
{
   boolean m_flag = false;
  
  final static boolean DefaultSetFlagMode       = false;
 
  final static float  DefaultHitPoints = CHitPoints::TankPNZIIUnitHitPoints;

  static category UnitType = CLASSIFICATOR_T34_LIGHT_TANK;

  static Array PostExplosionID = [
                                    ["", "HullGunLayerExplosionEffect"]
                                 ];

  static Array Hatches = [
                            [ "Body",  "luk_Commander_Door", 1.0 ],
                            [ "Commander",  "luk_main_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [  [ "Commander", 1.0 ], [ "Body", 1.0 ]  ] ],
                                  [ "Attack", [  [ "Commander", 0.0 ], [ "Body", 0.0 ]  ] ]
                               ];


  final static String BodyJoint   = "Body";  //
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution  HP_FRAGILE
  final static int    UnitMenacePower       = MENACE_NORMAL;  // Heavy weapon
  final static Array AutomaticClassificators  = ["GROUND", "TANK", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ], //
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],//
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                                      ];

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["Turret_A", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;
  // =======================================
  // Contruction and initialization
  // =======================================

  void CTankPanzer_IIC_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SdKfz121_PNZ_II_WModel>(),[0]);

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CTankPanzer_IICLeftTrack>(),
        new #TrackAnimator<CTankPanzer_IICRightTrack>()
      );

    SetupWeapon( "Weapon_A", new #Weapon<CTankPanzer_IICGun>(),
      ["Fire_A1"], new #TargetingAnimator<CTankPanzer_IICGunTargetingAnimatorA>());

   // SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICCoaxialMachineGun>(), "Fire_A1", ["Fire_B1"], null);

    SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICMachineGun>(),"Fire_A1", ["Fire_B1"], null);
      

    SetMovementEffects(
          new #Emitter<CTankPzIVGMovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke", "PetrolSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CTankPzIVGAccelSound>(),
      [
        ["Smoke", "PetrolAccelSmokeEffect"]
      ]
    );

    // Setup turret out animator
 //   SetTurretOutEffectsArray( TurretOutAnimations );

    SetupBehavior( new #VehicleBehavior<CTankPanzer_IICBehavior>());
  }

  void SetFlagMode(
      boolean _Enable
    )
  {

    if (_Enable)
    {
     setVisibleState(GetMeshComponent().GetJoint("Flag"), true);
     }
    else
    setVisibleState(GetMeshComponent().GetJoint("Flag"), false);
   }

  void Construct(
      Component   _Mission,
      Component   _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],    
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );  

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPNZIIUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPNZIIUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPNZIIUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );    
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPNZIIUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPNZIIUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );  
   CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPNZIIUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A"
      );
 /*  CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"    

      );
*/
    LinkDeviceToUnitItem("HullDriver",   new CTankPanzer_IICHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CTankPanzer_IICHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTankPanzer_IICHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CTankPanzer_IICTrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CTankPanzer_IICTrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CTankPanzer_IICTurretDevice()); /*  */

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CTankPanzer_IICRecoilController>());
   
     Component VehicleController = new #AITankVehicle<CTankPanzer_IICManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CTankPanzer_IICSubstance", 20000.0, 0.0);

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );
      EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  // ======================================
  // Armour descriptor
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ],  //
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],  //
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                      ]);
  }

  event void HideCommander()
  {
    Component Mesh = GetMeshComponent();
    //if (Mesh == "Commander")  //     "Commander"
    setVisibleState(GetMeshComponent().GetJoint("Commander"), false);

  }

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }
    
  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================
  
   boolean m_Objectdestroyed = false; //

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  /*  if (TurretOut)
    {
      logWarning("[TurretOut] Is there section for Turret OUT animation!");
      //StateControl.SetCustomState(CUnitStateControl::USID_TurretOut, CUnitStateControl::US_TurretOut);
      Component Mesh = _HostObject.GetObject("Mesh");
      Component Game = new #GameController();
      if(Mesh != null && Game.GetGameMode() == "Single")
      {
        logWarning("UnlinkJoint Turret_A_Crashed");
        Component PhysicsController = _HostObject.SetupPhysicaleItem("CTankPanzer_IICTurretSubstance", 10000.0, "Turret_A_Crashed");
        //PhysicsController.AppendExternalForce(GetForce(), GetRadius());
        PhysicsController.AppendExternalForceTheta(GetForce(), GetThetaForce(), GetRadius());
      }
    } */

  }
}

class CTankPanzer_IIC_42Unit
  extends CGerTankUnit, CWeaponConfig, CPushVehicleObject
{
   boolean m_flag = false;
  
  final static boolean DefaultSetFlagMode       = false;
 
  final static float  DefaultHitPoints = CHitPoints::TankPNZIIUnitHitPoints;

  static category UnitType = CLASSIFICATOR_T34_LIGHT_TANK;

  static Array PostExplosionID = [
                                    ["", "HullGunLayerExplosionEffect"]
                                 ];

  static Array Hatches = [
                            [ "Body",  "luk_Commander_Door", 1.0 ],
                            [ "Commander",  "luk_main_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [  [ "Commander", 1.0 ], [ "Body", 1.0 ]  ] ],
                                  [ "Attack", [  [ "Commander", 0.0 ], [ "Body", 0.0 ]  ] ]
                               ];

  final static String BodyJoint   = "Body";  //
  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution  HP_FRAGILE
  final static int    UnitMenacePower       = MENACE_NORMAL;  // Heavy weapon
  final static Array AutomaticClassificators  = ["GROUND", "TANK", "GER"];
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";
  static Array        LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ], //
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],//
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                                      ];

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["Turret_A", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;
  // =======================================
  // Contruction and initialization
  // =======================================

  void CTankPanzer_IIC_42Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SdKfz121_PNZ_II_42Model>(),[0]);

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CTankPanzer_IICLeftTrack>(),
        new #TrackAnimator<CTankPanzer_IICRightTrack>()
      );

    SetupWeapon( "Weapon_A", new #Weapon<CTankPanzer_IICGun>(),
      ["Fire_A1"], new #TargetingAnimator<CTankPanzer_IICGunTargetingAnimatorA>());

   // SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICCoaxialMachineGun>(), "Fire_A1", ["Fire_B1"], null);

    SetupWeapon("Weapon_Base", new #Weapon<CTankPanzer_IICMachineGun>(),"Fire_A1", ["Fire_B1"], null);
      

    SetMovementEffects(
          new #Emitter<CTankPzIVGMovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke", "PetrolSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CTankPzIVGAccelSound>(),
      [
        ["Smoke", "PetrolAccelSmokeEffect"]
      ]
    );

    // Setup turret out animator
 //   SetTurretOutEffectsArray( TurretOutAnimations );

    SetupBehavior( new #VehicleBehavior<CTankPanzer_IICBehavior>());
  }

  void SetFlagMode(
      boolean _Enable
    )
  {

    if (_Enable)
    {
     setVisibleState(GetMeshComponent().GetJoint("Flag"), true);
     }
    else
    setVisibleState(GetMeshComponent().GetJoint("Flag"), false);
   }

  void Construct(
      Component   _Mission,
      Component   _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetTrackEffects(
        _Mission,
        [
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Corner_RL", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Corner_RR", "ForestComplexTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],    
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Corner_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Corner_RR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ],
          ["Corner_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );  

    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPNZIIUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPNZIIUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPNZIIUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );    
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPNZIIUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPNZIIUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );  
   CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPNZIIUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A"
      );
 /*  CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"    

      );
*/
    LinkDeviceToUnitItem("HullDriver",   new CTankPanzer_IICHullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CTankPanzer_IICHullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTankPanzer_IICHullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CTankPanzer_IICTrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CTankPanzer_IICTrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CTankPanzer_IICTurretDevice()); /*  */

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CTankPanzer_IICRecoilController>());
   
     Component VehicleController = new #AITankVehicle<CTankPanzer_IICManualControl>();
//    Component VehicleController = GetPhysicsController();

    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    // Create mesh
    Component Mesh = GetMeshComponent();

    // Create base object
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CTankPanzer_IICSubstance", 20000.0, 0.0);

    // Setup hatches controls
      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );
      EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  // ======================================
  // Armour descriptor
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankPNZIIUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankPNZIIUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankPNZIIUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankPNZIIUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankPNZIIUnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankPNZIIUnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankPNZIIUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankPNZIIUnitArmourHullTOP    ],  //
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankPNZIIUnitArmourHullBOTTOM ],  //
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankPNZIIUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankPNZIIUnitArmourHullLEFT   ]
                      ]);
  }

  event void HideCommander()
  {
    Component Mesh = GetMeshComponent();
    //if (Mesh == "Commander")  //     "Commander"
    setVisibleState(GetMeshComponent().GetJoint("Commander"), false);

  }

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }
    
  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================
  
   boolean m_Objectdestroyed = false; //

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  /*  if (TurretOut)
    {
      logWarning("[TurretOut] Is there section for Turret OUT animation!");
      //StateControl.SetCustomState(CUnitStateControl::USID_TurretOut, CUnitStateControl::US_TurretOut);
      Component Mesh = _HostObject.GetObject("Mesh");
      Component Game = new #GameController();
      if(Mesh != null && Game.GetGameMode() == "Single")
      {
        logWarning("UnlinkJoint Turret_A_Crashed");
        Component PhysicsController = _HostObject.SetupPhysicaleItem("CTankPanzer_IICTurretSubstance", 10000.0, "Turret_A_Crashed");
        //PhysicsController.AppendExternalForce(GetForce(), GetRadius());
        PhysicsController.AppendExternalForceTheta(GetForce(), GetThetaForce(), GetRadius());
      }
    } */

  }
}

