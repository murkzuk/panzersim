//-------------------------------------------------------------------
/*    Component Radar = new #RadarObject();
    setPositionable(Radar, Camera);
    Radar.SetDetectAllObjectsMode();
    Radar.EnableVisibilityCheck(false);
    Radar.SetObjectsDetectionMask(              // enable all objects except not editable
        [ ],
        [ CLASSIFICATOR_NOTEDITABLE ]
      );    
*/

//                                  CLASSIFICATOR_MISSILE, CLASSIFICATOR_TORPEDO  ObjectTrailerLink RailroadControl ManualTrainControl ManualCarControl
//-------------------------------------------------------------------

/* class CNebelwerferFireAnimation
{
  final static String  AnimationName     = "";
  final static float   AnimationTime     = 1.0;
}  */

class CNebelwerferExplosion
  extends CUnitExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
  String SoundId  = "GunPak40ExplosionSound";
}

class CNebelwerfer150mmMissileExplosion
  extends CHEGun7576BulletExplosion
{
  float  Damage   = CPiercing::NebelwerferHEDamage;
  float  FireDamage   = CPiercing::NebelwerferHEFireDamage;
  float  Radius = CPiercing::NebelwerferHERadius;

}

class CNebelwerfer150mmMissileDebrisCloud
{
  int    DebrisQuantity  = CPiercing::NebelwerferHEDebrisQuantity;
  String DebrisPatternID = "Nebelwerfer150mmMissileDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.0, 0.0, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CNebelwerfer150mmMissileDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::NebelwerferHEDebrisMaxDistance;
  String    ExplosionId   = "Nebelwerfer150mmMissileDebrisExplosion";
  float     Mass          = 0.02;
}

class CNebelwerfer150mmMissileDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::NebelwerferHEDebrisDamage;
}

class CNebelwerfer150mmMissileControl
  extends CLiteNebelMissileControl //CHeavyMissileControl CHEBulletControl  CLightMissileControl
{
  String    ExplosionId  = "Nebelwerfer150mmMissileExplosion";
  float     BulletSpeed  = CPiercing::NebelwerferHEBulletSpeed;
  //String  TraceEffectId  = "LightMissileTraceEffect";
 // Component BulletRender = new #AnimatedObject<Cwpn_NebelRocketModel>();
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     MaxDistance           = CPiercing::NebelwerferHEMaxDistance;
  float     PenetrationPower      = CPiercing::NebelwerferHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::NebelwerferHEPenetrationByDistance;
}


class CNebelwerfer150mmMissileAmmo
{
  final static String BulletPatternId = "Nebelwerfer150mmMissile";

  final static int    Ammunition      = 6;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

class CNebelwerferGun
  extends CHeavyGun //CLightLauncher
{
  String CloudEffectId   = "LauncherCloud";    //HeavyGunFireMuzzleEffect
  float  InitBulletSpeed = 0.0;
  float  FireDeviation   = 3.75;
  float  MinFireDeviation   = 1.55;
  String BulletPatternId = "Nebelwerfer150mmMissile";
  final static Vector  GravityVector   = CPiercing::ShellGravityVector;

   void OnWeaponFire()
  {
    //sendEvent(0.0f, SOID_MissionController, "IncreaseShoots", []);
  }


  boolean HighTrajectory  = false;

  final static boolean   Sequenced  = false;

  String    FireSoundId     = "NebelRocketFireSound";

  final static Array Ammo = [
                            new CNebelwerfer150mmMissileAmmo()
                            ];


  //$TMP TEST DATA
/*  final static Array AmmoTargetUse    = [
                                          //HEAVYTANK
                                          [0, [["HEAVYTANK"],[]], [[500.0, 25.0, 2000.0, 100.0], [[1000.0, 40.0], [1500.0, 80.0]]]],
                                          //TANK
                                          [0, [["TANK"],     []], [[500.0, 35.0, 2000.0, 100.0], [[1000.0, 45.0], [1500.0, 90.0]]]],
                                          //VEHICLE
                                          [0, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 100.0], [[1000.0, 90.0], [1500.0, 100.0]]]],
                                          //HUMAN
                                          [0, [["HUMAN"],    []], [[500.0, 25.0, 1500.0, 0.0],   [[1000.0, 10.0]]]],
                                          //BLD_WAR
                                          [0, [["BLD_WAR"],  []], [[500.0, 90.0, 1000.0, 100.0], []]],
                                          //BLD_CIV
                                          [0, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 100.0], []]]  //,
                                        ];  */

  final static float    LockAngleHMin     = -30.0;
  final static float    LockAngleHMax     = 30.0;
  final static float    LockAngleVMin     = -44.5;
  final static float    LockAngleVMax     = 12.5;
  final static float    BlockedLockAngle  =  1.0;

  final static float DirectionSpeedH  = 3.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 2.5; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  int    UpdateRadarPeriod        = 8000; // ms
  int    UpdateRadarPeriodRandAdd = 60; // ms

  int  FirePeriod        = 800;  // ms
  int  FirePeriodRandAdd = 150;   // ms
  Component BurstFireSound  = "NebelRocketFireSound";
  boolean BurstFire      = true;
  int  BurstTime         = 3600; // ms
  int  BurstTimeRandAdd  = 100; // ms

  final static int  BurstDelay        = 50; // ms
  final static int  BurstDelayRandAdd = 50; // ms

/*  final static Array GunSpecificFireMask = [
                                [["HEAVYTANK"],[]],    // high priority mask: RestrictTo, Exclude
                                [["GROUND"],[]]            
                              ];     */

 // Component FireAnimator = new #LineAnimator<CNebelwerferFireAnimation>();      
}

// Behavior

class CNebelwerferUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = false;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;
                     
/*  Array EnemyRankDangerByDistance =  [
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0, 200.0, 1500.0, 30.0 ], [ [400.0, 150.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0, 150.0, 1500.0, 50.0 ], [ [400.0, 140.0] ] ] ], // [ Mask, PiercLinFunctionByDist]
                                       [[ ["ANTITANK"],[] ],  [ [ 0.0, 150.0, 1500.0, 45.0 ], [ [400.0, 130.0] ] ] ],
                                       [[ ["BTR"],[] ],       [ [ 0.0, 130.0, 1500.0, 30.0 ], [ [400.0, 125.0] ] ] ],
                                       [[ ["BLD_WAR"],[] ],   [ [ 0.0, 100.0, 1500.0, 35.0 ], [ [400.0,  80.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  10.0, 1500.0, 5.0 ],  [ [400.0,  10.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0,  35.0, 1500.0, 2.0 ],  [ [400.0,   5.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask
     */
  // *** radar parameters

  float  MaxRadarDistance = 8800; // m
  float  MinRadarDistance = 500;    // m
  float  MaxRadarAngle    = 30.0;

  // *** movement physical parameters

  // physical limitations
  Vector MaxSpeed = new Vector( 0.0, 0, 0);
  float  MinRotateRadius = 0; // unit can turn when staying
}

class CNebelwerferTargetingAnimator
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 30.0;
  float  RightEndAngle  = -30.0;
  float  TopEndAngle    = -44.5;
  float  BottomEndAngle = 12.5;
}

class CNebelwerferSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.4;
  float  Friction1        = 0.4;
  float  Elasticity       = 0.04;
}

class CNebelwerferUnit extends CUnit, CPushObject
{
  final static float DefaultHitPoints = CHitPoints::GunNebelUnitHitPoints;
  boolean   m_PassiveUnit           = true;

  static category UnitType = CLASSIFICATOR_T34_GUN;

  static Array PrevExplosionID = [
                                    [ "", "" ]
                                 ];

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER"];

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("Nebelwerfer damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("Nebelwerfer sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Nebelwerfer have now HP = "+new String(HitPoints)+" and Nebelwerfer has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);

      if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("NebelwerferUnit destroyed");
      }
     }

    // play touch sound
    (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
  }
  event void ReloadAmmo()
  {

      Component Weapon = GetObject("GunA");
      Weapon.SetAmmoQuantity(0, CNebelwerfer150mmMissileAmmo::Ammunition);

  }


  // =======================================
  // Contruction and initialization
  // =======================================

  void CNebelwerferUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_NebelwerferModel>(), [200, 100, 50, 3]);

    // Setup Weapon
    SetupWeapon("GunA", new #Weapon<CNebelwerferGun>(),
    "Fire1", ["Fire2", "Fire3", "Fire4", "Fire5", "Fire6"], new #TargetingAnimator<CNebelwerferTargetingAnimator>());

/**/
    //$TMP WEAPON
/*
    // init and register weapon
    Component Weapon =   new #Weapon<CNebelwerferHeavyLauncher>();
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);
    
    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);
    //    */ 
    SetupBehavior( new #VehicleBehavior<CNebelwerferUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.6);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CNebelwerferSubstance", 1100.0*6, 0.0003);
    SetModelLifeState(true);
  }
}

// WINTER_UNIT

class CNebelwerfer_WUnit extends CUnit, CPushObject
{
  final static float DefaultHitPoints = CHitPoints::GunNebelUnitHitPoints;
  boolean   m_PassiveUnit           = true;

  static category UnitType = CLASSIFICATOR_T34_GUN;

  static Array PrevExplosionID = [
                                    [ "", "" ]
                                 ];

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER"];

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  boolean m_Objectdestroyed = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("Nebelwerfer damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("Nebelwerfer sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Nebelwerfer have now HP = "+new String(HitPoints)+" and Nebelwerfer has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);

      if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("NebelwerferUnit destroyed");
      }
     }

    // play touch sound
    (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
  }
  event void ReloadAmmo()
  {

      Component Weapon = GetObject("GunA");
      Weapon.SetAmmoQuantity(0, CNebelwerfer150mmMissileAmmo::Ammunition);

  }


  // =======================================
  // Contruction and initialization
  // =======================================

  void CNebelwerfer_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_Nebelwerfer_wModel>(), [200, 100, 50, 3]);

    // Setup Weapon
    SetupWeapon("GunA", new #Weapon<CNebelwerferGun>(),
    "Fire1", ["Fire2", "Fire3", "Fire4", "Fire5", "Fire6"], new #TargetingAnimator<CNebelwerferTargetingAnimator>());

/**/
    //$TMP WEAPON
/*
    // init and register weapon
    Component Weapon =   new #Weapon<CNebelwerferHeavyLauncher>();
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);
    
    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);
    //    */ 
    SetupBehavior( new #VehicleBehavior<CNebelwerferUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.6);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.6);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CNebelwerferSubstance", 1100.0*6, 0.0003);
    SetModelLifeState(true);
  }
}
