/*
  Array  Animation = [
      ["gun_a_recoil", ["Weapon_A", 0, 60]],
      ["gun_a", ["Weapon_Base", 0, 1], ["Dust_Plt", 0, 1]],
      ["turret_a", ["MainGun_A", 0, 4]],
      ["L_Wheel01_lift", ["ARM_L0", 0, 2]],
      ["L_Wheel02_lift", ["ARM_L1", 0, 2]],
      ["L_Wheel03_lift", ["ARM_L2", 0, 2]],
      ["L_Wheel04_lift", ["ARM_L3", 0, 2]],
      ["L_Wheel05_lift", ["ARM_L4", 0, 2]],
      ["L_Wheel06_lift", ["ARM_L5", 0, 2]],
      ["R_Wheel01_lift", ["ARM_R0", 0, 2]],
      ["R_Wheel02_lift", ["ARM_R1", 0, 2]],
      ["R_Wheel03_lift", ["ARM_R2", 0, 2]],
      ["R_Wheel04_lift", ["ARM_R3", 0, 2]],
      ["R_Wheel05_lift", ["ARM_R4", 0, 2]],
      ["R_Wheel06_lift", ["ARM_R5", 0, 2]],
      ["body_recoil_rl", ["Body", 0, 10]],
      ["body_recoil_lr", ["Body", 10, 20]],
      ["body_recoil_bf", ["Body", 20, 30]],
      ["body_recoil_fb", ["Body", 30, 40]],
      ["luk_BC_open", ["Luk_B", 0, 1], ["Luk_C", 0, 1]],  //
      ["luk_DG_open", ["Luk_D", 0, 1] ],
      ["luk_commander", ["Commander", 0, 60]],
      ["luk_right_open", ["hatch_Loader", 0, 1]],       //
      ["luk_main_commander", ["hatch_A", 0, 1], ["hatch_B", 0, 1]],
      ["wheels_left", ["WheelLeftFront", 0, 60], ["WheelLeftMain_0", 0, 60], ["WheelLeftMain_1", 0, 60], ["WheelLeftMain_2", 0, 60], ["WheelLeftMain_3", 0, 60], ["WheelLeftMain_4", 0, 60], ["WheelLeftMain_5", 0, 60], ["WheelLeftMain_11", 0, 60], ["WheelLeftMain_12", 0, 60], ["WheelLeftMain_13", 0, 60], ["WheelLeftRear", 0, 60]],
      ["wheels_right", ["WheelRightFront", 0, 60], ["WheelRightMain_0", 0, 60], ["WheelRightMain_1", 0, 60], ["WheelRightMain_2", 0, 60], ["WheelRightMain_3", 0, 60], ["WheelRightMain_4", 0, 60], ["WheelRightMain_5", 0, 60], ["WheelRightMain_11", 0, 60], ["WheelRightMain_12", 0, 60], ["WheelRightMain_13", 0, 60], ["WheelRightRear", 0, 60]]
    ];

  Map    ConfigSets = new Map([
                               [ "Body_CrashedSet", [ "Commander_crashed", "Driver_crashed"] ],
                               [ "Body_NormalSet", [ "Commander", "Driver" ] ]
                               ]);
        
      
*/

// Unit Explosion
class CSAUSU152_Explosion
  extends CHeavyTankExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
}

// Main cannon section
// Main cannon animator
class CSAUSU152_GunTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  9.0;
  float  RightEndAngle  = -9.0;
  float  TopEndAngle    =  -4.0;
  float  BottomEndAngle =  23.0;
}
// Main cannon bullet explosion
class CSAUSU152_GunHEBulletExplosion
  extends CGunML20_152mmGunHEBulletExplosion
{

}

class CSAUSU152_GunHEBulletDebrisCloud
  extends CGunML20_152mmGunHEBulletDebrisCloud
{  

}
class CSAUSU152_GunHEBulletDebrisControl
  extends CGunML20_152mmGunHEBulletDebrisControl
{

}

class CSAUSU152_GunHEBulletDebrisExplosion
  extends CGunML20_152mmGunHEBulletDebrisExplosion
{

}
class CSAUSU152_GunHEBulletControl
  extends CHEBulletControl
{
  String    ExplosionId  = "GunML20_152mmGunHEBulletExplosion";
  float     BulletSpeed  = CPiercing::GunML20_152mmHEBulletSpeed;
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     MaxDistance           = CPiercing::GunML20_152mmHEMaxDistance;
  float     PenetrationPower      = CPiercing::GunML20_152mmHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunML20_152mmHEPenetrationByDistance;
}

class CSAUSU152_HEAmmo
{
  final static String BulletPatternId = "GunML20_152mmGunHEBullet";
  final static int    Ammunition      = 200;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}
class CSAUSU152_Gun
  extends CHeavyGun
{
  String CloudEffectId   = "HeavyGunFireMuzzleEffect";     // HeavyGunNoMuzzleGroundEffect  HeavyGunNoMuzzleCloudEffect
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 1.75;
  float  MinFireDeviation   = 0.95;
  String BulletPatternId = "GunML20_152mmGunHEBullet";
  Vector GravityVector   =  CPiercing::ShellGravityVector;
   
  final static boolean CanFireInMove  = true;

  final static boolean HighTrajectory  = false;
  final static String BulletPatternId = "";
  String    FireSoundId     = "ML20GunFireSound";

  final static Array Ammo = [
                             new CSAUSU152_HEAmmo()
                            ];

  final static float  LockAngleHMin    = -9.0;
  final static float  LockAngleHMax    =  9.0;
  final static float  LockAngleVMin    = -4.0;
  final static float  LockAngleVMax    =  23.0;
  final static float  BlockedLockAngle =  4.0;

  final static float DirectionSpeedH  = 3.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 2.0; // deg / sec  • vertical

  Component DirectionSoundH  = new #Emitter<CTankMediumTurretDirectionSoundV>();
  Component DirectionSoundV  = new #Emitter<CTankMediumTurretDirectionSoundV>();

  final static int     Ammunition     = 200;        // wrong value

 // final static float MinDistance      = 1;        
  //final static float MaxDistance      = 400; 

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 19000; // ms
  final static int  FirePeriodRandAdd = 2500; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 3000; // ms
  final static int  BurstDelayRandAdd = 2000; // ms

  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]]           
                              ];    /* */
  Component FireAnimator = new #LineAnimator<CSAUSU152_FireAnimation>();
}

class CSAUSU152_BaseTrack
{
  String  JointName           = "";
  String  TrackTexName        = "Textures/u_veh_KVtrack.tex";  //
  String  WheelAnimName       = "";

  Array   TrackTexScrollScale = [0.0, -0.4 ];
  float   WheelRotateScale    = 0.04;
  float   RealTrackPathScale  = 2.0f;

  boolean IsLeftTrack;

  float   WheelRadius         = 0.304 + 0.060; // whell radius + track radius
  float   WhellLiftDown       = 0.095;         // max down wheel offset
  float   WhellLiftUp         = 0.095;         // max up wheel offset

 // float   TrackSoft           = 0.5;
  // Collision mask [restrict], [exclude]
  Array   CollisionMask = [[CLASSIFICATOR_WALK_SURFACE, CLASSIFICATOR_COLLISION_SHAPES ], []];
}

class CSAUSU152_LeftTrack
  extends CSAUSU152_BaseTrack
{
  String  JointName     = "TrackLeft";
  String  WheelAnimName = "wheels_left";

  boolean IsLeftTrack = true;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelLeftMain_0", "L_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_1", "L_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_2", "L_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_3", "L_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_4", "L_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_5", "L_Wheel06_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

class CSAUSU152_RightTrack
  extends CSAUSU152_BaseTrack
{
  String  JointName     = "TrackRight";
  String  WheelAnimName = "wheels_right";
  boolean IsLeftTrack   = false;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelRightMain_0", "R_Wheel01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_1", "R_Wheel02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_2", "R_Wheel03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_3", "R_Wheel04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_4", "R_Wheel05_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_5", "R_Wheel06_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

// Fire Animator
class CSAUSU152_FireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

// Behavior
class CSAUSU152_BehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 3.0;
}

class CSAUSU152_Behavior extends CBaseSAUBehavior //      CBaseTankBehavior
{
  final static Component SpecParams = new CSAUSU152_BehaviorParams();

 int      AttackStyle        = AttackStyle_SAU;             //           AttackStyle_LightTank;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true;
  float    NonRotatableAngle = 9.0;    /* */


  float   CollisionRadius = 12.5;
  // *** radar parameters

  float MaxRadarDistance = 13000.0; // m
  float MinRadarDistance = 50.0;    // m
  float MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 7000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms
                                                   
  // *** movement physical parameters

  // physical limitations
  float   MaxRotateSpeed                = 1.75f;
  Vector  MaxSpeed                      = new Vector( 5.0, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 4.4, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.8, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 1.5, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 2.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 3.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 1.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 2.0); //1);  // [rad/(s*s)]

  // Router parameters

}

// ================================================
// Device classes
// ================================================

class CSAUSU152_HullDriverDevice
  extends CHullDriverDevice
{
  String m_NormalSetId  = "Body_NormalSet";
  String m_CrashedSetId = "Body_CrashedSet";

  void HullDriverDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 90);
    }
  }

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CSAUSU152_HullGunlayerDevice
  extends CHullGunlayerDevice
{
  String m_NormalSetId  = "Body_NormalSet";
  String m_CrashedSetId = "Body_CrashedSet";

  void HullGunlayerDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 30);
      Behavior.SetFireAbility(false, 30);
    }
  }

  void HullGunlayerDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false,100);
      Behavior.SetFireAbility(false, 0);
    }
    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackLeft").Index, 0.0, 0);

      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("Turret_A").Index, 0.0, 0);

      StateControl.SetHitPoints(0.0);
    }
   }
}

class CSAUSU152_HullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet";

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Vector  MaxSpeed  = new Vector( 1.5, 0, 0);   // m/s
      Behavior.SetFireAbility(false, 20);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      // Change Item hit points after delay in N seconds. SetDelayItemHP(ItemIndex, HitPoints, Time)
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 20+randnum(15));
      StateControl.SetHitPoints(0.0);
    }
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
      Behavior.SetMoveAbility(false, 0);
      

  }
}

class CSAUSU152_TrackLeftDevice
  extends CTrackLeftDevice
{
 // String m_NormalSetId  = "TrackLeft_NormalSet";
 // String m_CrashedSetId = "TrackLeft_CrashedSet";

  void TrackLeftDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(0.5f);
      Behavior.SetMoveAbility(false, 60);
    }
  }

  void TrackLeftDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 0);
//    Behavior.ActivateMovement(false);
    }
  }
}

class CSAUSU152_TrackRightDevice
  extends CTrackRightDevice
{
//  String m_NormalSetId  = "TrackRight_NormalSet";   
// String m_CrashedSetId = "TrackRight_CrashedSet";   

  void TrackRightDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-0.5f);
      Behavior.SetMoveAbility(false, 60);
    }
  }

  void TrackRightDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 0);
//      Behavior.ActivateMovement(false);
    }
  }
}

class CSAUSU152_TurretDevice
  extends CTurretDevice
{
  String m_NormalSetId  = "Body_NormalSet";
  String m_CrashedSetId = "Body_CrashedSet";

  void TurretDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      //Behavior.SetMoveAbility(false, 10);
      Behavior.SetAimAbility(false, 20);
    }
  }

  void TurretDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
      Behavior.SetMoveAbility(false, 0); //

    }
      Component IdleSound = _HostObject.GetObject("IdleSound");   //
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }   

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    } 
  }
}

class CSAUSU152_RecoilController
{
  String FToBAnim   = "body_recoil_fb";
  String BToFAnim   = "body_recoil_bf";
  String RToLAnim   = "body_recoil_rl";
  String LToRAnim   = "body_recoil_lr";
  float  RecoilTime = 1.0;
}

class CSAUSU152_Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.6;
  float  Friction1        = 1.0;
  float  Elasticity       = 0.0;
}

class CSAUSU152EngineSystem
{

  float MaxPower      = 1600.0;  // maximum horse power
  float MinSpeed      = 600.0;   // minimum RPM
  float MaxSpeed      = 2000.0;  // maximum RPM

  Array Gears         = [
                          -0.10,
                           0.00,
                           0.10,
                           0.20,
                           0.30,
                           0.45,
                           0.60
                        ];


  float LoForce       = 800.0;   // force of engine if brake is disable
  float HiForce       = 5000.0;  // force of engine if brake is enable

}

  // =========================================
  // Tank properties
  // =========================================
class CSAUSU152_ManualControl
  extends CConstraintProperties
{
  float  Mass                 = 48000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.4;    // cm
  float  SuspensionPower  = 30000;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

// ================================================
// Unit class
// ================================================

class CSAUSU152_Unit
    extends CTankUnit, CWeaponConfig, CPushVehicleObject
{
  final static float  DefaultHitPoints = CHitPoints::SAUSU152_UnitHitPoints;

  static category UnitType = CLASSIFICATOR_T34_HEAVY_TANK;
 /*   */
  static Array PostExplosionID = [
                                    ["", "TankPzVIAusfEExplosion"]
                                 ];
                                 
  static Array PrevDeathEffect = [
                                   ["",  "GenericLargeFirePostSmokeRefuseEffect"]
                                      ];

  static Array Hatches = [
                            [ "Driver",   "luk_DG_open",     1.0 ], 
                            ["Luk_Commander" ,"luk_main_commander", 1.0 ],                                                        //  CHANGED 11-13-08
                            [ "Commander",  "luk_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [ [ "Luk_Commander", 2.0 ], [ "Commander", 2.0 ], [ "Driver", 1.0 ]  ] ],
                                  [ "Attack", [ [ "Luk_Commander", 0.0 ], [ "Commander", 0.0 ], [ "Driver", 0.0 ]  ] ]
                               ];  

  final static String BodyJoint   = "Body";

  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower        = MENACE_KILLER;  // light weapon
  final static Array  AutomaticClassificators  = ["GROUND", "TANK", "SAU", "RU"];
  static Array        LandingJoints            = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];
/* */
  static Array  SubstanceArmourWidth = [  
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUSU152_UnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUSU152_UnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUSU152_UnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUSU152_UnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUSU152_UnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUSU152_UnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUSU152_UnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUSU152_UnitArmourHullTOP    ],
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUSU152_UnitArmourHullBOTTOM ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUSU152_UnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUSU152_UnitArmourHullLEFT   ]
                                     ];

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["HullDriver", "HullGunlayer", 1.8f]
                             ];


  boolean m_AITankCollisionShape = true;


  void CSAUSU152_Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SU152Model>(), [0,640,320,160,80]);    //

    // Setup trucks 
    SetupTracks(
        new #TrackAnimator<CSAUSU152_LeftTrack>(),
        new #TrackAnimator<CSAUSU152_RightTrack>()
      );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CSAUSU152_Gun>(),
      ["Fire_A1"], new #TargetingAnimator<CSAUSU152_GunTargetingAnimatorA>());


    // Creates and register unit state component
    // MoveSound, TraceEffectId
    SetMovementEffects(
          new #Emitter<CT34MovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke_R", "DiselSmokeEffect"],
        ["Smoke_L", "DiselSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CT34IdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CT34AccelSound>(),
      [
        ["Smoke_L", "DiselAccelSmokeEffect"],
        ["Smoke_R", "DiselAccelSmokeEffect"]
      ]
    );

    SetupBehavior( new #VehicleBehavior<CSAUSU152_Behavior>());

    Component hatches = new #HatchesStateController();
    hatches.AddHatches( Hatches );
    hatches.AddStates( HatchesStates );
    SetupHatches( hatches );
    hatches.SetHatchesState( "Normal" );
  }

  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE, CLASSIFICATOR_COLLISION_SHAPES],
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );


/*  */
    CreateUnitItem(
        "HullDriver",
        CJointPoints::SAUSU152_UnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );       
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::SAUSU152_UnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "GenericLargeFirePostSmokeRefuseEffect"],
        "HullGunlayer"
      );  
    CreateUnitItem(
        "HullEngine",
        CJointPoints::SAUSU152_UnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::SAUSU152_UnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::SAUSU152_UnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );
    CreateUnitItem(
        "Turret_A",
        CJointPoints::SAUSU152_UnitTURRETPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],   //  GenericSmallFireEffect
        "Turret_A"
      );

    logWarning( "Weapon fire deviation for " + getIdentificator( this ) + "=" + new String( GetObject( "Weapon_A" ).FireDeviation ) );

    LinkDeviceToUnitItem("HullDriver",   new CSAUSU152_HullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSAUSU152_HullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSAUSU152_HullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSAUSU152_TrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSAUSU152_TrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSAUSU152_TurretDevice());

    AttachEffect2("Vapor_L", "PzVIETrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzVIETrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzVIETrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzVIETrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CSAUSU152_RecoilController>());
    CreateCollisionControl("CBaseCollisionControl");

    Component VehicleController = new #AITankVehicle<CSAUSU152_ManualControl>();
   // Component VehicleController = GetPhysicsController();      


    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }
    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    Component Mesh = GetMeshComponent();
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSAUSU152_Substance", 60000.0, 0.0);


      EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  // ======================================
  // Armour descriptor                        
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([   
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankKV85HvyUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankKV85HvyUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankKV85HvyUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankKV85HvyUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankKV85HvyUnitArmourTurretRIGHT]/*,
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankKV85HvyUnitArmourHullFWD    ] ,
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankKV85HvyUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankKV85HvyUnitArmourHullTOP    ],
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankKV85HvyUnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankKV85HvyUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankKV85HvyUnitArmourHullLEFT   ]  */
                      ]);
  }

  event void SetModelViewState(
      boolean _State    
    )
  {
    // TMP
  }

  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      //Behavior.ActivateMovement(false);
      //Behavior.ActivateFire(false);
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
      
       //StateControl.SetHitPoints(0.0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  }
}


// ================================================
// WINTER_Unit class
// ================================================

class CSAUSU152_WUnit
    extends CTankUnit, CWeaponConfig, CPushVehicleObject
{
  final static float  DefaultHitPoints = CHitPoints::SAUSU152_UnitHitPoints;

  static category UnitType = CLASSIFICATOR_T34_HEAVY_TANK;
 /*   */
  static Array PostExplosionID = [
                                    ["", "TankPzVIAusfEExplosion"]
                                 ];
                                 
  static Array PrevDeathEffect = [
                                   ["",  "GenericLargeFirePostSmokeRefuseEffect"]
                                      ];

  static Array Hatches = [
                            [ "Driver",   "luk_DG_open",     1.0 ], 
                            ["Luk_Commander" ,"luk_main_commander", 1.0 ],                                                        //  CHANGED 11-13-08
                            [ "Commander",  "luk_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [ [ "Luk_Commander", 2.0 ], [ "Commander", 2.0 ], [ "Driver", 1.0 ]  ] ],
                                  [ "Attack", [ [ "Luk_Commander", 0.0 ], [ "Commander", 0.0 ], [ "Driver", 0.0 ]  ] ]
                               ];  

  final static String BodyJoint   = "Body";

  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower        = MENACE_KILLER;  // light weapon
  final static Array  AutomaticClassificators  = ["GROUND", "TANK", "SAU", "RU"];
  static Array        LandingJoints            = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];
/* */
  static Array  SubstanceArmourWidth = [  
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUSU152_UnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUSU152_UnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUSU152_UnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUSU152_UnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUSU152_UnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUSU152_UnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUSU152_UnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUSU152_UnitArmourHullTOP    ],
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUSU152_UnitArmourHullBOTTOM ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUSU152_UnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUSU152_UnitArmourHullLEFT   ]
                                     ];

   Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.8f],
                             ["HullDriver", "HullGunlayer", 1.8f]
                             ];


  boolean m_AITankCollisionShape = true;


  void CSAUSU152_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SU152_WModel>(), [0,640,320,160,80]);    //

    // Setup trucks
    SetupTracks(
        new #TrackAnimator<CSAUSU152_LeftTrack>(),
        new #TrackAnimator<CSAUSU152_RightTrack>()
      );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CSAUSU152_Gun>(),
      ["Fire_A1"], new #TargetingAnimator<CSAUSU152_GunTargetingAnimatorA>());


    // Creates and register unit state component
    // MoveSound, TraceEffectId
    SetMovementEffects(
          new #Emitter<CT34MovementSound>(),
      [
        ["Vapor_L", "GroundUnitTraceEffect"],
        ["Vapor_R", "GroundUnitTraceEffect"],
        ["Smoke_R", "DiselSmokeEffect"],
        ["Smoke_L", "DiselSmokeEffect"]
      ]
    );
    SetIdleEffects(
        new #Emitter<CT34IdleSound>()
    );

    SetAccelEffects(
      new #Emitter<CT34AccelSound>(),
      [
        ["Smoke_L", "DiselAccelSmokeEffect"],
        ["Smoke_R", "DiselAccelSmokeEffect"]
      ]
    );

    SetupBehavior( new #VehicleBehavior<CSAUSU152_Behavior>());

    Component hatches = new #HatchesStateController();
    hatches.AddHatches( Hatches );
    hatches.AddStates( HatchesStates );
    SetupHatches( hatches );
    hatches.SetHatchesState( "Normal" );
  }

  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE, CLASSIFICATOR_COLLISION_SHAPES],
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );


/*  */
    CreateUnitItem(
        "HullDriver",
        CJointPoints::SAUSU152_UnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );       
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::SAUSU152_UnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "GenericLargeFirePostSmokeRefuseEffect"],
        "HullGunlayer"
      );  
    CreateUnitItem(
        "HullEngine",
        CJointPoints::SAUSU152_UnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::SAUSU152_UnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::SAUSU152_UnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );
    CreateUnitItem(
        "Turret_A",
        CJointPoints::SAUSU152_UnitTURRETPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],   //  GenericSmallFireEffect
        "Turret_A"
      );

    logWarning( "Weapon fire deviation for " + getIdentificator( this ) + "=" + new String( GetObject( "Weapon_A" ).FireDeviation ) );

    LinkDeviceToUnitItem("HullDriver",   new CSAUSU152_HullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSAUSU152_HullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSAUSU152_HullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSAUSU152_TrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSAUSU152_TrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSAUSU152_TurretDevice());

    AttachEffect2("Vapor_L", "PzVIETrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzVIETrackEffect", new Vector(0.65, 0.0, 0.1));
    AttachEffect2("Vapor_L", "PzVIETrackEffect", new Vector(-0.65, 0.0, 0.1));
    AttachEffect2("Vapor_R", "PzVIETrackEffect", new Vector(-0.65, 0.0, 0.1));

    SetupRecoilController(new #RecoilController<CSAUSU152_RecoilController>());
    CreateCollisionControl("CBaseCollisionControl");

    Component VehicleController = new #AITankVehicle<CSAUSU152_ManualControl>();
   // Component VehicleController = GetPhysicsController();      


    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
      return;
    }
    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    Component Mesh = GetMeshComponent();
    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSAUSU152_Substance", 60000.0, 0.0);


      EnableSurfaceControl(true);
      GetLeftTrack().EnableAutoCalcPath(true);
      GetRightTrack().EnableAutoCalcPath(true);
  }

  // ======================================
  // Armour descriptor                        /*  */
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([   
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::TankKV85HvyUnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::TankKV85HvyUnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::TankKV85HvyUnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::TankKV85HvyUnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::TankKV85HvyUnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::TankKV85HvyUnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::TankKV85HvyUnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::TankKV85HvyUnitArmourHullTOP    ],
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::TankKV85HvyUnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::TankKV85HvyUnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::TankKV85HvyUnitArmourHullLEFT   ]
                      ]);
  }

  event void SetModelViewState(
      boolean _State    
    )
  {
    // TMP
  }

  // ======================================
  // Point collision detector
  // ======================================

  // Call when tank deep in the water (Âûçûâàåòñÿ, êîãäà òàíê ãëóáîêî çàåõàë â âîäó)
  event void OnPointCollisionDetect(String _ObjectID)
  {
    // Destroy HullEngine may be changed (óáèâàåì äâèæîê, ìîæíî çàìåíèòü íà ÷òî-òî äðóãîå)
    SetUnitItemHPPercent("HullEngine", 0.0);
    
    GetObject("PointDetector").EnableDetector(false);
  }
  
  // ======================================
  // Destroy object
  // ======================================

  event void KillUnit()
  {
    Component Behavior = GetObject("Behavior");
    if (Behavior != null)
    {
      //Behavior.ActivateMovement(false);
      //Behavior.ActivateFire(false);
      Behavior.SetAimAbility(false,0);
      Behavior.SetMoveAbility(false,0);
      Behavior.SetFireAbility(false,0);
    }
    Component StateControl = GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(GetItem("TrackLeft").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("HullGunlayer").Index, 0.0, 0);

      StateControl.SetDelayItemHP(GetItem("Turret_A").Index, 0.0, 0);
      
       //StateControl.SetHitPoints(0.0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(this));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
  }
}


