//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------
class CJu87_B2Explosion
  extends CAirVehicleExplosion
{
  float  Damage   = 50.0;
  float  Radius   = 10.0;
}


class CJu87_B2MachineGunBulletExplosion
  extends CMachineGun127BulletExplosion
{
  float  Damage   = CPiercing::BtrM3A1HalftruckMachineGunDamage;
}

class CJu87_B2MachineGunBulletControl
  extends CMachineGunBulletControl
{
  String ExplosionId  = "BtrM3A1HalftruckMachineGunBulletExplosion";
  Vector GravityAccel = CPiercing::BulletGravityVector;
  float  BulletSpeed  = 850.0;
  float MaxDistance = 2000;
  float  Mass         = 0.03;
}
 class CJu87_B2MachineGun
  extends CMachineGun    //   CLightFlakGun, CWeaponFireRecoil, CPlayerWeapon ,
{
  float  InitBulletSpeed = CPiercing::BtrM3A1HalftruckMachineGunBulletSpeed;

  final static String BulletPatternId = "BtrM3A1HalftruckMachineGunBullet";

  final static Vector GravityVector   = CWorldPhysics::GravityVector;
  final static boolean HighTrajectory  = false;

  Component BurstFireSound  = new #Emitter<C50calMachineGunFireSound>();

  final static float    LockAngleHMin     = -0.0;
  final static float    LockAngleHMax     =  0.0;
  final static float    LockAngleVMin     = -0.0;
  final static float    LockAngleVMax     =  0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = false;
  final static boolean  SelfTargeting      = true;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 50; // ms
  final static int  FirePeriodRandAdd = 0;   // ms

  final static boolean BurstFire      = true;
  final static int  BurstTime         = 1200; // ms
  final static int  BurstTimeRandAdd  = 150; // ms

  final static int  BurstDelay        = 2000; // ms
  final static int  BurstDelayRandAdd = 1000; // ms
  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [[],[]], // low priority mask: RestrictTo, Exclude
                                [[],[]]
                              ];
  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 1500;     //1
  final static int     AutoRepeatDelay  = 100;
}
class CJu87_B2AirBombExplosion1
  extends CAirBombExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 250;
  float  FireDamage   = 250;
  float  Radius = 15;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}

class CJu87_B2AirBombExplosion2
  extends CAirBomb500KgExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 750;
  float  FireDamage   = 750;
  float  Radius = 33;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}

class CJu87_B2AirBombControl
     extends CBombControl
{
  String    ExplosionId  = "Ju87_B2AirBombExplosion2";
  Component BulletRender = new #AnimatedObject<Cwpn_BombSC500Model>(); //$TMP should be changed to correct model when it'll be done
//  String  TraceEffectId    = "";
  CJu87_B2AirBombControl()
  {
    BulletRender.SetLods([ 1 ]);
  }
 // float     PenetrationPower      = CPiercing::GunFH18_150mmHEPenetrationPower;


  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}

class CJu87_B2BombDropper
  extends CLightGun
{
  final static float  InitBulletSpeed = 0.0;//
  final static float  FireDeviation   = 0.05;

  //final static Vector GravityVector   = CWorldPhysics::GravityVector;

  final static String  BulletPatternId  = "Ju87_B2AirBomb";
  final static boolean HighTrajectory  = false;
  //$tmp - keep fire effects for debug propose
  //String    FireEffectId    = "";
  //String    CloudEffectId   = "";
  final static String    FireSoundId     = "";

  final static int     Ammunition       = 1;
  final static int     TargetCameraFilter = ETC_FILTER_TV;  //

  final static float   AmmoMass = 500.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = false;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod          = 300; // ms
  
                                                        
  final static int  FirePeriodRandAdd   = 0; // ms

  final static boolean BurstFire        = false;

  final static Array GunSpecificFireMask = [
                                [["STRUCTURE"],[]], //  high priority mask: RestrictTo, Exclude
                                [["GROUND","HUMAN"],[]],    // priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false; //    false
  final float          TargetingRange   = 1000;     //1
  final static int     AutoRepeatDelay  = 100;
}

class CJu87_B2AirBombControlB
     extends CBombControl
{
  String    ExplosionId  = "Ju87_B2AirBombExplosion1";
  Component BulletRender = new #AnimatedObject<Cwpn_BombSC50Model>(); //$TMP should be changed to correct model when it'll be done
  //String  TraceEffectId    = "";
  CJu87_B2AirBombControlB()
  {
    BulletRender.SetLods([ 1 ]);
  }
 // float     PenetrationPower      = CPiercing::GunFH18_150mmHEPenetrationPower;


  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}

class CJu87_B2BombDropperB
  extends CLightGun
{
  final static float  InitBulletSpeed = 0.0;  //
  final static float  FireDeviation   = 0.05;

  //final static Vector GravityVector   = CWorldPhysics::GravityVector;   

  final static String  BulletPatternId  = "Ju87_B2AirBombB";
  final static boolean HighTrajectory  = false;
  //$tmp - keep fire effects for debug propose
  //String    FireEffectId    = "";
  //String    CloudEffectId   = "";
  final static String    FireSoundId     = "";

  final static int     Ammunition       = 4;
  final static int     TargetCameraFilter = ETC_FILTER_TV;  //

  final static float   AmmoMass = 50.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = false;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 100; // ms
  final static int  FirePeriodRandAdd = 0;   // ms
//  int  FirePeriod2         = 500; // ms   
  final static boolean BurstFire      = true;
  final static int  BurstTime         = 1000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 30; // ms
  final static int  BurstDelayRandAdd = 10; // ms

  final static Array GunSpecificFireMask = [
                                [["STRUCTURE"],[]], //  high priority mask: RestrictTo, Exclude
                                [["GROUND","HUMAN"],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 1000;     //1
  final static int     AutoRepeatDelay  = 100;
}

class CJu87_B2AirBehavior extends CBaseAirCraftBehavior
{

  int      AttackStyle        = AttackStyle_NonStop;     
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true;     //
  boolean CanFireInMove  = true;

  // *** radar parameters

  float MaxRadarDistance = 1250.0; // m
  float MinRadarDistance = 90.0;    // m
  float MaxRadarAngle    = 10.0;

  int    UpdateRadarPeriod        = 500; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms

  float   AttackDistanceMin = 280.0;
  float   AttackDistanceMax = 1000.0;
  float   FlyingHeight = 494.0;      //   495
  float   StealthHeight = 1226.0;
  float   FlyingHeightMin = 44.0;
  // *** movement physical parameters

  // physical limitations
  float  MinRotateRadius = 280;
  float  CeilingByZ = 5500.0;    // max flying height
  float  MinSpeed   = 89.99;       // min flying speed
  // physical limitations
  Vector  MaxSpeed                      = new Vector( 199.99, 0.0, 0.0);   // m/s

}

class CJu87_B2Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(0.0, 0.0, 1.0);
  float  Friction         = 1.0;
  float  Friction1        = 1.0;
  float  Elasticity       = 3.0;
  Vector GravityAccelerate    = new Vector(0.0, 0.0, -10.0);
}

class CJu87_B2Unit
  extends CUnit
{

  final static float DefaultHitPoints = 360;     //CHitPoints::FW190UnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_AIR;

  final static String DefaultSurfaceControl = "None";
  //static Array  LandingJoints = [];
//  SetupLandingControl("WHL_FL", "WHL_Rear", "WHL_FR");

//  static String PrevExplosionID                = "FW190Explosion";
  static String PostExplosionID                = "FireBombExplosion";
  static String PostDeathEffect                = "FireBombExplosionEffect";
  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["AIR", "AIRPLANE", "GER"];
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  // =======================================
  // Contruction and initialization
  // =======================================

  void CJu87_B2Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_air_Ju87_B2Model>(), [0]); //  500, 200, 100, 50, 7

    SetMovementEffects(
        new #Emitter<CPlaneMovementSound>(),
        []
      );

    //$TMP WEAPON

    SetupWeapon("Weapon_A", new #Weapon<CJu87_B2BombDropper>(),["Bomb1"],null);

    SetupWeapon("Weapon_B", new #Weapon<CJu87_B2BombDropperB>(),["Bomb2","Bomb5","Bomb4","Bomb3"],null);


    SetupWeapon("gun_left", new #Weapon<CJu87_B2MachineGun>(),["Fire_gunleft1"],null);
    SetupWeapon("gun_right", new #Weapon<CJu87_B2MachineGun>(),["Fire_gunright1"],null);

/*
    // init and register weapon
    
    Component Weapon =  new #Weapon<CJu87_B2BombDropper>();
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);    
    

    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);
                                                               */

    SetupBehavior(new #VehicleBehavior<CJu87_B2AirBehavior>());

 /* void SetupPhysicsController()
 //   {
        Component Mesh = GetMeshComponent();
        Component Joint = Mesh.GetJoint("Body");
        Mesh.UnlinkJoint(Joint);
        Component PhysicsController = new #ObjectPhysicsController();
        loadFromScript(PhysicsController, "CMetalSubstance");

        PhysicsController.SetEventHandler(this);
        PhysicsController.SetMass(500.0f);
        setSlaveObject(PhysicsController, Joint);

        Vector Sizes = getBoundingSize(Joint);
        PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);
        RegisterObject("PhysicsController", PhysicsController);

        Array Shapes = Mesh.GetCollisionShapes(Joint, false);
        boolean IsValidBody = PhysicsController.CreateRigidBody("Body", Joint, Shapes);
        if (IsValidBody)
          PhysicsController.SetFixedBody("Body", true);

        //addClassificator(Joint, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
        PhysicsController.SetIsectionModeAsSkipContacts();
//        PhysicsController.CreateTouchTrigger(_DestroyEnergy);

        PhysicsController.EnableControl(false);
        PhysicsController.Activate(true);       

    //}  */
  }

  void Construct(
    Component _Mission,
    Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.1);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.1);

    //SetupPhysicaleObject("CJu87_B2Substance", 10000.0, 0.0);

  }

}


