//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

// Unit Explosion
class CSAUStuG40Explosion
  extends CHeavyTankExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
}

// Main cannon section
// Main cannon animator
class CSAUStuG40GunTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  10.0;
  float  RightEndAngle  = -10.0;
  float  TopEndAngle    = -8.0;//-20.0;
  float  BottomEndAngle =  20.0;//6.0;
}
// Main cannon bullet explosion
class CSAUStuG40GunCalibreBulletExplosion
  extends CGunPak40GunCalibreBulletExplosion
{
}

class CSAUStuG40GunSubcalibreBulletExplosion
  extends CGunPak40GunSubcalibreBulletExplosion
{
}

class CSAUStuG40GunHEBulletExplosion
  extends CGunPak40GunHEBulletExplosion
{
}

class CSAUStuG40GunCalibreBulletControl
  extends CGunPak40GunCalibreBulletControl
{
  float     MaxDistance           = CPiercing::SAUStuG40CalibreMaxDistance;
  float     PenetrationPower      = CPiercing::SAUStuG40CalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::SAUStuG40CalibrePenetrationByDistance;
}

class CSAUStuG40GunSubCalibreBulletControl
  extends CGunPak40GunSubCalibreBulletControl
{
  float     MaxDistance           = CPiercing::SAUStuG40SubcalibreMaxDistance;
  float     PenetrationPower      = CPiercing::SAUStuG40SubcalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::SAUStuG40SubcalibrePenetrationByDistance;
}

class CSAUStuG40GunHEBulletControl
  extends CGunPak40GunHEBulletControl
{
}

class CSAUStuG40CalibreAmmo
{
  final static String BulletPatternId = "GunPak40GunCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HUMAN", "VEHICLE", "AIR"]];
  final static float  LoadingTime     = 6.0f;

  // Cockpit UI parms
  final static WString UIName         = CWeaponNames::str_T34_44CalibreAP_ShortName;
  final static String  Material       = "TankShell";
  final static String  StatusMaterial = "TankShellFill";
}

class CSAUStuG40SubCalibreAmmo
{
  final static String BulletPatternId = "GunPak40GunSubCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HUMAN", "VEHICLE", "BLD_WAR", "BLD_CIV", "ANTITANK", "AIR"]];
  final static float  LoadingTime     = 6.0f;

  // Cockpit UI parms
  final static WString UIName         = CWeaponNames::str_T34_44SubCalibreAP_ShortName;
  final static String  Material       = "TankShell";
  final static String  StatusMaterial = "TankShellFill";
}

class CSAUStuG40HEAmmo
{
  final static String BulletPatternId = "GunPak40GunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HEAVYTANK", "TANK"]];
  final static float  LoadingTime     = 6.0f;

  // Cockpit UI parms
  final static WString UIName         = CWeaponNames::str_T34_44CalibreHE_ShortName;
  final static String  Material       = "TankShell";
  final static String  StatusMaterial = "TankShellFill";
}

// Main cannon properties
class CSAUStuG40Gun
    extends CHeavyGun, CWeaponFireRecoil
{
  String CloudEffectId   = "HeavyGunMuzzleCloudEffect";
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 0.02;
  Vector GravityVector   = CPiercing::ShellGravityVector;
  final static boolean HighTrajectory  = false;

  final static String BulletPatternId = "";
  final static String FireSoundId     = "StuG40GunFireSound";

  final static boolean CanFireInMove  = true;

  final static Array Ammo = [
                              new CSAUStuG40CalibreAmmo(),
                              new CSAUStuG40SubCalibreAmmo(),
                              new CSAUStuG40HEAmmo()
                            ];

  //$TMP TEST DATA
  final static Array AmmoTargetUse    = [
                                          //HEAVYTANK
                                          [0, [["HEAVYTANK"],[]], [[100.0, 90.0, 3000.0, 90.0], [[1000.0, 100.0], [1500.0, 100.0]]]],
                                          [1, [["HEAVYTANK"],[]], [[100.0, 100.0, 3000.0, 100.0], [[1000.0, 100.0], [1500.0, 100.0]]]],
                                          //TANK
                                          [0, [["TANK"],     []], [[500.0, 90.0, 3000.0, 90.0], [[1000.0, 85.0], [1500.0, 95.0]]]],
                                          [1, [["TANK"],     []], [[500.0, 100.0, 3000.0, 100.0  ], [[1000.0, 100.0], [1500.0, 100.0]]]],                                          
                                           //Guns
                                          [0, [["ANTITANK"],[]], [[100.0, 80.0, 2000.0, 80.0], [[1000.0, 80.0], [1500.0, 80.0]]]], //Need to unlock(temp)
                                          [2, [["ANTITANK"],[]], [[100.0, 88.0, 2000.0, 88.0], [[1000.0, 88.0], [1500.0, 88.0]]]], //Need to unlock(temp)
                                          //VEHICLE
                                          [2, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 60.0], [[1000.0, 70.0], [1500.0, 60.0]]]],
                                          //HUMAN
                                          [2, [["HUMAN"],    []], [[500.0, 25.0, 1500.0, 0.0],   [[1000.0, 0.0]]]],
                                          //BLD_WAR
                                          [0, [["BLD_WAR"],  []], [[500.0, 30.0, 1000.0, 30.0], []]],
                                          [2, [["BLD_WAR"],  []], [[500.0, 40.0, 1000.0, 4.0  ], []]],
                                          //BLD_CIV
                                          [2, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 70.0], []]]
                                        ];

  final static float  LockAngleHMin    = -10.0;
  final static float  LockAngleHMax    =  10.0;
  final static float  LockAngleVMin    = -8.0;
  final static float  LockAngleVMax    =  20.0;
  final static float  BlockedLockAngle =  4.0;

  final static float DirectionSpeedH  = 3.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 1.0; // deg / sec  • vertical

  Component DirectionSoundH  = new #Emitter<CTankMediumTurretDirectionSoundV>();
  Component DirectionSoundV  = new #Emitter<CTankMediumTurretDirectionSoundV>();

  final static int     Ammunition     = 2000;        // wrong value

  //final static float MinDistance      = 1;
  //final static float MaxDistance      = 400;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 7000; // ms
  final static int  FirePeriodRandAdd = 500; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 3000; // ms
  final static int  BurstDelayRandAdd = 2000; // ms

  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], // high priority mask: RestrictTo, Exclude
                                [[],[]],  // low priority mask
                                [[],[]]  // very-very low priority target with a pulley in the middle
                              ];
  Component FireAnimator = new #LineAnimator<CSAUStuG40FireAnimation>();
}

class CSAUStuG40BaseTrack
{
  String  JointName           = "";
  String  TrackTexName        = "Textures/u_veh_StuG40_track.tex";
  String  WheelAnimName       = "";

  Array   TrackTexScrollScale = [0.0, -0.4];
  float   WheelRotateScale    = 0.05;
  float   RealTrackPathScale  = 2.0f;
  boolean IsLeftTrack;

  float   WheelRadius         = 0.195 + 0.047; // whell radius + track radius
  float   WhellLiftDown       = 0.081;         // max down wheel offset
  float   WhellLiftUp         = 0.048;         // max up wheel offset

  // Collision mask [restrict], [exclude]
  Array   CollisionMask = [[CLASSIFICATOR_WALK_SURFACE], []];
}

class CSAUStuG40LeftTrack
  extends CSAUStuG40BaseTrack
{
  String  JointName     = "TrackLeft";
  String  WheelAnimName = "wheels_left";
  boolean IsLeftTrack = true;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelLeftMain_0", "L_wheels00_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_1", "L_wheels01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_2", "L_wheels02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_3", "L_wheels03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_4", "L_wheels04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelLeftMain_5", "L_wheels05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

class CSAUStuG40RightTrack
  extends CSAUStuG40BaseTrack
{
  String  JointName     = "TrackRight";
  String  WheelAnimName = "wheels_right";
  boolean IsLeftTrack   = false;

  Array   WhellsAnimation =
  [
    // joint name,            animation name,            down    up
    //
    ["WheelRightMain_0", "R_wheels00_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_1", "R_wheels01_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_2", "R_wheels02_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_3", "R_wheels03_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_4", "R_wheels04_lift", WhellLiftDown, WhellLiftUp, WheelRadius],
    ["WheelRightMain_5", "R_wheels05_lift", WhellLiftDown, WhellLiftUp, WheelRadius]
  ];
}

// Fire Animator
class CSAUStuG40FireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 0.7;
}

// Behavior
class CSAUStuG40BehaviorParams extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 4.0;
  float   CollisionAddRadius = 7.0;                                   // ***** CHANGED 11-13-08
}

class CSAUStuG40Behavior extends CBaseSAUBehavior
{
  final static Component SpecParams = new CSAUStuG40BehaviorParams();

  Array EnemyRankDangerByDistance =  [
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0, 200.0, 2500.0, 100.0 ], [ [1400.0, 150.0] ] ] ],
                                       [[ ["ANTITANK"],[] ],  [ [ 0.0, 150.0, 2500.0, 100.0 ], [ [1400.0, 150.0] ] ] ], // [ Mask, PiercLinFunctionByDist]
                                       [[ ["TANK"],[] ],      [ [ 0.0, 150.0, 2500.0, 100.0 ], [ [1400.0, 140.0] ] ] ],
                                       [[ ["BTR"],[] ],       [ [ 0.0, 130.0, 1500.0, 30.0 ], [ [400.0, 125.0] ] ] ],
                                       [[ ["BLD_WAR"],[] ],   [ [ 0.0, 100.0, 1500.0, 35.0 ], [ [400.0,  80.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  10.0, 1000.0, 5.0 ],  [ [400.0,  10.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0,  35.0, 1000.0, 2.0 ],  [ [400.0,   5.0] ] ] ],
                                       [[ ["AIR"],[] ],            [ [ 0.0,   0.0, 1500.0, 0.0 ],  [ [400.0,   0.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask

  int      AttackStyle        = AttackStyle_SAU;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean  ForceFrontInAttack = true;

  float   CollisionRadius = 8.5;        //
  float   AttackDistanceMin =  100.0;                        // ***** CHANGED 11-13-08
  float   AttackDistanceMax = 2000.0;

  // *** radar parameters

  float MaxRadarDistance = 2000.0; // m                           // ***** CHANGED 11-13-08
  float MinRadarDistance = 0.5;    // m
  float MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 3000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms

  // *** movement physical parameters

  // physical limitations
  float   MaxRotateSpeed                = 2.0f;
  Vector  MaxSpeed                      = new Vector( 7.5, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 6.4, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.8, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 1.5, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 2.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 3.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 1.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 2.0); //1);  // [rad/(s*s)]
  
  float  MinRotateRadius = 0; // unit can turn when staying
  // Router parameters

}

// ================================================
// Device classes
// ================================================

class CSAUStuG40HullDriverDevice
  extends CHullDriverDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet";

  void HullDriverDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 300);
    }
  }

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 0);
    }
  }
}

class CSAUStuG40HullGunlayerDevice
  extends CHullGunlayerDevice
{
  String m_NormalSetId  = "Body_NormalSet";
  String m_CrashedSetId = "Body_CrashedSet";

  void HullGunlayerDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 20);
      Behavior.SetFireAbility(false,40);
    }
  }

  void HullGunlayerDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
//       Behavior.SetMoveAbility(false,600);
      Behavior.ActivateMovement(false);
     Behavior.ActivateFire(false);
    }
    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackLeft").Index, 0.0, 0);

      if (1 == randnum(2))
        StateControl.SetDelayItemHP(_HostObject.GetItem("TrackRight").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 0);

      StateControl.SetDelayItemHP(_HostObject.GetItem("Turret_A").Index, 0.0, 0);

      StateControl.SetHitPoints(0.0);
    }

    }
}

class CSAUStuG40HullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "";//"Body_NormalSet";
  String m_CrashedSetId = "";//"Body_CrashedSet";

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 300);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {

    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      // Change Item hit points after delay in N seconds. SetDelayItemHP(ItemIndex, HitPoints, Time)
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullGunlayer").Index, 0.0, 10);
      StateControl.SetHitPoints(0.0);
    }
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
      Behavior.SetMoveAbility(false, 0);
/*
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(_HostObject));
       if(Object != null)
       {
         Object.OnLifeStateChanged(false);
       }
    }
 */
  }
}

class CSAUStuG40TrackLeftDevice
  extends CTrackLeftDevice
{
  String m_NormalSetId  = "TrackLeft_NormalSet";
  String m_CrashedSetId = "TrackLeft_CrashedSet";

  void TrackLeftDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
      Behavior.SetMoveAbility(false, 300);
    }
  }

  void TrackLeftDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(1.5f);
//       Behavior.SetMoveAbility(false, 0);
   Behavior.ActivateMovement(false);
    }
  }
}

class CSAUStuG40TrackRightDevice
  extends CTrackRightDevice
{
  String m_NormalSetId  = "TrackRight_NormalSet";
  String m_CrashedSetId = "TrackRight_CrashedSet";

  void TrackRightDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
      Behavior.SetMoveAbility(false, 300);
    }
  }

  void TrackRightDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetBrakeAngle(-1.5f);
     // Behavior.SetMoveAbility(false, 0);
      Behavior.ActivateMovement(false);
    }
  }
}

class CSAUStuG40TurretDevice
  extends CTurretDevice
{
  String m_NormalSetId  = "Turret_A_NormalSet";
  String m_CrashedSetId = "Turret_A_CrashedSet";

  void TurretDeviceDamaged(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetMoveAbility(false, 60);
      Behavior.SetAimAbility(false, 0);
    }

  }

  void TurretDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetFireAbility(false, 0);
      Behavior.SetAimAbility(false, 0);
    }
    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    }

  }
}

class CSAUStuG40RecoilController
{
  String FToBAnim   = "body_recoil_bf";
  String BToFAnim   = "body_recoil_fb";
  String RToLAnim   = "body_recoil_rl";
  String LToRAnim   = "body_recoil_lr";
  float  RecoilTime = 0.5;
};

class CSAUStuG40Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 1.2;
  float  Friction1        = 1.5;
  float  Elasticity       = 0.0;
}

class CSAUStuG40ManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 40000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.01;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.1;

  float  SuspensionHeight = 0.3;    // cm
  float  SuspensionPower  = 30000;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}

// ================================================
// Unit class
// ================================================

class CSAUStuG40Unit
    extends CTankUnit, CWeaponConfig, CPushVehicleObject
{
  final static float  DefaultHitPoints = CHitPoints::SAUSU_85UnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_LIGHT_TANK;

  static Array PostExplosionID = [
                                    ["", "SAUStuG40Explosion"]
                                 ];
  static Array Hatches = [
                            [ "Commander",     "LukMainOpen",        1.0 ],
                            [ "Luk_Commander", "luk_main_commander", 1.0 ]
                         ];

  static Array HatchesStates = [
                                  [ "Normal", [  [ "Commander", 1.0 ], [ "Luk_Commander", 1.0 ] ] ],
                                  [ "Attack", [  [ "Commander", 0.0 ], [ "Luk_Commander", 0.0 ] ] ]
                               ];

  final static String DefaultHealthParameter = "HP_HEALTHY";  // fragile constitution
  final static int    UnitMenacePower        = MENACE_NORMAL;  // light weapon
  final static Array  AutomaticClassificators  = ["GROUND", "TANK", "SAU", "GER"];
  static Array        LandingJoints            = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

  static Array  SubstanceArmourWidth = [
                                         [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                                         [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                                         [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                                         [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                                         [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                                         [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                                         [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                                         [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUStuG40UnitArmourHullTOP    ],
                                         [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUStuG40UnitArmourHullBOTTOM ],
                                         [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                                         [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                                      ];

 Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullDriver", "HullEngine", 0.7f],
                             ["HullDriver", "HullGunlayer", 0.8f]
                             ];

  boolean m_AITankCollisionShape = true;

  void CSAUStuG40Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_SAU_Stug40Model>(), [400, 270, 50, 5]);

    // Setup trucks      
    SetupTracks(
        new #TrackAnimator<CSAUStuG40LeftTrack>(),
        new #TrackAnimator<CSAUStuG40RightTrack>()
      );

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CSAUStuG40Gun>(),
      ["Fire_A1"], new #TargetingAnimator<CSAUStuG40GunTargetingAnimatorA>());

      Component hatches = new #HatchesStateController();
      hatches.AddHatches( Hatches );
      hatches.AddStates( HatchesStates );
      SetupHatches( hatches );
      hatches.SetHatchesState( "Normal" );

    // Creates and register unit state component
    // MoveSound, TraceEffectId
    SetMovementEffects(
        new #Emitter<CT34MovementSound>(),
        [
          ["Vapor_L", "GroundUnitTraceEffect"],
          ["Vapor_R", "GroundUnitTraceEffect"],
          ["Smoke_R", "PetrolSmokeEffect"],
          ["Smoke_L", "PetrolSmokeEffect"]
        ]
      );

    SetIdleEffects(
        new #Emitter<CTankPzIVGIdleSound>()
      );

    SetAccelEffects(
        new #Emitter<CTankPzIVGAccelSound>(),
        [
          ["Smoke_R", "PetrolAccelSmokeEffect", new Vector (0.0, 0.0, 0.0)],
          ["Smoke_L", "PetrolAccelSmokeEffect", new Vector (0.0, 0.0, 0.0)]
        ]
      );

    SetupBehavior( new #VehicleBehavior<CSAUStuG40Behavior>());
  }
  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }
  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127, 0.0f);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_L", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_R", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_L", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_R", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_L", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_R", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_L", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_R", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );



    CreateUnitItem(
        "HullDriver",
        CJointPoints::TankPzIVAusfGUnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullGunlayer",
        CJointPoints::TankPzIVAusfGUnitHULL_GUNLAYERPoints,
        ["GenericDamageItemEffect", "HullGunLayerExplosionEffect"],
        "HullGunlayer"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TankPzIVAusfGUnitHULL_ENGINEPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullEngine"
      );
    CreateUnitItem(
        "TrackLeft",
        CJointPoints::TankPzIVAusfGUnitTRACK_LEFTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackLeft"
      );
    CreateUnitItem(
        "TrackRight",
        CJointPoints::TankPzIVAusfGUnitTRACK_RIGHTPoints,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "TrackRight"
      );
    CreateUnitItem(
        "Turret_A",
        CJointPoints::TankPzIVAusfGUnitTURRETPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "Turret_A"
      );
    CreateUnitItem(
        "Turret_A_crashed",
        0,
        ["GenericDamageItemEffect", "GenericDamageItemEffect"],
        "Turret_A_crashed"
      );

    logWarning( "Weapon fire deviation for " + getIdentificator( this ) + "=" + new String( GetObject( "Weapon_A" ).FireDeviation ) );

    LinkDeviceToUnitItem("HullDriver",   new CSAUStuG40HullDriverDevice());
    LinkDeviceToUnitItem("HullGunlayer", new CSAUStuG40HullGunlayerDevice());
    LinkDeviceToUnitItem("HullEngine",   new CSAUStuG40HullEngineDevice());
    LinkDeviceToUnitItem("TrackLeft",    new CSAUStuG40TrackLeftDevice());
    LinkDeviceToUnitItem("TrackRight",   new CSAUStuG40TrackRightDevice());
    LinkDeviceToUnitItem("Turret_A",     new CSAUStuG40TurretDevice());

    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(0.6, 0.0, 0.0));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(0.6, 0.0, 0.0));
    AttachEffect2("Vapor_L", "PzIVGTrackEffect", new Vector(-0.6, 0.0, 0.0));
    AttachEffect2("Vapor_R", "PzIVGTrackEffect", new Vector(-0.6, 0.0, 0.0));

    SetupRecoilController(new #RecoilController<CSAUStuG40RecoilController>());

    CreateCollisionControl("CBaseCollisionControl");

    Component VehicleController = new #AITankVehicle<CSAUStuG40ManualControl>();


    if (null == VehicleController)
    {
      logError("Cant setup type of vehicle control for " + getIdentificator(this));
    }

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    Component Mesh = GetMeshComponent();

    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CSAUStuG40Substance", 40000.0, 0.0);
      EnableSurfaceControl(true);
    GetLeftTrack().EnableAutoCalcPath(true);
    GetRightTrack().EnableAutoCalcPath(true);
  
  }

//    Component VehicleController = GetPhysicsController();
  // ======================================
  // Armour descriptor
  // ======================================
  Array GetArmourDescriptor()
  {
    return new Array ([
                        [CMaterialStructure::MSID_ArmourTurretFWD,   CArmourPoints::SAUStuG40UnitArmourTurretFWD  ],
                        [CMaterialStructure::MSID_ArmourTurretREAR,  CArmourPoints::SAUStuG40UnitArmourTurretREAR ],
                        [CMaterialStructure::MSID_ArmourTurretTOP,   CArmourPoints::SAUStuG40UnitArmourTurretTOP  ],
                        [CMaterialStructure::MSID_ArmourTurretLEFT,  CArmourPoints::SAUStuG40UnitArmourTurretLEFT ],
                        [CMaterialStructure::MSID_ArmourTurretRIGHT, CArmourPoints::SAUStuG40UnitArmourTurretRIGHT],
                        [CMaterialStructure::MSID_ArmourHullFWD,     CArmourPoints::SAUStuG40UnitArmourHullFWD    ],
                        [CMaterialStructure::MSID_ArmourHullREAR,    CArmourPoints::SAUStuG40UnitArmourHullREAR   ],
                        [CMaterialStructure::MSID_ArmourHullTOP,     CArmourPoints::SAUStuG40UnitArmourHullTOP    ],
                        [CMaterialStructure::MSID_ArmourHullBOTTOM,  CArmourPoints::SAUStuG40UnitArmourHullBOTTOM ],
                        [CMaterialStructure::MSID_ArmourHullRIGHT,   CArmourPoints::SAUStuG40UnitArmourHullRIGHT  ],
                        [CMaterialStructure::MSID_ArmourHullLEFT,    CArmourPoints::SAUStuG40UnitArmourHullLEFT   ]
                      ]);
  }

  event void SetModelViewState(
      boolean _State
    )
  {
    // TMP
  }
}


