//-------------------------------------------------------------------
/*
  Array  Animation = [
        ["prop_rotate", ["Rotor", 0, 10]]
    ];
*/
//-------------------------------------------------------------------
class CIL2UnitExplosion
  extends CAirVehicleExplosion
{
  float  Damage   = 50.0;
  float  Radius   = 10.0;
}

class CIL2AirBombExplosion
  extends CAirBombExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 250;
  float  FireDamage   = 250;
  float  Radius = 15;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}

class CIL2AirBombControl
  extends CBombControl
{
  String    ExplosionId  = "GunML20_152mmGunHEBulletExplosion";      //  IL4_Med_BomberAirBombExplosion AirBombExplosion
  Component BulletRender = new #AnimatedObject<Cwpn_Bomb_Fab50Model>(); //Cwpn_Bomb_Fab250Model $TMP should be changed to correct model when it'll be done
  String  TraceEffectId    = "";
  CIL2AirBombControlB()
  {
    BulletRender.SetLods([ 1 ]);
  }
  //String  TraceEffectId    = "LightMissileTraceEffect";

  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}

class CIL2BombDropper
  extends CHeavyGun //  CAnyWeapon CLightGun
{
  final static float  InitBulletSpeed = 0.0;
  final static float  FireDeviation   = 0.60;

 // final static Vector GravityVector   = CWorldPhysics::GravityVector;       new Vector(0.0, 0.0, -12.0)
 // final static Vector GravityAccelerate    = CWorldPhysics::GravityVector; // new Vector(1.0, 0.0, 10.0)
  final static String  BulletPatternId  = "IL2AirBomb";   //  IL4_Med_BomberAirBomb
  //$tmp - keep fire effects for debug propose
  String    FireEffectId    = null;   //
  String    CloudEffectId   = null; //              
  final static String    FireSoundId     = null;

  final static int     Ammunition       = 5;            //2
  final static int     TargetCameraFilter = ETC_FILTER_TV;

  final static float   AmmoMass = 50.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = false;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 100; // ms
  final static int  FirePeriodRandAdd = 0; // ms

  final static boolean BurstFire      = true;
  final static int  BurstTime         = 1200; // ms
  final static int  BurstTimeRandAdd  = 10; // ms

  final static int  BurstDelay        = 1000; // ms
  final static int  BurstDelayRandAdd = 100; // ms

  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], //  high priority mask: RestrictTo, Exclude
                                [["HUMAN"],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 1000;  //
  final static int     AutoRepeatDelay  = 100;
}

class CIL2AirBehavior extends CBaseAirCraftBehavior
{

  int      AttackStyle        = AttackStyle_NonStop;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean CanFireInMove       = true;
  //boolean  ForceFrontInAttack = true;   
 // float  MinRotateRadius = 0; // unit can turn when staying
  // *** radar parameters

  float MaxRadarDistance = 1800.0; // m
  float MinRadarDistance = 400.0;    // m
  float MaxRadarAngle    = 120.0;

  int    UpdateRadarPeriod        = 1500; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms
  
  float   AttackDistanceMin = 176.0;
  float   AttackDistanceMax = 600.0;
  float   FlyingHeight = 424.0;
  float   StealthHeight = 866.0;
  float   FlyingHeightMin = 6.0;
  // *** movement physical parameters

  // physical limitations
  float  MinRotateRadius = 340;
  float  CeilingByZ = 3000.0;    // max flying height
  float  MinSpeed   = 29.99;       // min flying speed
  // physical limitations
  Vector  MaxSpeed                      = new Vector( 199.99, 0, 0);   // m/s

}

class CIL2Unit
  extends CUnit
{

  boolean m_AITankCollisionShape = true;

  final static float DefaultHitPoints = CHitPoints::IL2UnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_AIR; //

  final static String DefaultSurfaceControl = "None";
  static Array  LandingJoints = [""];
 // static String PrevExplosionID = "CIL2UnitExplosion";

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["AIR", "AIRPLANE", "RU"];  //   "AIR",
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  // =======================================
  // Contruction and initialization
  // =======================================

  void CIL2Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_air_IL2Model>(), [0]);

    SetMovementEffects(
        new #Emitter<CPlaneMovementSound>(),
        []
      );
 /* 
    //$TMP WEAPON
         // init and register weapon    
    Component Weapon =  new #Weapon<CIL2BombDropper>();   // WeaponBase
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);    //

    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);   */
    
    SetupWeapon("MGBase", new #Weapon<CIL2Gun>(),"Fire_L1",["Fire_R1"],null); //    ,new #TargetingAnimator<CIL2GunTargetingAnimatorA>());

    SetupWeapon("Weapon_A", new #Weapon<CIL2BombDropper>(),["Bomb1", "Bomb2"],null); //

    SetupBehavior(new #VehicleBehavior<CIL2AirBehavior>());  
    
  }
  void Construct(
    Component _Mission,
    Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.1);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.1);

  }

}


