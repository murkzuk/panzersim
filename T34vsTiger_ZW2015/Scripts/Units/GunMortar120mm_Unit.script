//-------------------------------------------------------------------
/*
   Array  Animation = [
      ["gun_a", ["Weapon_A", 0, 20],["YLegs", 0, 20], ["Vert_Scew", 0, 20]],
      ["gun_a_recoil", ["Body", 0, 2]],
      ["turret_a", ["Turret_A", 0, 20]]
  ];

  Map    ConfigSets = new Map([
      [ "Body_NormalSet", [ "Body", "Turret_A" ] ],
      [ "Body_CrashedSet", [ "crashed" ] ]
    ]);
*/
//
//-------------------------------------------------------------------    /**/

class CGun120mmMortarFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 0.1;
} /*
class CGun120mmMortarExplosion      
  extends CUnitExplosion
{
  float  Damage   = 100.0;
  float  Radius   = 8.0;
  String SoundId  = "";
}   */

class CGun120mmMortarGunHEBulletExplosion
  extends CHEGun88BulletExplosion
{
  float  Damage   = CPiercing::Gun120mmMortarHEDamage;
  float  FireDamage   = CPiercing::Gun120mmMortarHEFireDamage;
  float  Radius = CPiercing::Gun120mmMortarHERadius;
  Component Debris = new CGun120mmMortarGunHEBulletDebrisCloud(); //

}

class CGun120mmMortarGunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::Gun120mmMortarHEDebrisQuantity;
  String DebrisPatternID = "TankT34_76_42GunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CGun120mmMortarGunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::Gun120mmMortarHEDebrisMaxDistance;
  String    ExplosionId   = "TankT34_76_42GunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGun120mmMortarGunHEBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::Gun120mmMortarHEDebrisDamage;
}
class CGun120mmMortarGunHEBulletControl
  extends CMortarControl   //               CHEBulletControl
{
  String    ExplosionId  = "TankT34_85_44GunHEBulletExplosion";
  float     BulletSpeed  = CPiercing::Gun120mmMortarHEBulletSpeed;
  Vector    GravityAccel =  new Vector( 0.0, 0.0, -20.0);        //     CPiercing::ShellGravityVector;
  float     MaxDistance           = CPiercing::Gun120mmMortarHEMaxDistance;
  float     PenetrationPower      = CPiercing::Gun120mmMortarHEPenetrationPower;
  Array     PenetrationByDistance = CPiercing::Gun120mmMortarHEPenetrationByDistance;
}

class CGun120mmMortarHEAmmo
{
  final static String BulletPatternId = "Gun120mmMortarGunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

class CGun120mmMortarTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 180.0;
  float  RightEndAngle  = -180.0;
  float  TopEndAngle    =  -25.0;
  float  BottomEndAngle =  25.0;
}

class CGun120mmMortarGun
  extends  CHeavyGun        //CAnyWeapon
{
  String CloudEffectId   = "HeavyGunFireNoMuzzleEffect";    //    HeavyGunNoMuzzleCloudEffect";
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 4.75;
  float  MinFireDeviation   = 2.75;
  // *** Gun parameters for behavior
  Vector GravityVector   =  new Vector( 0.0, 0.0, -20.5);        ////     CPiercing::ShellGravityVector;
  boolean SpecialWeapon  = false;
  final static boolean HighTrajectory  = false;
  final static String BulletPatternId = "Gun120mmMortarGunHEBullet";
  String    FireSoundId     = "HvyMortarGunFireSound";

  final static Array Ammo = [
                             new CGun120mmMortarHEAmmo()
                            ];

  final static float    LockAngleHMin     =  -180.0;
  final static float    LockAngleHMax     =  180.0;
  final static float    LockAngleVMin     =  -25.0;
  final static float    LockAngleVMax     =  25.0;
  final static float    BlockedLockAngle  =  0.0;

  final static float DirectionSpeedH  = 6.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 3.5; // deg / sec  • vertical




  // *** Gun parameters for behavior
  int  FirePeriod        = 6000;  // ms
  int  FirePeriodRandAdd = 1000;   // ms

  boolean BurstFire      = false;
  int  BurstTime         = 2000; // ms
  int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms

   final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], // low priority mask: RestrictTo, Exclude
                                [["HUMAN"],[]]
                                 ];          /* */
 Component FireAnimator = new #LineAnimator<CGun120mmMortarFireAnimation>();    // 
}

// Behavior

class CGun120mmMortarUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = false;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;
/*
  Array EnemyRankDangerByDistance =  [
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0, 200.0, 2500.0, 100.0 ], [ [1000.0, 150.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0, 150.0, 2500.0, 100.0 ], [ [1000.0, 140.0] ] ] ], // [ Mask, PiercLinFunctionByDist]
                                       [[ ["BTR"],[] ],       [ [ 0.0, 130.0, 2500.0, 90.0 ], [ [1000.0, 125.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0,  10.0, 2500.0, 85.0 ],  [ [1000.0,  100.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0,  35.0, 2500.0, 20.0 ],  [ [1000.0,   95.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask             

  // *** radar parameters    */

  float  MaxRadarDistance = 8000; // m
  float  MinRadarDistance = 100;    // m
  float  MaxRadarAngle    = 180.0;
  
  float   AttackDistanceMin = 100.0;
  float   AttackDistanceMax = 3200.0;

  int    UpdateRadarPeriod        = 9000; // ms
  int    UpdateRadarPeriodRandAdd = 3000; // ms

  static Array Mask        = [["", "CLASSIFICATOR_GROUND"], ["", ""]]; //


  // *** movement physical parameters

  // physical limitations
  Vector MaxSpeed = new Vector( -1.0, 0, 0);
  float  MinRotateRadius = 0; // unit can turn when staying
}


class CGun120mmMortarSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.1;
  float  Friction1        = 0.1;
  float  Elasticity       = 0.0;
}

class CGun120mmMortarUnit extends CUnit, CPushVehicleObject
{
  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  final static float DefaultHitPoints = CHitPoints::Gun120mmMortarUnitHitPoints; //-1;
  boolean   m_PassiveUnit           = true;

  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];

 static category UnitType = CLASSIFICATOR_T34_GUN;  //   

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "ANTITANK", "RU"];

  final static int    UnitMenacePower      = MENACE_GODZILLA;  // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["GroundLevel"];


    void CGun120mmMortarUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 0);
    }
     if (!m_Objectdestroyed)
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("Mortar dead");
   }                                              

  }
   event void SetModelLifeState(
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [false]);
  }/* */

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("120mmMortarUnit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;  //
      logWarning("120mm Mortar sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Pak40 have now HP = "+new String(HitPoints)+" and Pak40 has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);

      if (!m_Objectdestroyed)
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        logWarning("120mm Mortar destroyed"); //
      }       /*   */
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}


  // =======================================
  // Contruction and initialization
  // =======================================

  void CGun120mmMortarUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_120mmMortarModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGun120mmMortarGun>(),["Fire_A1"],new #TargetingAnimator<CGun120mmMortarTargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGun120mmMortarUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

  //  GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 10.0f);
  //  GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    10.0);


    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGun120mmMortarSubstance", 100.0*6, 0.1);
  }
}
