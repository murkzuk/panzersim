//-------------------------------------------------------------------
//
/*

  Array  Animation = [
      ["gun_a", ["Weapon_Base", 0, 1], ["THDTube", 0, 1], ["LongThd", 0, 1]],
      ["turret_a", ["TurretA", 0, 1]],
      ["gun_a_recoil", ["WeaponA", 0, 4]],
      ["hide_joints", [["Weapon1_Joint1", 0, 1], ["Weapon1_Joint2", 1, 2], ["Weapon1_Joint2", 2, 3], ["Weapon2_Joint2", 3, 4], ["Weapon3_Joint1", 4, 5], ["Weapon3_Joint1", 5, 6], ["Weapon4_Joint1", 6, 7], ["Weapon4_Joint1", 7, 8], ["Weapon5_Joint1", 8, 9], ["Weapon5_Joint2", 9, 10], ["Weapon6_Joint1", 10, 11], ["Weapon6_Joint2", 11, 12], ["Weapon7_Joint1", 12, 13], ["Weapon7_Joint2", 13, 14], ["Weapon8_Joint1", 14, 15], ["Weapon8_Joint2", 15, 16]]],
      ["show_joints", [["Weapon1_Joint1", 17, 18], ["Weapon1_Joint2", 17, 18], ["Weapon1_Joint2", 17, 18], ["Weapon2_Joint2", 17, 18], ["Weapon3_Joint1", 17, 18], ["Weapon3_Joint1", 17, 18], ["Weapon4_Joint1", 17, 18], ["Weapon4_Joint1", 17, 18], ["Weapon5_Joint1", 17, 18], ["Weapon5_Joint2", 17, 18], ["Weapon6_Joint1", 17, 18], ["Weapon6_Joint2", 17, 18], ["Weapon7_Joint1", 17, 18], ["Weapon7_Joint2", 17, 18], ["Weapon8_Joint1", 17, 18], ["Weapon8_Joint2", 17, 18]]],
      ["GunLock", ["Weapon_Base", 2, 3], ["THDTube", 2, 3], ["LongThd", 2, 3]],
      ["TurretLock", ["TurretA", 2, 3]],
      ["DoorLeft", ["Door_Left", 0, 1]],
      ["DoorRight", ["Door_Right", 0, 1]],
      ["wheels_rotate", ["WheelLeftFront", 0, 3], ["WheelRightFront", 0, 3], ["WheelLeftMain1", 0, 3], ["WheelLeftMain2", 0, 3], ["WheelRightMain1", 0, 3], ["WheelRightMain2", 0, 3]],
      ["wheels_turn", ["Shkvoren_L", 0, 2], ["Shkvoren_R", 0, 2], ["SterWHL", 0, 2]]
    ];

  Map    ConfigSets = new Map([
      [ "Body_CrashedSet", [ "Body_Crashed" ] ],
      [ "Body_NormalSet", [ "Body", "Body_attach"] ],
      [ "Damaged_CrashedSet", [ "Damaged_Crashed" ] ],
      [ "Damaged_NormalSet", [ "Bort", "Damaged" ] ],
      [ "Driver_CrashedSet", [ "Dead_Driver" ] ],
      [ "Driver_NormalSet", [ "Driver" ] ]

    ]);

*/
//
//-------------------------------------------------------------------/* */

// Unit Explosion
class CTruckUS6_BM13Explosion
  extends CHeavyTankExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
  float  AlarmRadius = 2.0f;
}

class CBM13KatyushaGunCalibreBulletExplosion
  extends CCalibreGun7576BulletExplosion
{
  float  Damage   = CPiercing::BM13KatyushaCalibreDamage;
  float  FireDamage   = CPiercing::BM13KatyushaCalibreFireDamage;
  float     Radius     = CPiercing::BM13KatyushaCalibreRadius;
  //Component Debris     = new CBM13KatyushaGunGunCalibreBulletDebrisCloud();
}

class CBM13KatyushaGunCalibreBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::BM13KatyushaCalibreDebrisQuantity;
  String DebrisPatternID = "CBM13KatyushaGunCalibreBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.0, 0.0, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CBM13KatyushaGunCalibreBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::BM13KatyushaCalibreDebrisMaxDistance;
  String    ExplosionId   = "BM13KatyushaGunCalibreBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CBM13KatyushaGunCalibreBulletDebrisExplosion
  extends CDebrisExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::BM13KatyushaCalibreDebrisDamage;
}

class CBM13KatyushaGunCalibreBulletControl
  extends CLightMissileControl //CCalibreBulletControl
{
  String    ExplosionId  = "BM13KatyushaGunCalibreBulletExplosion";
  Component BulletRender = new #AnimatedObject<Cwpn_BM13RocketModel>();
  String  TraceEffectId    = "LightMissileTraceEffect"; 
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::BM13KatyushaCalibreBulletSpeed;
  float     MaxDistance           = CPiercing::BM13KatyushaCalibreMaxDistance;
  float     PenetrationPower      = CPiercing::BM13KatyushaCalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::BM13KatyushaCalibrePenetrationByDistance;
}

class CBM13KatyushaGunCalibreAmmo
{
  final static String BulletPatternId = "BM13KatyushaGunCalibreBullet";
  final static int    Ammunition      = 16;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}

class CBM13KatyushaGun
  extends CLightLauncher  //CHeavyGun
{
  String CloudEffectId   = "LightLauncherCloudEffect"; // HeavyGunFireMuzzleEffect  LightLauncherCloudEffect 
//  String  FireEffectId   = "LightMissileFireEffect";
  float  InitBulletSpeed = 0.0;
  float  ShellSpeedDeviation = 0.0;
  float  FireDeviation   = 4.75;
  float  MinFireDeviation   = 2.85;
  String BulletPatternId = "BM13KatyushaGunCalibreBullet";
  final static Vector  GravityVector   = CPiercing::ShellGravityVector;

   void OnWeaponFire()
  {
  //  sendEvent(0.0f, SOID_MissionController, "HideJoint", []);

  }
/**/


  boolean HighTrajectory  = false;

  final static boolean   Sequenced = false;

  String    FireSoundId     = "KatyushaRocketFireSound";

  final static Array Ammo = [
                            new CBM13KatyushaGunCalibreAmmo()
                            ];

  //$TMP TEST DATA
/*  final static Array AmmoTargetUse    = [
                                          //HEAVYTANK
                                          [0, [["HEAVYTANK"],[]], [[500.0, 25.0, 2000.0, 100.0], [[1000.0, 40.0], [1500.0, 80.0]]]],
                                          //TANK
                                          [0, [["TANK"],     []], [[500.0, 35.0, 2000.0, 100.0], [[1000.0, 45.0], [1500.0, 90.0]]]],
                                          //VEHICLE
                                          [0, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 100.0], [[1000.0, 90.0], [1500.0, 100.0]]]],
                                          //HUMAN
                                          [0, [["HUMAN"],    []], [[500.0, 25.0, 1500.0, 0.0],   [[1000.0, 10.0]]]],
                                          //BLD_WAR
                                          [0, [["BLD_WAR"],  []], [[500.0, 90.0, 1000.0, 100.0], []]],
                                          //BLD_CIV
                                          [0, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 100.0], []]]  //,
                                        ];  */

  final static float    LockAngleHMin     = -12.0;
  final static float    LockAngleHMax     = 12.0;
  final static float    LockAngleVMin     = -2.5;
  final static float    LockAngleVMax     = 45.5;
  final static float    BlockedLockAngle  =  3.0;

  final static float DirectionSpeedH  = 1.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 1.0; // deg / sec  • vertical


  // *** Gun parameters for behavior


  int    UpdateRadarPeriod        = 10000; // ms
  int    UpdateRadarPeriodRandAdd = 500; // ms
  
  Component BurstFireSound  = "KatyushaRocketFireSound";

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 800; // ms
  final static int  FirePeriodRandAdd = 200; // ms

  final static boolean BurstFire      = true;
  final static int  BurstTime         = 1700; // ms
  final static int  BurstTimeRandAdd  = 100; // ms

  final static int  BurstDelay        = 100; // ms
  final static int  BurstDelayRandAdd = 100; // ms

/*  final static Array GunSpecificFireMask = [
                              ];   */

 //  Component FireAnimator = new #LineAnimator<CTruckUS6_BM13FireAnimation>();    

 }

class CBM13KatyushaGunTargetingAnimator
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 12.0;
  float  RightEndAngle  = -12.0;
  float  TopEndAngle    =  -2.5;  // 0.0 -
  float  BottomEndAngle =  45.5;
}

class CTruckUS6_BM13Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 1.4;
  float  Friction1        = 1.2;
  float  Elasticity       = 0.0;
}
/*
// Fire Animator     
class CTruckUS6_BM13FireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}
*/
// Movement animator
class CTruckUS6_BM13MovementAnimator
{
  String LineSpeedAnim = "wheels_rotate";
  String TurnSpeedAnim = "wheels_turn";

  boolean RotateAnim = true;

  float MaxLineSpeed = 3.0;            // speed when wheel make full animation per one sec == length of circle
  float MaxTurnSpeed = Math_HALFPI / 3.0;    // max angle in rotation mode
}

class CTruckUS6_BM13LeftDoorAnimator
{
  String AnimationName = "DoorLeft";
  float  AnimationTime = 1.0;
}
class CTruckUS6_BM13RightDoorAnimator
{
  String AnimationName = "DoorRight";
  float  AnimationTime = 1.0;
}
class CTruckUS6_BM13BortDoorAnimator
{
  String AnimationName = "DoorRight";   // Bort
  float  AnimationTime = 1.0;
}

// Behavior
class CTruckUS6_BM13BehaviorParams
extends CBaseBehaviorParams
{
  float   MaxAttackSpeed    = 5.0;
  float   CollisionAddRadius = 12.0;  

}

class CTruckUS6_BM13Behavior 
extends CBaseTruckBehavior  //, CBaseGroundBehavior
{
  final static Component SpecParams = new CTruckUS6_BM13BehaviorParams();

  boolean  CanMove   = true;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;
  boolean  ForceFrontInAttack = true;  //
  float    NonRotatableAngle = 12.0;    //
  final static boolean CanFireInMove  = false;
//   *radar parameters


  float MaxRadarDistance = 8000.0; // m
  float MinRadarDistance = 1000.0;   // m
  float MaxRadarAngle    = 30.0;

  float   AttackDistanceMin = 500.0; //
  float   AttackDistanceMax = 8000.0; //

  // physical limitations
  float   MaxRotateSpeed                = 3.0f;
  Vector  MaxSpeed                      = new Vector( 7.4, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 7.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.4, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.8, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 0.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 0.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 0.5); //1);  // [rad/(s*s)]

  float  MinRotateRadius = 4; // unit can turn when staying


}

// ================================================
// Device classes
// ================================================

class CTruckUS6_BM13HullDriverDevice
  extends CHullDriverDevice
{
  String m_NormalSetId  = "Driver_NormalSet";
//  String m_CrashedSetId = "Driver_CrashedSet";

  void HullDriverDeviceDestroyed(Component _HostObject)
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
//        Behavior.SetMoveAbility(false,600);
        Behavior.ActivateMovement(false);

    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(_HostObject));
       if(Object != null)
       {
       logWarning("TruckUS6_BM13 HullDriverDevice has been destroyed! Object component not eq null, sending 0.0 HP to HullEngine!");
       Object.SetUnitItemHPPercent("HullDriver", 0.0);
       }                                                    //
    }
  }
}
class CTruckUS6_BM13HullEngineDevice
  extends CHullEngineDevice
{
  String m_NormalSetId  = "Body_NormalSet";
//  String m_CrashedSetId = "Body_CrashedSet";

  void HullEngineDeviceDamaged(Component _HostObject)
  {
    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 15);
    }
  }

  void HullEngineDeviceDestroyed(Component _HostObject)
  {
    Component IdleSound = _HostObject.GetObject("IdleSound");
    if (IdleSound != null)
    {
      IdleSound.StopSoundPlaying(true);
    }

    Component MoveSound = _HostObject.GetObject("MoveSound");
    if (IdleSound != null)
    {
      MoveSound.StopSoundPlaying(true);
    }

    Component StateControl = _HostObject.GetObject("StateControl");
    if (StateControl != null)
    {
      StateControl.SetHitPoints(0.0);
    }
    Component Mission = new #GameController().GetObject(SOID_MissionController);
    if (Mission != null)
    {
       Component Object = Mission.GetObject(getIdentificator(_HostObject));
       if(Object != null)
       {
         Component StateControl = _HostObject.GetObject("StateControl");
         if (StateControl != null)
         {
            StateControl.SetDelayItemHP(_HostObject.GetItem("").Index, 0.0, 5);        // Damaged
         }

         Object.OnLifeStateChanged(false);
         Object.SetUnitItemHPPercent("HullDriver", 0.0);
       }
    }
  }
}
/*
class CTruckUS6_BM13DamagedDevice
  extends CBulkDevice
{
 // String m_NormalSetId  = "Damaged_NormalSet";
//  String m_CrashedSetId = "Damaged_CrashedSet";
  void BulkDeviceDestroyed(Component _HostObject) // called when destroyed  TurretDevice
  {
   // logWarning("ZiS - BULK Destroyed");
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
   {
      logWarning("TruckUS6_BM13 DamagedDevice - ActivateMovement false");
      Behavior.SetMoveAbility(false,0);
      Component StateControl = _HostObject.GetObject("StateControl");
      if (StateControl != null)

     {
          StateControl.SetDelayItemHP(_HostObject.GetItem("HullDriver").Index, 0.0, 0);
          StateControl.SetDelayItemHP(_HostObject.GetItem("HullEngine").Index, 0.0, 30);
     }
//        Behavior.ActivateMovement(false);
   }
  }
}
*/
// ================================================
// Unit class
// ================================================
class CTruckUS6_BM13Unit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::TruckUS6_BM13UnitHitPoints;

  final static String BodyJoint   = "Body";
  final static int    UnitMenacePower       = MENACE_KILLER;  // Heavy weapon
  
    static Array PostExplosionID = [
                                    ["", ""]
                                 ];

  static category UnitType = CLASSIFICATOR_T34_TRUCK;      //

  final static Array AutomaticClassificators  = ["GROUND","VEHICLE", "RU"];

  final static String DefaultSurfaceControl = "PutonGround";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

    Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullEngine", "HullDriver", 0.8f]

                             ];

  void CTruckUS6_BM13Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_TruckU6Studebaker_BM13Model>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon1", new #Weapon<CBM13KatyushaGun>(),
    "Fire1", ["Fire2", "Fire3", "Fire4", "Fire5", "Fire6", "Fire7", "Fire8"], new #TargetingAnimator<CBM13KatyushaGunTargetingAnimator>());
 


    SetMovementEffects(
        new #Emitter<CTruckZis5MovementSound>(),
        [
          ["Vapor_RL", "GroundUnitTraceEffect"],
          ["Vapor_RR", "GroundUnitTraceEffect"],
          ["Smoke",   "DiselSmokeEffect"]
        ]
      );

    SetIdleEffects(
        new #Emitter<CT34IdleSound>()

      );

    SetAccelEffects(
        new #Emitter<CT34AccelSound>(),
        [
          ["Smoke", "DiselAccelSmokeEffect"]
        ]
      );
    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CTruckUS6_BM13MovementAnimator>() );

    // Door animator
    SetDoorEffects(
        new #LineAnimator<CTruckUS6_BM13LeftDoorAnimator>(),
        new #LineAnimator<CTruckUS6_BM13RightDoorAnimator>()
          );

    SetupPhysicsController("PhysicsController", new #ObjectPhysicsController<CMetalSubstance>(), 10000.0);
//    CreateDestructibleRoot("PhysicsController");

    SetupBehavior( new #VehicleBehavior<CTruckUS6_BM13Behavior>());
  }

  event void ReloadAmmo()
  {

      Component Weapon = GetObject("Weapon1");
      Weapon.SetAmmoQuantity(0, CBM13KatyushaGunCalibreAmmo::Ammunition);
  }


  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_COLLISION_SHAPES, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);


    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );



    CreateUnitItem(
        "HullDriver",
        CJointPoints::TruckUS6_BM13UnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TruckUS6_BM13UnitHULL_ENGINEPoints,
        ["CGenericLargeFireEffect", "HullGunLayerExplosionEffect"],
        "HullEngine"
      );
    //  Getting Item ID for modificator
 /*  int DamagedID = CreateUnitItem(
        "Damaged",
        TruckUS6_BM13UnitDAMAGEDPoints ,
        ["GenericDamageItemEffect", "HE7576_85_88BulletArmourHitEffect"],
        "Damaged"
      );  */
    LinkDeviceToUnitItem("HullDriver",   new CTruckUS6_BM13HullDriverDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTruckUS6_BM13HullEngineDevice());
/*
    LinkDeviceToUnitItem("Damaged",      new CTruckUS6_BM13DamagedDevice());

    // Setting modificator for Item ID (UnitModificator * ItemModificator)
    GetDamageHandler().SetItemDamageTypeModifier( DamagedID,CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetItemDamageTypeModifier(
      DamagedID,
      CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,
      0.0);
 */
    SetupPhysicaleObject("CTruckUS6_BM13Substance", 3000.0, 0.0);
  }
  event void SetModelViewState(
      boolean _State
    )
  {
    // #TODO
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    //$LOG
 //   logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " OnSuccessTouchTrigger energy = " + new String(_Energy));
    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      StateControl.SetHitPoints(HitPoints);

      if (HitPoints <= 0.0)
        user.SetUnitItemHPPercent("HullEngine", 0.0);
    }

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    // play touch sound
    if(_Energy > MinEnergyToSound)
    (new #SoundsArray()).CreateSound("TankCollisionBtrLowSpeedSound", getPosition(this));

    Component Behavior = GetBehavior();
    if (null != Behavior)
    {
      Behavior.ActivateMovement(false);
      PhysicsController.EnableControl(true);
      //$HACK
      CurrentEventID = randnum(INT_MAX);
      if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
      {
        logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " enabling Behavior after 7 sec");
        sendEvent(3.0, getIdentificator(this), "OnBehaviorEnabled", [true, CurrentEventID]);
      }
    }

    Vector m_Point = new Vector(0.0, 0.0, 0.0);
    //PushTruck(_Energy*0.15, m_Point);
    PhysicsController.AppendExternalForce(m_Point, new Vector(0.1, 0.1, 0.2));
    logWarning("Push: " + new String(m_Point));
  }

  event void PushTruck(
      float _Energy,
      Vector _Point
    )
  {
   //   if(checkMask(this,[],[]))
   //   return;

    //SetSurfaceControl("None");
    /////////// KillHuman();

    Component PhysicsController = GetPhysicsController();
    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);

  // Vector Force = (new Vector(3.0f, 3.0f, 3.0f) - (getPosition(user).origin - _Point))/3.0f;
    Vector Force = (getPosition(user).origin - _Point);
    if (Force.x > 0)
      Force.x = 4.0 - Force.x/2;
    else
      Force.x = -4.0 + Force.x/2;

    if (Force.y > 0)
      Force.y = 4.0 - Force.y/2;
    else
      Force.y = -4.0 + Force.y/2;

    Force.z = 1.5f;
    Force.x = Force.x/3;
    Force.y =  Force.y/3;

    logWarning("MODForce X: " + new String(Force.x));
    logWarning("MODForce Y: " + new String(Force.y));


    PhysicsController.AppendExternalForce(Force, new Vector(0.1, 0.1, 0.2));
//    logWarning("Push: " + new String(Force));

             Component Behavior = GetBehavior();
    if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
    {
      PhysicsController.Activate(false);  //
      PhysicsController.EnableControl(false);     //
      logWarning(" PUSHTRUCK CLASSIFICATOR_DEAD_OBJECT   " );

        Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
    {
      logWarning("PUSHTRUCK ENABLE SurfaceControl  " );

      SurfaceControl.EnableSurfaceControl(true);
      PhysicsController.Activate(false);    //
      PhysicsController.EnableControl(false);   //
    }

    }
     logWarning("PUSHTRUCK END " );

  }
}


// ================================================
// WINTER_Unit class
// ================================================
class CTruckUS6_BM13_WUnit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::TruckUS6_BM13UnitHitPoints;

  final static String BodyJoint   = "Body";
  final static int    UnitMenacePower       = MENACE_KILLER;  // Heavy weapon
  
    static Array PostExplosionID = [
                                    ["", ""]
                                 ];

  static category UnitType = CLASSIFICATOR_T34_TRUCK;      //

  final static Array AutomaticClassificators  = ["GROUND","VEHICLE", "RU"];

  final static String DefaultSurfaceControl = "PutonGround";

  static Array  LandingJoints = ["Corner_FL", "Corner_RL", "Corner_RR", "Corner_FR"];

    Array m_DamageTransfer = [ // From Item , To Item, Item HitPoints Percent
                             ["HullEngine", "HullDriver", 0.8f]

                             ];

  void CTruckUS6_BM13_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_veh_TruckU6Studebaker_BM13_WModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon1", new #Weapon<CBM13KatyushaGun>(),
    "Fire1", ["Fire2", "Fire3", "Fire4", "Fire5", "Fire6", "Fire7", "Fire8"], new #TargetingAnimator<CBM13KatyushaGunTargetingAnimator>());
 


    SetMovementEffects(
        new #Emitter<CTruckZis5MovementSound>(),
        [
          ["Vapor_RL", "GroundUnitTraceEffect"],
          ["Vapor_RR", "GroundUnitTraceEffect"],
          ["Smoke",   "DiselSmokeEffect"]
        ]
      );

    SetIdleEffects(
        new #Emitter<CT34IdleSound>()

      );

    SetAccelEffects(
        new #Emitter<CT34AccelSound>(),
        [
          ["Smoke", "DiselAccelSmokeEffect"]
        ]
      );
    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CTruckUS6_BM13MovementAnimator>() );

    // Door animator
    SetDoorEffects(
        new #LineAnimator<CTruckUS6_BM13LeftDoorAnimator>(),
        new #LineAnimator<CTruckUS6_BM13RightDoorAnimator>()
          );

//    SetupPhysicsController("PhysicsController", new #ObjectPhysicsController<CMetalSubstance>(), 100.0);
//    CreateDestructibleRoot("PhysicsController");

    SetupBehavior( new #VehicleBehavior<CTruckUS6_BM13Behavior>());
  }

  event void ReloadAmmo()
  {

      Component Weapon = GetObject("Weapon1");
      Weapon.SetAmmoQuantity(0, CBM13KatyushaGunCalibreAmmo::Ammunition);
  }


  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [CLASSIFICATOR_WALK_SURFACE],
        [ CLASSIFICATOR_COLLISION_SHAPES, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    // create effects for tracks: [ HostId, Effectid, ZoneId ]
    SetTrackEffects(
        _Mission,
        [
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest02 , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest03   , "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Forest04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadForest, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush02, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush03, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_Bush04, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyLarge, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyRegular, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_ShrubberyCasual, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_SpecialLongAloneTree, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting01, "Right" ],
          ["Vapor_FL", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Left" ],
          ["Vapor_FR", "ForestUnitTraceEffect", CBaseZoneMap::ZMC_VillagePlanting02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass01, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass02, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass03, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_Grass04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad02, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad03, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_OffRoad04, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_Road01Add, "Right" ],
          ["Vapor_FL", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Left" ],
          ["Vapor_FR", "RoadUnitTraceEffect", CBaseZoneMap::ZMC_RoadObject, "Right" ],
          ["Vapor_FL", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Left" ],
          ["Vapor_FR", "GroundUnitTraceEffect", CBaseZoneMap::ZMC_AllPassable, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_Water01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_ShallowWater01, "Right" ],
          ["Vapor_FL", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Left" ],
          ["Vapor_FR", "TankWaterEffect", CBaseZoneMap::ZMC_BeachWater01, "Right" ]
        ]
      );



    CreateUnitItem(
        "HullDriver",
        CJointPoints::TruckUS6_BM13UnitHULL_DRIVERPoints,
        ["GenericDamageItemEffect", "GenericSmallFireEffect"],
        "HullDriver"
      );
    CreateUnitItem(
        "HullEngine",
        CJointPoints::TruckUS6_BM13UnitHULL_ENGINEPoints,
        ["CGenericLargeFireEffect", "HullGunLayerExplosionEffect"],
        "HullEngine"
      );
    //  Getting Item ID for modificator
 /*  int DamagedID = CreateUnitItem(
        "Damaged",
        TruckUS6_BM13UnitDAMAGEDPoints ,
        ["GenericDamageItemEffect", "HE7576_85_88BulletArmourHitEffect"],
        "Damaged"
      );  */
    LinkDeviceToUnitItem("HullDriver",   new CTruckUS6_BM13HullDriverDevice());
    LinkDeviceToUnitItem("HullEngine",   new CTruckUS6_BM13HullEngineDevice());
/*
    LinkDeviceToUnitItem("Damaged",      new CTruckUS6_BM13DamagedDevice());

    // Setting modificator for Item ID (UnitModificator * ItemModificator)
    GetDamageHandler().SetItemDamageTypeModifier( DamagedID,CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetItemDamageTypeModifier(
      DamagedID,
      CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,
      0.0);
 */
    SetupPhysicaleObject("CTruckUS6_BM13Substance", 3000.0, 0.0);
  }
  event void SetModelViewState(
      boolean _State
    )
  {
    // #TODO
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    //$LOG
 //   logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " OnSuccessTouchTrigger energy = " + new String(_Energy));
    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      StateControl.SetHitPoints(HitPoints);

      if (HitPoints <= 0.0)
        user.SetUnitItemHPPercent("HullEngine", 0.0);
    }

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    // play touch sound
    if(_Energy > MinEnergyToSound)
    (new #SoundsArray()).CreateSound("TankCollisionBtrLowSpeedSound", getPosition(this));

    Component Behavior = GetBehavior();
    if (null != Behavior)
    {
      Behavior.ActivateMovement(false);
      PhysicsController.EnableControl(true);
      //$HACK
      CurrentEventID = randnum(INT_MAX);
      if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
      {
        logWarning("[CPushVehicleObject]: " + getIdentificator(this) + " enabling Behavior after 7 sec");
        sendEvent(3.0, getIdentificator(this), "OnBehaviorEnabled", [true, CurrentEventID]);
      }
    }

    Vector m_Point = new Vector(0.2, 0.1, 0.1);
    //PushTruck(_Energy*0.15, m_Point);
    PhysicsController.AppendExternalForce(m_Point, new Vector(0.0, 0.0, 0.2));
    logWarning("Push: " + new String(m_Point));
  }

  event void PushTruck(
      float _Energy,
      Vector _Point
    )
  {
   //   if(checkMask(this,[],[]))
   //   return;

    //SetSurfaceControl("None");
    /////////// KillHuman();

    Component PhysicsController = GetPhysicsController();
    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);

   //Vector Force = (new Vector(3.0f, 3.0f, 3.0f) - (getPosition(user).origin - _Point))/3.0f;
    Vector Force = (getPosition(user).origin - _Point);
    if (Force.x > 0)
      Force.x = 4.0 - Force.x/2;
    else
      Force.x = -4.0 + Force.x/2;

    if (Force.y > 0)
      Force.y = 4.0 - Force.y/2;
    else
      Force.y = -4.0 + Force.y/2;

    Force.z = 1.5f;
    Force.x = Force.x/3;
    Force.y =  Force.y/3;

    logWarning("MODForce X: " + new String(Force.x));
    logWarning("MODForce Y: " + new String(Force.y));


    PhysicsController.AppendExternalForce(Force, new Vector(0.1, 0.1, 0.2));
//    logWarning("Push: " + new String(Force));

             Component Behavior = GetBehavior();
    if (checkMask(this, [], [CLASSIFICATOR_DEAD_OBJECT]))
    {
      PhysicsController.Activate(false);  //
      PhysicsController.EnableControl(false);     //
      logWarning(" PUSHTRUCK CLASSIFICATOR_DEAD_OBJECT   " );

        Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
    {
      logWarning("PUSHTRUCK ENABLE SurfaceControl  " );

      SurfaceControl.EnableSurfaceControl(true);
      PhysicsController.Activate(false);    //
      PhysicsController.EnableControl(false);   //
    }

    }
     logWarning("PUSHTRUCK END " );

  }
}

