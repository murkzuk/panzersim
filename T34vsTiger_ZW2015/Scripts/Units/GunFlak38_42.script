//-------------------------------------------------------------------
// 
/* 
   Array  Animation = [
      ["gun_a", ["WeaponBase", 0, 16],["HndWhl1", 0, 16], ["ScopeMnt", 0, 16]],
      ["gun_a_recoil", ["Weapon_A1", 0, 4]],
      ["turret_a", ["Turret_A1", 0, 16], ["HndWhl2", 0, 16]]
  ];

  Map    ConfigSets = new Map([]);
*/

//
//-------------------------------------------------------------------

class CGunFlak38_42FireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 0.1;
}

class CGunFlak38_42Explosion
  extends CUnitExplosion
{
  float  Damage   = 5.0;
  float  Radius   = 1.0;
  String SoundId  = "GunPak40ExplosionSound";
}

class CGunFlak38_42GunCalibreBulletExplosion
  extends CCalibreGunLtFlakBulletExplosion
{
  float  Damage   = CPiercing::TankPanzer_IICSUBCALIBREDamage;
  float  FireDamage   = CPiercing::TankPanzer_IICSUBCALIBREFireDamage;
  float     Radius     = CPiercing::TankPanzer_IICSUBCALIBRERadius;
  //Component Debris     = new CGunFlak38_42GunCalibreBulletDebrisCloud();
}

class CGunFlak38_42GunCalibreBulletDebrisCloud
{

}

class CGunFlak38_42GunCalibreBulletDebrisControl
{

}

class CGunFlak38_42GunCalibreBulletDebrisExplosion
  extends CBaseExplosion
{

}
/* */
class CGunFlak38_42GunSubcalibreBulletExplosion
  extends CCalibreGunLtFlakBulletExplosion//      CSubcalibreGun7576BulletExplosion
{
  float  Damage   = CPiercing::TankPanzer_IICSUBCALIBREDamage;
  float  FireDamage   = CPiercing::TankPanzer_IICSUBCALIBREFireDamage;
  float     Radius     = CPiercing::TankPanzer_IICSUBCALIBRERadius;
}

class CGunFlak38_42GunHEBulletExplosion
  extends CHEGun88BulletExplosion
{

}

class CGunFlak38_42GunHEBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunFlak88HEDebrisQuantity;
  String DebrisPatternID = "GunFlak88GunHEBulletDebris";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.8, 0.8, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}
class CGunFlak38_42GunHEBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunFlak88HEDebrisMaxDistance;
  String    ExplosionId   = "GunFlak88GunHEBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunFlak38_42GunHEBulletDebrisExplosion
  extends CBaseExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunFlak88HEDebrisDamage;
}
class CGunFlak38_42GunCalibreBulletControl
  extends CCalibreBulletControl
{

}

class CGunFlak38_42GunSubCalibreBulletControl
  extends CLtFlakGunBulletControl  //CSubcalibreBulletControl
{
  String    ExplosionId  = "CGunFlak38_42GunSubcalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::AABulletGravityVector;
  float     BulletSpeed  = CPiercing::TankPanzer_IICSUBCALIBREBulletSpeed;
  float     MaxDistance           = CPiercing::TankPanzer_IICSUBCALIBREMaxDistance;
  float     PenetrationPower      = CPiercing::TankPanzer_IICSUBCALIBREPenetrationPower;
  Array     PenetrationByDistance = CPiercing::TankPanzer_IICSUBCALIBREPenetrationByDistance;     /**/
}

class CGunFlak38_42GunHEBulletControl
  extends CHEBulletControl
{
}

class CGunFlak38_42CalibreAmmo
{
  final static String BulletPatternId = "GunFlak88GunCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [["HUMAN", "VEHICLE", "BLD_WAR", "BLD_CIV"],[]];
  final static float  LoadingTime     = 0.0f;
}
/*  */
class CGunFlak38_42SubCalibreAmmo
{
  final static String BulletPatternId = "TankPanzer_IICGunSubCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [["AIR", "GROUND"],[]];
  final static float  LoadingTime     = 0.0f;
}

class CGunFlak38_42HEAmmo
{
  final static String BulletPatternId = "GunFlak88GunHEBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],["HEAVYTANK", "TANK"]];
  final static float  LoadingTime     = 0.0f;
}   

class CGunFlak38_42TargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = 180.0;
  float  RightEndAngle  = -180.0;
  float  TopEndAngle    = -2.0;
  float  BottomEndAngle = 80.0;
}

class CGunFlak38_42Gun
  extends CLightGun  //CHeavyGun
{ 
  String CloudEffectId   = "";
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 0.05;
  final static String BulletPatternId = "";
  Vector GravityVector   = CPiercing::AABulletGravityVector;

  final static boolean HighTrajectory  = false;

  final static String FireSoundId     = "Flak20mmFireSound";

   /*  */
  final static Array Ammo = [
                              //new CGunFlak38_42CalibreAmmo(),
                              new CGunFlak38_42SubCalibreAmmo()//,
                            //  new CGunFlak38_42HEAmmo()
                            ];
  //$TMP TEST DATA
  final static Array AmmoTargetUse    = [
                                          [0, [["AIR"],      []], [[500.0, 95.0, 3000.0, 100.0  ], [[2000.0, 95.0], [2500.0, 100.0]]]],
                                          //HEAVYTANK
                                         // [0, [["HEAVYTANK"],[]], [[500.0, 25.0, 2000.0, 100.0], [[1000.0, 40.0], [1500.0, 80.0]]]],
                                          [0, [["HEAVYTANK"],[]], [[500.0, 75.0, 2000.0, 90.0  ], [[1000.0, 60.0], [1500.0, 20.0]]]],
                                          //TANK
                                         // [0, [["TANK"],     []], [[500.0, 35.0, 2000.0, 100.0], [[1000.0, 45.0], [1500.0, 90.0]]]],
                                          [0, [["TANK"],     []], [[500.0, 65.0, 2000.0, 90.0  ], [[1000.0, 55.0], [1500.0, 10.0]]]],
                                          //VEHICLE
                                          [0, [["VEHICLE"],  []], [[500.0, 50.0, 2000.0, 100.0], [[1000.0, 90.0], [1500.0, 100.0]]]],
                                          //HUMAN
                                          [0, [["HUMAN"],    []], [[500.0, 100.0, 1500.0, 60.0],   [[1000.0, 40.0]]]]//,
                                          //BLD_WAR
                                          //[0, [["BLD_WAR"],  []], [[500.0, 90.0, 1000.0, 100.0], []]],
                                          //[2, [["BLD_WAR"],  []], [[500.0, 10.0, 1000.0, 0.0  ], []]],
                                          //BLD_CIV
                                          //[2, [["BLD_CIV"],  []], [[500.0, 80.0, 1000.0, 100.0], []]]
                                        ];
  //$TMP TEST DATA                          /* */

  final static float    LockAngleHMin   = -180.0;
  final static float    LockAngleHMax   = 180.0;
  final static float    LockAngleVMin     = -2;
  final static float    LockAngleVMax     =  80.0;
  final static float    BlockedLockAngle  =  0.0;

  final static float DirectionSpeedH  = 64.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 8.0; // deg / sec  • vertical

  // *** Gun parameters for behavior  "Flak20mmFireSound"
  boolean SpecialWeapon  = false;

  Component BurstFireSound  = "Flak20mmFireSound";

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 500; // ms
  final static int  FirePeriodRandAdd = 0; // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 1800; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 1000; // ms
  final static int  BurstDelayRandAdd = 0; // ms


  // gun specific fire mask with priorities       // //  //  // 
  final static Array GunSpecificFireMask = [
                                [["AIR"],[]],
                                [["GROUND"],[]],
                                [[],[]]
                              ];


  Component FireAnimator = new #LineAnimator<CGunFlak38_42FireAnimation>();
}

// Behavior

class CGunFlak38_42UnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = false;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;

   /* radar parameters   */
  Array EnemyRankDangerByDistance =  [
                                       [[ ["AIR"],[] ],       [ [ 0.0, 200.0, 3500.0, 100.0 ], [ [2000.0, 150.0] ] ] ],
                                       [[ ["HUMAN"],[] ],     [ [ 0.0, 150.0, 1500.0, 25.0 ], [ [400.0, 150.0] ] ] ],
                                       [[ ["VEHICLE"],[] ],   [ [ 0.0, 140.0, 1500.0, 35.0 ], [ [400.0, 140.0] ] ] ],
                                       [[ ["BTR"],[] ],       [ [ 0.0,  85.0, 1500.0, 15.0 ], [ [400.0,  40.0] ] ] ],
                                       [[ ["ANTITANK"],[] ],  [ [ 0.0,  80.0, 1500.0, 25.0 ], [ [400.0,  40.0] ] ] ],
                                       [[ ["BLD_WAR"],[] ],   [ [ 0.0,  80.0, 1500.0, 20.0 ], [ [400.0,  40.0] ] ] ],
                                       [[ ["TANK"],[] ],      [ [ 0.0,  70.0, 1500.0,  5.0 ], [ [400.0,  35.0] ] ] ],
                                       [[ ["HEAVYTANK"],[] ], [ [ 0.0,  70.0, 1500.0,  2.0 ], [ [400.0,  40.0] ] ] ]
                                     ]; // default Rank = distance if object not fit any mask
                                  
  float   AttackDistanceMin =  15.0;   /**/   // //
  float   AttackDistanceMax = 4200.0;

   // *** radar parameters

  float  MaxRadarDistance = 4200; // m
  float  MinRadarDistance = 30;    // m
  float  MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 2000; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms
 // static Array Mask        = [["", ""], ["", ""]];    //  CLASSIFICATOR_T34_AIR CLASSIFICATOR_GROUND

  // *** movement physical parameters

  // physical limitations
  Vector MaxSpeed = new Vector( -1.0, 0, 0);
  float  MinRotateRadius = 0; // unit can turn when staying
}

class CGunFlak38_42Substance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 0.0, 0.0);
  float  Friction         = 0.4;
  float  Friction1        = 0.4;
  float  Elasticity       = 0.04;
}


class CGunFlak38_42Unit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::GunPak40UnitHitPoints;
  boolean   m_PassiveUnit           = true;

/*  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ]; 
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"],
                                       ];*/

  static category UnitType = CLASSIFICATOR_T34_GUN; //

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER"];
  final static int    UnitMenacePower        = MENACE_NORMAL;   // light weapon
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array        LandingJoints            = ["GroundLevel"];  //

  boolean m_Objectdestroyed = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("GunFlak38_42Unit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints =
      StateControl.GetHitPoints() - _Energy*EnergyToHP;
      //logWarning("Zis3 sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Zis3 have now HP = "+new String(HitPoints)+" and Zis3 has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);

      if (!m_Objectdestroyed)
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("GunZis3Unit destroyed");
      }
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
    (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
 
  }
   event void SetModelLifeState(
      boolean   _State
    )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  }

  // =======================================
  // Contruction and initialization         
  // =======================================

  void CGunFlak38_42Unit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_Flak38_42Model>(), [0]);

    // Setup Weapon
    SetupWeapon("WeaponBase", new #Weapon<CGunFlak38_42Gun>(),["Fire_A1"],
      new #TargetingAnimator<CGunFlak38_42TargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunFlak38_42UnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunFlak38_42Substance", 1100.0*6, 0.0003);
  }
}

// WINTER_UNIT

class CGunFlak38_42_WUnit extends CUnit, CPushVehicleObject
{
  final static float DefaultHitPoints = CHitPoints::GunPak40UnitHitPoints;
  boolean   m_PassiveUnit           = true;

 /*  static Array PrevExplosionID = [
                                    [ "", "GunPak40Explosion" ]
                                 ];
   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"],
                                       ];*/

  static category UnitType = CLASSIFICATOR_T34_GUN; //

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "GER"];
  final static int    UnitMenacePower        = MENACE_NORMAL;   // light weapon
  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array        LandingJoints            = ["GroundLevel"];  //

  boolean m_Objectdestroyed = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )
  {
    // create new trigger
    logWarning("GunFlak38_42Unit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints =
      StateControl.GetHitPoints() - _Energy*EnergyToHP;
      //logWarning("Zis3 sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and Zis3 have now HP = "+new String(HitPoints)+" and Zis3 has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);

      if (!m_Objectdestroyed)
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("GunZis3Unit destroyed");
      }
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
    (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
  }

   event void SetModelLifeState(
      boolean   _State
    )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  }



  // =======================================
  // Contruction and initialization         
  // =======================================

  void CGunFlak38_42_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_Flak38_42_WModel>(), [0]);

    // Setup Weapon
    SetupWeapon("WeaponBase", new #Weapon<CGunFlak38_42Gun>(),["Fire_A1"],
      new #TargetingAnimator<CGunFlak38_42TargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunFlak38_42UnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunFlak38_42Substance", 1100.0*6, 0.0003);
  }
}
