//-------------------------------------------------------------------
//
// Array  Animation = [["bombdoors", ["Bay_R", 0, 1], ["Bay_L", 0, 1]]];
//
//-------------------------------------------------------------------
class CIL4_Med_BomberUnitExplosion
  extends CAirVehicleExplosion
{
  float  Damage   = 50.0;
  float  Radius   = 10.0;
}

class CIL4_Med_BomberAirBombExplosion
  extends CAirBomb100KgExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 250;
  float  FireDamage   = 250;
  float  Radius = 20;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}

class CIL4_Med_BomberAirBombControl
  extends CBombControl
{
  String    ExplosionId  = "IL4_Med_BomberAirBombExplosion";      //  GunML20_152mmGunHEBulletExplosion
  Component BulletRender = new #AnimatedObject<Cwpn_Bomb_Fab100Model>(); //$TMP should be changed to correct model when it'll be done
  String  TraceEffectId    = "";
  //String  TraceEffectId    = "LightMissileTraceEffect";

  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}

class CIL4_Med_BomberBombDropper
  extends CHeavyGun  //  CLightGun
{
  final static float  InitBulletSpeed = 0.0;
  final static float  FireDeviation   = 0.30;

//   final static Vector GravityVector   = CWorldPhysics::GravityVector;

  final static String  BulletPatternId  = "IL4_Med_BomberAirBomb";    
  CIL4_Med_BomberBombControl()
  {
    BulletRender.SetLods([ 1 ]);
  }

  //$tmp - keep fire effects for debug propose
  //String    FireEffectId    = "";
  //String    CloudEffectId   = "";
  final static String    FireSoundId     = "";

  final static int     Ammunition       = 6;
  final static int     TargetCameraFilter = ETC_FILTER_TV; //

  final static float   AmmoMass = 250.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = false;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 333; // ms
  final static int  FirePeriodRandAdd = 0;   // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 0; // ms
  final static int  BurstDelayRandAdd = 0; // ms

  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], //  high priority mask: RestrictTo, Exclude
                                [[],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 2350;  //
  final static int     AutoRepeatDelay  = 100;
}

class CIL4_Med_BomberAirBehavior extends CBaseAirCraftBehavior
{

  int      AttackStyle        = AttackStyle_NonStop;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean CanFireInMove       = true;   //

  // *** radar parameters

  float MaxRadarDistance = 2400.0; // m
  float MinRadarDistance = 60.0;    // m
  float MaxRadarAngle    = 180.0;

  int    UpdateRadarPeriod        = 1000; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms

  float   AttackDistanceMax = 2350.0;
  float   AttackDistanceMin = 500.0;

  float   FlyingHeight = 1656.0;
  float   StealthHeight = 2626.0;
  float   FlyingHeightMin = 6.0;
  // *** movement physical parameters

  // physical limitations
  float  MinRotateRadius = 440;
  float  CeilingByZ = 6000.0;    // max flying height
  float  MinSpeed   = 49.99;       // min flying speed

  // physical parameters
  Vector  MaxSpeed                     = new Vector( 199.99, 0, 0);  // m/s

}

class CIL4_Med_BomberUnit
  extends CUnit , CPushVehicleObject
{

  boolean m_AITankCollisionShape = false;

  final static float DefaultHitPoints = -1.0;  // CHitPoints::IL4_Med_BomberUnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_AIR;

  final static String DefaultSurfaceControl = "None";
  static Array  LandingJoints = [""];


 // static String PrevExplosionID = "CIL4_Med_BomberUnitExplosion";

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["AIR", "AIRPLANE", "RU"];
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  // =======================================
  // Contruction and initialization
  // =======================================

  void CIL4_Med_BomberUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_air_IL4_Med_BomberModel>(), [0]);

    SetMovementEffects(
        new #Emitter<CPlaneMovementSound>(),
        []
      );

    //$TMP WEAPON
         // init and register weapon    
/*     Component Weapon =  new #Weapon<CIL4_Med_BomberBombDropper>();   // WeaponBase
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);    //

    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);  */   //

   SetupWeapon("Weapon_A", new #Weapon<CIL4_Med_BomberBombDropper>(),"Bomb1", ["Bomb2"],null);




    SetupBehavior(new #VehicleBehavior<CIL4_Med_BomberAirBehavior>());
  }
  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [ CLASSIFICATOR_TERRAIN, CLASSIFICATOR_WALK_SURFACE ],   //    CLASSIFICATOR_GROUND, CLASSIFICATOR_TERRAINFOREST,
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
    Component _Mission,
    Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);



  }

}


