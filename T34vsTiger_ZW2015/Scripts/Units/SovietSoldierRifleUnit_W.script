//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------
class CSovietSoldierRifle_WLoadTransportAnim
{
  final static String  AnimationName     = "load";
  final static float   AnimationTime     = 1.0;
}

class CSovietSoldierRifle_WUnloadTransportAnim
{
  final static String  AnimationName     = "unload";
  final static float   AnimationTime     = 1.0;
}

//Rifle
class CSovietSoldierRifle_WBulletExplosion
  extends CRifleBulletExplosion
{
  float  Damage   = 5.0;
}

class CSovietSoldierRifle_WFakeBulletControl
  extends CFakeRifleBulletControl
{
  String    ExplosionId  = "SovietSoldierRifleBulletExplosion";
  Component BulletRender = null; //new #StaticEffect<CRifleBulletEffect>();
}

class CSovietSoldierRifle_W
  extends CRifle
{
  final static String BulletPatternId = "SovietSoldierRifleFakeBullet";
  final static String FireSoundId     = "MosinRifleFireSound";

  Component BurstFireSound  = null; //  new #Emitter<CM60RifleFireSound>();

  final static float LockAngleHMin = - 46;
  final static float LockAngleHMax =   46;
  final static float LockAngleVMin = - 46;
  final static float LockAngleVMax =   46;

  // *** Rifle parameters for behavior
  final static int  FirePeriod        = 8000; // ms
  final static int  FirePeriodRandAdd = 1000;  // ms

  final static float MinDistance      = 1;
  final static float MaxDistance      = 250;

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0;    // ms

  final static int  BurstDelay        = 3000; // ms
  final static int  BurstDelayRandAdd = 2000; // ms

  final static int     AutoRepeatDelay  = 110;
  final static boolean   CanFireInMove   = false;

  // gun specific fire mask with priorities
  final static Array GunSpecificFireMask = [
                                [["HUMAN"], []  ],               // high priority mask
                                [["VEHICLE"], []  ], // low priority mask
                                [[],       []]            // low priority mask: RestrictTo, Exclude
                              ];
}

class CSovietSoldierRifle_WBehaviorParams extends CBaseBehaviorParams
{
  float MaxAttackSpeed    = 5.0;
}

class CSovietSoldierRifle_WBehavior
  extends CHumanBehavior
{
  final static Component SpecParams = new CSovietSoldierRifle_WBehaviorParams();
  
  static category UnitType = CLASSIFICATOR_T34_SOLDER;

  boolean  CanMove   = true;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;


  // *** radar parameters

  float  MaxRadarDistance = 800; // m
  float  MinRadarDistance = 5;    // m

  float   AttackDistanceMin           =  2.0;
  float   AttackDistanceMax           = 200.0;


  int    UpdateRadarPeriod        = 1000; // ms
  int    UpdateRadarPeriodRandAdd = 300; // ms
}


class CSovietSoldierRifle_WUnit
  extends CHumanUnit
{
  final static float DefaultHitPoints = CHitPoints::SovietSoldierRifleUnitHitPoints;

  final static boolean CanStayAttack = true; //

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "HUMAN"];
  
   final static String DefaultSurfaceControl = "PutonGroundLandingJoints"; 
   
   static Array  LandingJoints = ["WalkPoint"];

  // =======================================
  // Contruction and initialization                    Chum_SovietArmyManModel
  // =======================================

  void CSovietSoldierRifle_WUnit()
  {
    SetupMesh(new #AnimatedObject<Chum_SovietSoldierRifle_WModel >(), [ 0 ]);

    // Setup default substance id
    SetupObjectSubstance(CSubstances::Body);

    //$TODO animator
    //GetObject("AnimWeapon").EnableAnimator(false);   
    SetupWeapon("Weapon", new #Weapon<CSovietSoldierRifle_W>(), ["Fire_A"], null);
    SetupBehavior(new #HumanBehavior<CSovietSoldierRifle_WBehavior>());

    // Load additionals animations
   LoadAnimations("ChumansAnimation");
//   LoadAnimations("CwalkAnimation");
   LoadAnimations("CDeathAnimation");

    //SetupLoadTransportAnimation(new #LineAnimator<CSovietSoldierRifle_WLoadTransportAnim>(),
    //                            new #LineAnimator<CSovietSoldierRifle_WUnloadTransportAnim>()
    //                            );

  }
  
  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CHumanUnit::Construct(_Mission, _PropMap);
  }
}