//-------------------------------------------------------------------
//
// Array  Animation = [["bombdoors", ["Bay_R", 0, 1], ["Bay_L", 0, 1]]];
//
//-------------------------------------------------------------------
class CPe8_Hvy_BomberUnitExplosion
  extends CAirVehicleExplosion
{
  float  Damage   = 50.0;
  float  Radius   = 10.0;
}

class CPe8_Hvy_BomberAirBombExplosion1
  extends CAirBomb100KgExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 500;
  float  FireDamage   = 500;
  float  Radius = 20;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}

class CPe8_Hvy_BomberAirBombExplosion2
  extends CAirBomb250KgExplosion  //  CHEGunHvyBulletExplosion
{
  float  Damage   = 500;
  float  FireDamage   = 500;
  float  Radius = 30;
 //  Component Debris = new CGunML20_152mmGunHEBulletDebrisCloud();
}
class CPe8_Hvy_BomberAirBombControl1
  extends CBombControl
{
  String    ExplosionId  = "Pe8_Hvy_BomberAirBombExplosion1";      //  GunML20_152mmGunHEBulletExplosion
  Component BulletRender = new #AnimatedObject<Cwpn_Bomb_Fab250Model>(); //$TMP should be changed to correct model when it'll be done

  CPe8_Hvy_BomberAirBombControl1()
  {
    BulletRender.SetLods([ 1 ]);
  }
  //String  TraceEffectId    = "";
  //String  TraceEffectId    = "LightMissileTraceEffect";

  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}
class CPe8_Hvy_BomberBombDropper1
  extends CLightGun  // CHeavyGun
{
  final static float  InitBulletSpeed = 0.0;
  final static float  FireDeviation   = 0.30;

  //final static Vector GravityVector   = CWorldPhysics::GravityVector;

  final static String  BulletPatternId  = "Pe8_Hvy_BomberAirBomb1";


  //$tmp - keep fire effects for debug propose
  //String    FireEffectId    = "";
  //String    CloudEffectId   = "";
  final static String    FireSoundId     = "";

  final static int     Ammunition       = 32;
  final static int     TargetCameraFilter = ETC_FILTER_TV; //

  final static float   AmmoMass = 250.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = true;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 200; // ms
  final static int  FirePeriodRandAdd = 0;   // ms

  final static boolean BurstFire      = true;
  final static int  BurstTime         = 6600; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 0; // ms
  final static int  BurstDelayRandAdd = 0; // ms

  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], //  high priority mask: RestrictTo, Exclude
                                [["HUMAN"],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 1200;  //
  final static int     AutoRepeatDelay  = 100;
}

class CPe8_Hvy_BomberAirBombControl2
  extends CBombControl
{
  String    ExplosionId  = "Pe8_Hvy_BomberAirBombExplosion2";      //  GunML20_152mmGunHEBulletExplosion
  Component BulletRender = new #AnimatedObject<Cwpn_Bomb_Fab250Model>(); //$TMP should be changed to correct model when it'll be done
  
  CPe8_Hvy_BomberAirBombControl2()
  {
    BulletRender.SetLods([ 1 ]);
  }
//  String  TraceEffectId    = "";
  //String  TraceEffectId    = "LightMissileTraceEffect";

  boolean OnDetonate(
      Matrix _Position,
      Vector _Direction,
      Component _TargetObject,
      Component _TargetObjectPart,
      float     _Penetration,
      String    _OwnerID,
      int       _InstanceID,
      int       _SubstanceID
    )
  {
    sendEvent(0.0, _OwnerID, "OnBombDetonate", [_Position]);
    return true;
  }
}

class CPe8_Hvy_BomberBombDropper2
  extends CLightGun  // CHeavyGun
{
  final static float  InitBulletSpeed = 0.0;
  final static float  FireDeviation   = 0.30;

 // final static Vector GravityVector   = CWorldPhysics::GravityVector;

  final static String  BulletPatternId  = "Pe8_Hvy_BomberAirBomb2";


  //$tmp - keep fire effects for debug propose
  //String    FireEffectId    = "";
  //String    CloudEffectId   = "";
  final static String    FireSoundId     = "";

  final static int     Ammunition       = 4;
  final static int     TargetCameraFilter = ETC_FILTER_TV; //

  final static float   AmmoMass = 250.0;

  final static float    LockAngleHMin     = 0.0;
  final static float    LockAngleHMax     = 0.0;
  final static float    LockAngleVMin     = 0.0;
  final static float    LockAngleVMax     = 0.0;
  final static float    BlockedLockAngle  =  0.0;

  final static boolean  IsManualTargetable = false;
  final static boolean  CheckObstacles     = true;
  final static boolean  SelfTargeting      = true;

  Component BurstFireSound  = null;

  final static boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 800; // ms
  final static int  FirePeriodRandAdd = 0;   // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 800; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 100; // ms
  final static int  BurstDelayRandAdd = 0; // ms

  final static Array GunSpecificFireMask = [
                                [["GROUND"],[]], //  high priority mask: RestrictTo, Exclude
                                [["HUMAN"],[]],    // high priority mask: RestrictTo, Exclude
                                [[],[]] // low priority target with a pulley in the middle            //
                              ];

  final static boolean ResetLockOnFire  = false;
  final float          TargetingRange   = 1200;  //
  final static int     AutoRepeatDelay  = 100;
}

class CPe8_Hvy_BomberAirBehavior extends CBaseAirCraftBehavior
{

  int      AttackStyle        = AttackStyle_NonStop;
  boolean  CanMove            = true;
  boolean  HasRouter          = true;
  boolean  HasRadar           = true;
  boolean CanFireInMove       = true;   //

  // *** radar parameters

  float MaxRadarDistance = 3800.0; // m
  float MinRadarDistance = 600.0;    // m
  float MaxRadarAngle    = 60.0;

  int    UpdateRadarPeriod        = 1500; // ms
  int    UpdateRadarPeriodRandAdd = 0; // ms

  float   AttackDistanceMax = 3200.0;
  float   AttackDistanceMin = 1550.0;

  float   FlyingHeight = 2462.0;
  float   StealthHeight = 3626.0;
  float   FlyingHeightMin = 6.0;
  // *** movement physical parameters

  // physical limitations
  float  MinRotateRadius = 640;
  float  CeilingByZ = 5500.0;    // max flying height
  float  MinSpeed   = 59.99;       // min flying speed
  // physical limitations
  Vector  MaxSpeed                      = new Vector( 199.99, 0, 0);   // m/s

}
/*
class CPe8_Hvy_BomberUnitSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(0.0, 0.0, 0.0);
  float  Friction         = 0.0;
  float  Friction1        = 0.0;
  float  Elasticity       = 0.0;
}

class CPe8_Hvy_BomberUnitManualControl
  extends CConstraintProperties
{
  float  Mass                 = 40000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.3;

  Vector GravityAccelerate    = new Vector(0.0, 0.0, -5.5);
}     */

class CPe8_Hvy_BomberUnit
  extends CUnit , CPushVehicleObject
{

  boolean m_AITankCollisionShape = false;

  final static float DefaultHitPoints = CHitPoints::IL4_Med_BomberUnitHitPoints;
  
  static category UnitType = CLASSIFICATOR_T34_AIR;

  final static String DefaultSurfaceControl = "None";
  static Array  LandingJoints = [""];

  final static String BodyJoint   = "Body";

 // static String PrevExplosionID = "CPe8_Hvy_BomberUnitExplosion";

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["AIR", "AIRPLANE", "RU"];
  final static int    UnitMenacePower        = MENACE_GODZILLA;  // Heavy weapon

  // =======================================
  // Contruction and initialization
  // =======================================

  void CPe8_Hvy_BomberUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_air_Pe8_Hvy_BomberModel>(), [0]);

    SetMovementEffects(
        new #Emitter<CPlaneMovementSound>(),
        []
      );

    //$TMP WEAPON
   /*       // init and register weapon    
    Component Weapon =  new #Weapon<CPe8_Hvy_BomberBombDropper>();   // WeaponBase
    Component Mesh = GetMeshComponent();
    Weapon.AttachToModel(Mesh, [Mesh]);    //

    m_WeaponNames.add("WeaponID");
    m_WeaponList.add(Weapon);
    RegisterObject("WeaponID",Weapon);  */   //  

   SetupWeapon("BombBay", new #Weapon<CPe8_Hvy_BomberBombDropper1>(),"Bomb1",["Bomb2", "Bomb3", "Bomb4"],null);
   SetupWeapon("BombWing", new #Weapon<CPe8_Hvy_BomberBombDropper2>(),"Bomb6",["Bomb5"],null);



    SetupBehavior(new #VehicleBehavior<CPe8_Hvy_BomberAirBehavior>());
  }
  // =======================================
  // Collision control
  // =======================================

  Component CreateCollisionControl(String _ScriptClassName)
  {
    Component CollisionControl = new #CollisionControl2();
    CollisionControl.SetCollisionMask(
        [ CLASSIFICATOR_TERRAIN, CLASSIFICATOR_WALK_SURFACE ],   //    CLASSIFICATOR_GROUND, CLASSIFICATOR_TERRAINFOREST,
        [ CLASSIFICATOR_DO_NOT_COLLISION_CHECK, CLASSIFICATOR_PHYSICS_CONTROLLABLE ]
      );

    loadFromScript(CollisionControl, _ScriptClassName);
    RegisterObject("CollisionControl", CollisionControl);

    return CollisionControl;
  }

  void Construct(
    Component _Mission,
    Component _PropMap
    )
  {

    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_CALIBREBULLET7576,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_CALIBREBULLET85,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_CALIBREBULLET88,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_HEBULLET7576,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_HEBULLET85,    0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_HEBULLET88,    0.0);

    CreateCollisionControl("CBaseCollisionControl"); //


    Component VehicleController = new #AITankVehicle<CPe8_Hvy_BomberUnitManualControl>();
    if (null == VehicleController)
      logError("Cant setup type of AIAirVehicle control for " + getIdentificator(this));

    RegisterObject("AIVehicleController", VehicleController);
    VehicleController.SetEventHandler(this);

    Component Mesh = GetMeshComponent();

    Array BaseShapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    Component Body = VehicleController.CreateObject(Mesh, BaseShapes);

    SetupPhysicaleObject("CPe8_Hvy_BomberUnitSubstance", 19000.0, 0.15);
  }

}


