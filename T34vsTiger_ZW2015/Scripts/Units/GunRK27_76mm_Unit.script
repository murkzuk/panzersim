  /*


   Array  Animation = [
      ["gun_a", ["Weapon_Base", 0, 20],["Vert_HndWhls", 0, 20], ["Gun_Shield", 0, 20]],
      ["gun_a_recoil", ["Weapon_A", 0, 20]],
      ["turret_a", ["Turret", 0, 20], ["Horz_HndWhls", 0, 20],["Trail", 0, 20],["Axel", 0, 20],["WheelRightMain1_joint1", 0, 20],["WheelLeftMain1_joint1", 0, 20]],
      ["wheels_rotate", ["WheelLeftMain1", 0, 3],["WheelRightMain1", 0, 3]]
  ];

  */

class CGunRK27_76mmFireAnimation
{
  final static String  AnimationName     = "gun_a_recoil";
  final static float   AnimationTime     = 1.0;
}

class CGunRK27_76mmExplosion
  extends CUnitExplosion
{
  float  Damage   = 100.0;
  float  Radius   = 5.0;
  String SoundId  = "GunPak40ExplosionSound";
}
class CGunRK27_76mmMovementAnimator
{
  String LineSpeedAnim = "wheels_rotate";
//  String TurnSpeedAnim = "turret_a"; 

  boolean RotateAnim = true;  //

  float MaxLineSpeed = 3.568;            // speed when wheel make full animation per one sec == length of circle
  float MaxTurnSpeed = Math_HALFPI / 3.0;    // max angle in rotation mode
}
class CGunRK27_76mmTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   =  20.93;
  float  RightEndAngle  =  -20.93;
  float  TopEndAngle    =  -3.0;
  float  BottomEndAngle =  25.0;
}

// Main cannon bullet explosion
class CGunRK27_76mmGunCalibreBulletExplosion
  extends CTankT34_85_44GunCalibreBulletExplosion
{
  float  Damage   = CPiercing::GunRK27_76mmCalibreDamage;
  float  FireDamage   = CPiercing::GunRK27_76mmCalibreFireDamage;
  float     Radius     = CPiercing::GunRK27_76mmCalibreRadius;
  //Component Debris     = new CGunRK27_76mmGunCalibreBulletDebrisCloud();
}

class CGunRK27_76mmGunCalibreBulletDebrisCloud
{
  int    DebrisQuantity  = CPiercing::GunRK27_76mmCalibreDebrisQuantity;
  String DebrisPatternID = "GunRK27_76mmGunCalibreBulletDebrisExplosion";
  float  DebrisSpeed     = 300.0;
  float  DebrisSpeedDev  = 50.0;
  Vector DebrisDir       = new Vector(0.0, 0.0, 1.0);
  float  DebrisMinAngle  = 0.0;
  float  DebrisMaxAngle  = 90.0;
}

class CGunRK27_76mmGunCalibreBulletDebrisControl
{
  Array     Classificator = [];
  boolean   IsMotionBlur  = true;
  float     MaxDistance   = CPiercing::GunRK27_76mmCalibreDebrisMaxDistance;
  String    ExplosionId   = "GunRK27_76mmGunCalibreBulletDebrisExplosion";
  float     Mass          = 0.02;
}

class CGunRK27_76mmGunCalibreBulletDebrisExplosion
  extends CDebrisExplosion
{
  String EffectId = "";
  String SoundId  = "";
  float  Damage   = CPiercing::GunRK27_76mmCalibreDebrisDamage;
}

class CGunRK27_76mmGunCalibreBulletControl
  extends CCalibreBulletControl
{
  String    ExplosionId  = "TankT34_76_42GunCalibreBulletExplosion";
  Vector    GravityAccel = CPiercing::ShellGravityVector;
  float     BulletSpeed  = CPiercing::GunRK27_76mmCalibreBulletSpeed;
  float     MaxDistance           = CPiercing::GunRK27_76mmCalibreMaxDistance;
  float     PenetrationPower      = CPiercing::GunRK27_76mmCalibrePenetrationPower;
  Array     PenetrationByDistance = CPiercing::GunRK27_76mmCalibrePenetrationByDistance;
}
class CGunRK27_76mmCalibreAmmo
{
  final static String BulletPatternId = "GunRK27_76mmGunCalibreBullet";
  final static int    Ammunition      = 2000;
  final static Array  TargetMask      = [[],[]];
  final static float  LoadingTime     = 0.0f;
}
class CGunRK27_76mmGun
  extends CHeavyGun
{
  String CloudEffectId   = "HeavyGunNoMuzzleCloudEffect";     // HeavyGunNoMuzzleGroundEffect   HeavyGunFireNoMuzzleEffect
  float  InitBulletSpeed = 0.0f;
  float  FireDeviation   = 3.75;
  float  MinFireDeviation   = 1.00;

  Vector GravityVector   =  CPiercing::ShellGravityVector;                          //HvyShellGravityVector;

  final static boolean HighTrajectory  = false;
  final static String BulletPatternId = "";
  String    FireSoundId     = "T34_76MainGunFireSound";

  final static Array Ammo = [
                             new CGunRK27_76mmCalibreAmmo()
                            ];

  final static float    LockAngleHMin     = -20.93;
  final static float    LockAngleHMax     =  20.93;
  final static float    LockAngleVMin     = -3.0;
  final static float    LockAngleVMax     =  25.0;
  final static float    BlockedLockAngle  =  4.0;

  final static float DirectionSpeedH  = 3.0; // deg / sec  • horizontal
  final static float DirectionSpeedV  = 2.0; // deg / sec  • vertical

  // *** Gun parameters for behavior
  boolean SpecialWeapon  = false;

  // *** Gun parameters for behavior

  int  FirePeriod        = 5000;  // ms
  int  FirePeriodRandAdd = 2000;   // ms

  boolean BurstFire      = false;
  int  BurstTime         = 2000; // ms
  int  BurstTimeRandAdd  = 0; // ms

  final static int  BurstDelay        = 4000; // ms
  final static int  BurstDelayRandAdd = 0; // ms

  Component FireAnimator = new #LineAnimator<CGunRK27_76mmFireAnimation>();
}

// Behavior

class CGunRK27_76mmUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = true;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;

  float  MaxRadarDistance = 8000; // m
  float  MinRadarDistance = 30;    // m
  float  MaxRadarAngle    = 41.86;

  int    UpdateRadarPeriod        = 23000; // ms
  int    UpdateRadarPeriodRandAdd = 1500; // ms

  static Array Mask        = [["", "CLASSIFICATOR_GROUND"], ["", ""]]; //
  
      // radar visibility
  float  StaySpeed            = 0.5f;
  String MovingClassificator  = "MOVING_UNIT";
  String FireingClassificator = "TARGETING_UNIT";

  boolean SpecVisibilityCheck = true;

  Array ViewProbabilityByDistance = [[MinRadarDistance, 1.0f, MaxRadarDistance, 0.9],
                                            [
                                            ]
                                           ];

  final static Array ViewProbabilityByAngle = [[- Math_PI, 0.3f, Math_PI, 0.3],
                                         [
                                          [0.0f, 1.0f]
                                         ]
                                        ];

  final static Array ViewProbabilityByState = [
                                          [1, 1.5f] // UST_ATTACK
                                        ];

  final static Array ViewProbabilityByMask =  [
                                          [["MOVING_UNIT"],[], 2.0f],
                                          [["TARGETING_UNIT"],[], 2.0f],
                                          [["OPENLANDSCAPE_UNIT"],[], 2.0f],
                                          [["BUSHLANDSCAPE_UNIT"],[], 2.0f],
                                          [["FORESTLANDSCAPE_UNIT"],[], 0.9f],
                                          [["CLOSELANDSCAPE_UNIT"],[], 0.9f]
                                        ];

  float ViewProbabilityByPreviousStep = 2.0f;

  // physical limitations
  Vector MaxSpeed = new Vector( 1.0, 0, 0);

  float   MaxRotateSpeed                = 2.0f;
  Vector  MaxSpeed                      = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxNegativeSpeed              = new Vector( 0.0, 0, 0);   // m/s
  Vector  MaxAccelleration              = new Vector( 0.2, 0, 0);    // m/(s*s)
  Vector  MaxNegativeAccelleration      = new Vector( 0.8, 0, 0);  // m/(s*s)
  Vector  MaxBrakingAccelleration       = new Vector( 0.5, 0, 0);   // m/(s*s)
  Vector  MaxAngleSpeed                 = new Vector(   0, 0, 1.0);    // [rad/s]
  Vector  MaxAngleAccelleration         = new Vector(   0, 0, 0.5);  // [rad/(s*s)]
  Vector  MaxAngleBrakingAccelleration  = new Vector(   0, 0, 0.5); //1);  // [rad/(s*s)]

  float  MinRotateRadius = 1.0; // unit can turn when staying
}


class CGunRK27_76mmSubstance
  extends CMetalSubstance
{
  Vector MainFrictionAxis = new Vector(1.0, 1.0, 1.0);
  float  Friction         = 0.4;
  float  Friction1        = 1.4;
  float  Elasticity       = 0.0;
}
class CGunRK27_76mmManualControl
  extends CConstraintProperties
{
  // =========================================
  // Tank properties
  // =========================================

  float  Mass                 = 5000.0;
  Vector IT                   = new Vector(0.874482, 3.152529, 3.804275);
  float  Elasticity           = 0.0;  // Must be zero else tank will bouncing like ball
  float  Friction             = 0.0;

  float  SuspensionHeight = 0.0;    // cm
  float  SuspensionPower  = 0.0;  // kg
  Vector GravityAccelerate    = CWorldPhysics::GravityVector;
}
class CGunRK27_76mmUnit extends CUnit, CPushVehicleObject
{


  final static float DefaultHitPoints = CHitPoints::GunRK27_76mmUnitHitPoints; //-1;  GunPak40Explosion /* */    
  boolean   m_PassiveUnit           = true;



   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                  //  ["",  "BaseBuildingExplosionEffect"],
                                  // ["",  "GenericLargeFirePostSmokeRefuseEffect"]
                                      ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "RU" ];
  
  final static int    UnitMenacePower        =  MENACE_NORMAL;  //MENACE_KILLER; // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FR", "Corner_FL", "Corner_RCenter"];

  boolean m_Objectdestroyed = false;


  
    void CGunRK27_76mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 20);
    }
     if ((HitPoints <= 0.0)&&(!m_Objectdestroyed))
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("Lt RK-27 Feldgun dead");
   }                                              

     }
 event void SetModelLifeState(
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )              
  {
    // create new trigger
    logWarning("RK27_76mmUnit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("RK27_76mm sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and RK27_76mm have now HP = "+new String(HitPoints)+" and RK27_76mm has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("RK27_76mm destroyed");
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}   


  void CGunRK27_76mmUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_RK27_76mmModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunRK27_76mmGun>(),["Fire_A1"],new #TargetingAnimator<CGunRK27_76mmTargetingAnimatorA>());

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunRK27_76mmMovementAnimator>()
         );

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunRK27_76mmUnitBehavior>());

  //  Vector RadarObject = new Vector(getPosition(this).origin + 0.0, 0.0, 90.0);

//    Component FireControl = new #RadarObject();
   // setPositionable(Radar, FireControl);
    //RegisterObject("Radar", Radar);
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunRK27_76mmSubstance", 1100.0*6, 0.0);
  }
}
// WINTER_UNIT

class CGunRK27_76mm_WUnit extends CUnit, CPushVehicleObject
{


  final static float DefaultHitPoints = CHitPoints::GunRK27_76mmUnitHitPoints; //-1;  GunPak40Explosion /* */    
  boolean   m_PassiveUnit           = true;



   static Array PrevDeathEffect = [
                                  ["",  "GenericUnitExplosionSmokeEffect"] //,
                                  //  ["",  "BaseBuildingExplosionEffect"],
                                  // ["",  "GenericLargeFirePostSmokeRefuseEffect"]
                                      ];

  static category UnitType = CLASSIFICATOR_T34_GUN;

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND", "GUN", "RU" ];
  
  final static int    UnitMenacePower        =  MENACE_NORMAL;  //MENACE_KILLER; // Heavy weapon

  final static String DefaultSurfaceControl = "PutonGroundLandingJoints";

  static Array  LandingJoints = ["Corner_FR", "Corner_FL", "Corner_RCenter"];

  boolean m_Objectdestroyed = false;


  
    void CGunRK27_76mmUnitDamaged()
  {
    Component Behavior = _HostObject.GetObject("Behavior");
    if (Behavior != null)
    {
      Behavior.SetAimAbility(false, 20);
    }
     if ((HitPoints <= 0.0)&&(!m_Objectdestroyed))
    {
       Behavior.SetAimAbility(false,0);
       Behavior.SetFireAbility(false,0);
       user.DestroyObject();
        m_Objectdestroyed = true;
       logWarning("Lt RK-27 Feldgun dead");
   }                                              

     }
 event void SetModelLifeState(
      boolean   _State
  )
  {
    logMessage(getIdentificator(this) + ": SetModelLifeState");
    m_IsAlive = _State;

    sendEvent(0.0,getIdentificator(this), "SetModelViewState", [true]);
  } 

  boolean m_Objectdestroyed = false;
  boolean m_AITankCollisionShape = false;

  event void OnSuccessTouchTrigger(
      float _Energy
    )              
  {
    // create new trigger
    logWarning("RK27_76mmUnit damaged with Energy = "+new String(_Energy));

    Component PhysicsController = GetPhysicsController();
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

   Component StateControl = GetStateControl();
    if (null != StateControl)
    {
      float HitPoints = StateControl.GetHitPoints() - _Energy * EnergyToHP;
      //logWarning("RK27_76mm sucsess touch _Energy = "+new String(_Energy)+" EnergytoHP = "+new String(EnergyToHP)+" and RK27_76mm have now HP = "+new String(HitPoints)+" and RK27_76mm has HP = " +new String(StateControl.GetHitPoints()) );
      StateControl.SetHitPoints(HitPoints);
    
       if ((HitPoints <= 0.0) && (!m_Objectdestroyed))
      {
        user.DestroyObject();
        m_Objectdestroyed = true;
        //logWarning("RK27_76mm destroyed");
      } 
     }

    // play touch sound
    if(_Energy > MinEnergyToSound)
      (new #SoundsArray()).CreateSound("TankCollisionTruckLowSpeedSound", getPosition(this));
}   


  void CGunRK27_76mm_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_RK27_76mm_WModel>(), [0]);

    // Setup Weapon
    SetupWeapon("Weapon_A", new #Weapon<CGunRK27_76mmGun>(),["Fire_A1"],new #TargetingAnimator<CGunRK27_76mmTargetingAnimatorA>());

    // Setup animations
    SetupAnimator(
        "MoveAnim", new #MovementAnimator<CGunRK27_76mmMovementAnimator>()
         );
    PutonGround();
    SetupBehavior( new #VehicleBehavior<CGunRK27_76mmUnitBehavior>());

  //  Vector RadarObject = new Vector(getPosition(this).origin + 0.0, 0.0, 90.0);

//    Component FireControl = new #RadarObject();
   // setPositionable(Radar, FireControl);
    //RegisterObject("Radar", Radar);
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CUnit::Construct(_Mission, _PropMap);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET762792, 0.00f);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET127,    0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET7576, 0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET85,   0.0);
    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_SUBCALIBREBULLET88,   0.0);

    GetDamageHandler().SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BUILDING, 0.0);

    SetupPhysicaleObject("CGunRK27_76mmSubstance", 1100.0*6, 0.0);
  }
}
