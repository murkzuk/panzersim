
class CWingTankmanTask extends CBaseAITask, CBaseAITankTask, CBaseAISAUTask   // CWingmanTask
{
  // *** constants ***

  final static float FOLLOW_DISTANCE_MIN = 10.0;  // [metres] minimum follow distance
  final static float FOLLOW_DISTANCE_OPT = 20.0;  // [metres] optimum follow distance
  final static float FOLLOW_DISTANCE_MAX = 90.0;  // [metres] maximum follow distance
  final static float FORMATION_DISTANCE_OPT = 20;
  final static float FORMATION_DISTANCE_MAX = 90;

  final static float PATROL_RADIUS = 100.0;  // [metres] radius of patrolling place
  final static Array FORMATION_VECTORS = [new Vector(20, 12, 0), new Vector(20, -12, 0)];

  String m_LeaderID = "MainPlayerUnit";   // this wingman's player ID  MainPlayerUnit

  int m_WingTankmanRank = 1;    // WingTankman rank in player "group"    /* */
  int m_WingTankmanReactionLatch = ERT_PASSIVE;  
  boolean m_InstantWingTankman = false;

  void Init()
  {
    CBaseAITask::Init();
    InitPersonalWeaponPool();
    SetRadarDetailedFriends(true);     //
    SetRadarDetailedEnemies(true);     //
  }


  // *** functions for overwriting ***

  Vector GetFormationVector()
  {
    return FORMATION_VECTORS[m_Rank];
  };

  void SetWingTankmanRank(int _Rank)
  {
    m_WingTankmanRank = _Rank;
  }

  int GetWingTankmanRank()
  {
    return m_WingTankmanRank;
  }

  void SetInstantWingTankman()
  {
    m_InstantWingTankman = true;
  }

  void InitHomePoint(
      String _HomePoint
    )
  {
    Component Pad = GetMission().GetObject(_HomePoint);
  }

  void SetLeaderID(String _LeaderID)
  {
    m_LeaderID = _LeaderID;
  }

  String GetLeaderID()
  {
    return m_LeaderID;
  }


  // *** current order ***
  boolean m_Follow  = true;
  boolean m_Stay    = false;
  boolean m_RepeatStay = false;
  boolean m_Attack  = false;
  boolean m_Patrol  = false;
  boolean m_Retreat = false;


  // *** tasks stuff ***
  String m_FollowID     = "";
  String m_EnemyID      = "";
  String m_PatrolPlace  = "";
  Vector m_StayPlace;
  Vector m_RetreatPlace;

  // *** routines ***

  void ClearState()
  {
    m_Follow  = false;
    m_Stay    = false;
    m_RepeatStay = false;
    m_Attack  = false;
    m_Patrol  = false;
    m_Retreat = false;
    m_FollowID     = "";
    m_EnemyID      = "";
    m_PatrolPlace  = "";
//    m_StayPlace    = null;
//    m_RetreatPlace = null;
  };


  // *** orders *** /*

  event void WingTankman_SetOrder(int _Order, String _LeaderID, String _TargetID)
  {
    SetAnchorState(false);

    if (_Order == 0)
    {
      // FOLLOW ME
      WingTankman_Follow(_LeaderID);
    }
    else
    if (_Order == 1)
    {
      // ATTACK TARGET
      WingTankman_Attack(_TargetID);
    }
    else
    if (_Order == 2)
    {
      // STAY HERE
      WingTankman_Stay();
    }
    else
    if (_Order == 3)
    {
      // PATROL
      WingTankman_Patrol();
    }
    else
    if (_Order == 4)
    {
      // RETURN TO BASE #TODO PLACE
      WingTankman_Retreat();
    }
  }

  // order "Follow me" and "Guard unit"   */
  void WingTankman_Follow(String _FollowID)     // id of object to follow and guard
  {
    logMessage("WingTankman_Follow(\"" + _FollowID + "\")");

    if (_FollowID == "MainPlayerUnit")
    {
      if (m_LeaderID != "")
      {
        Component Leader = (new #GameController()).GetObject(m_LeaderID);
        if ((Leader != null) && !checkMask(Leader, [CLASSIFICATOR_DEAD_OBJECT], []))
        {
          WingTankman_Follow(m_LeaderID);
          return;
        }
        else
        {
          WingTankmanDisconnect();
          StickToNearestLeader();
          return;
        }
      }
      else
      {
        StickToNearestLeader();
        return;
      }
    }
    // $WARNING (m_LeaderID != null) was here
    if (!m_LeaderID.isEmpty() && (m_LeaderID != _FollowID))
    {
      Component GC = new #GameController();
      Component FollowLead = GC.GetObject(_FollowID);
      if ((FollowLead != null) && !checkMask(FollowLead, [CLASSIFICATOR_DEAD_OBJECT], []))
      {
        WingTankmanDisconnect();
        WingTankmanConnect(_FollowID);
        return;
      }
      else
      {
        logError(getIdentificator(user) + ".WingTankman_Follow() - new leader is either null or dead");
        return;
      }
    }

    ClearState();
    m_Follow = true;
    m_FollowID = _FollowID;

    SetAnchorState(true);
    m_AnchorID = _FollowID;
    m_AnchorDistanceMax = GetPlayerRadarRange();

    float max_speed = GetMaxSpeed();
/**/
    SetOrder_Follow(
      _FollowID,
      FOLLOW_DISTANCE_MIN,
      FOLLOW_DISTANCE_OPT,
      FOLLOW_DISTANCE_MAX,
      0.8 * max_speed,
      max_speed);


    setOrder_Formation(
      _FollowID,
      GetFormationVector(),
      FORMATION_DISTANCE_OPT,
      FORMATION_DISTANCE_MAX,
      0.8 * max_speed,
      max_speed,
      false);
  };

  // order "Stay"
  void WingTankman_Stay()
  {
    logMessage("WingTankman_Stay()");

    ClearState();
    m_Stay = true;

    Vector current_position = GetNowPosition();
    m_StayPlace = new Vector(current_position);

    SetOrder_MoveTo(m_StayPlace, GetMaxSpeed());
  };

  // order "Attack"
  void WingTankman_Attack(String _EnemyID)
  {
    logMessage("WingTankman_Attack(\"" + _EnemyID + "\")");

    ClearState();
    m_Attack = true;
    m_EnemyID = _EnemyID;

    SetOrder_Attack(
      _EnemyID,
      GetMaxSpeed());
  };

  // order "Patrol"
  void WingTankman_Patrol()
  {
    logMessage("WingTankman_Patrol(...)");

    Component Point = GetMission().GetObject(GetPersonalNavPointName());
    if (Point == null)
    {
      logError("WingTankman " + getIdentificator(user) + " cannot get personal nav-point");
      return;
    }

    Component me = GetMission().GetObject(getIdentificator(user));
    if (me == null)
    {
        logError("WingTankman " + getIdentificator(user) + " could not get itself");
        return;
    }

    setPosition(Point, getPosition(me));

    ClearState();
    m_Patrol = true;
    m_PatrolPlace = GetPersonalNavPointName();
    m_AnchorID = m_PatrolPlace;
    m_AnchorDistanceMax = GetPlayerRadarRange();
    SetAnchorState(true);

    setOrder_Guard( m_PatrolPlace, 50.0, 0.5 * GetMaxSpeed(),0);
  };


  // order "Retreat"
  void WingTankman_Retreat()
  {
    logMessage("WingTankman_Retreat(...)");

    if (m_HomePointID == "")
    {
      logError("WingTankman " + getIdentificator(user) + " has no place to call 'Home'");
      return;
    }

    Component RetreatPlace = GetMission().GetObject(m_HomePointID);
    if (RetreatPlace == null)
    {
      logError("WingTankman " + getIdentificator(user) + ": 'Base' point identificator is invalid");
      return;
    }
    // $WARNING
    m_RetreatPlace = getPosition(RetreatPlace).origin;

    ClearState();
    m_Retreat = true;

    Harrassers.clear();
    m_LastHystericTime = -1;
    SetFireStyle_NoFire();
    m_WingTankmanReactionLatch = m_EnemyReactionType;
    SetEnemyReactionType(ERT_PASSIVE);
    SetOrder_MoveTo(m_RetreatPlace, GetMaxSpeed());
  };

  // *** Event handlers ***

  void OnQueueOrdersEnd(
      String _OrderGroupID
    )
  {
    if (m_Group != null)
      m_Group.OnQueueOrdersEnd(_OrderGroupID, this);
  }

  void OnStopped()
  {

    if (m_RepeatStay)
    {
      m_RepeatStay = false;
      WingTankman_Stay();
      return;
    }
    if (m_Retreat)
    {
      ClearState();
      return;
    }

    CBaseAITask::OnStopped();
  };

  void OnMoveFailed()
  {
    if (m_Patrol)
      SetOrder_MoveTo(m_PatrolPlace, 0.0);
  };

  void AttackEnemy(
      String _EnemyID
   )
  {
    if (m_CurrentEnemy != "")
        GetMission().m_PlayerGroupEnemies.remove(GetMission().m_PlayerGroupEnemies.find(m_CurrentEnemy));

    GetMission().m_PlayerGroupEnemies.add(_EnemyID);

    CBaseAITask::AttackEnemy(_EnemyID);
  }

  boolean IsEnemyEngaged(
      String _EnemyID
   )
  {
    if (GetMission().m_PlayerGroupEnemies.find(_EnemyID) != -1)
        return true;

    return false;
  }

  void OnEnemyTargeted()
  {
    if (m_Attack)
        return; // players orders are uber alles

    String EnemyID = GetTargetedEnemy();

    if (IsEnemyEngaged(EnemyID))
      return;

    if (!CanAttackPersonally(EnemyID))
      return;

    if (m_Patrol || m_Follow)
      AttackEnemy(EnemyID);
  };

  void OnEnemyLost(String _EnemyID)
  {
    if (_EnemyID == m_CurrentEnemy)
    {
      GetMission().m_PlayerGroupEnemies.remove(GetMission().m_PlayerGroupEnemies.find(_EnemyID));
      m_CurrentEnemy = "";
    }

    // if more enemyes attack another enemy
    String TargetedEnemy = GetTargetedEnemy();
    int Enemies = 1;
    while (TargetedEnemy != "" && Enemies < 20)
    {
      if (!IsEnemyEngaged(TargetedEnemy) && CanAttackPersonally(TargetedEnemy))
      {
        AttackEnemy(TargetedEnemy);
        return;
      }

      TargetedEnemy = GetNextEnemyUnitOnRadar(TargetedEnemy);
      Enemies++;
    }

    if (m_Patrol)
      SetOrder_Guard(m_PatrolPlace, 300.0, 0.1 * GetMaxSpeed());
    if (m_Follow)
      WingTankman_Follow(m_FollowID);
    if (m_Attack)
      WingTankman_Follow(m_LeaderID);
  };

  void OnNoEnemy()
  {
    if (m_CurrentEnemy != "")
    {
        GetMission().m_PlayerGroupEnemies.remove(GetMission().m_PlayerGroupEnemies.find(m_CurrentEnemy));
        m_CurrentEnemy = "";
    }
  }

  Array Harrassers = []; // format: [<ID>, <last time>]

  int GetHarrasserIdx(
      String _EnemyID
   )
  {
    for (int i = 0; i < Harrassers.size(); i++)
    {
      if (Harrassers[i][0] == _EnemyID)
          return i;
    }
    return -1;
  }

  void OnHitByEnemy(
      String _EnemyID
   )
  {
    if (m_Retreat)
      return;

    Component Enemy = GetMission().GetObject(_EnemyID);
    if (Enemy == null) // sanity check
        return;

    if (Enemy.GetAffiliation() == "FRIEND")
      return; // no friendly fire :)

    if (m_EnemyReactionType == ERT_PASSIVE)
      return;

    int CurMenace = MENACE_UNARMED;
    if (m_CurrentEnemy != "")
    {
      Component CurEnemy = GetMission().GetObject(m_CurrentEnemy);
      if (CurEnemy != null)
          CurMenace = CurEnemy.UnitMenacePower;
    }

    int i = GetHarrasserIdx(_EnemyID);
    if (i != -1) // recurrence check
    {
      int TimePassed = getGameTime() - Harrassers[i][1];

      if (TimePassed >= m_HarrassmentTime)
      {
        Harrassers[i][1] = getGameTime();

        if (CanAttackAnyhow(_EnemyID))
        {
          if (Enemy.UnitMenacePower > CurMenace)
            AttackEnemy(_EnemyID);
        }
        else
        {
          sendEvent(0.0, m_LeaderID, "WingTankmanRetreat", [getIdentificator(user)]);
          //WingTankman_Panic();
        }

        return;
      }

      if ((m_LastHystericTime == -1)
        || (getGameTime() - m_LastHystericTime >= m_HarrassmentCryTime))
      {
        m_LastHystericTime = getGameTime();
        WingTankman_Cry();
      }

      return;
    }

    if (!IsEnemyEngaged(_EnemyID))
    {
      if (CanAttackPersonally(_EnemyID))
      {
        if (IsAttacking() || m_Attack)
        {
          if (!(Enemy.UnitMenacePower > CurMenace))
            return;
        }

        AttackEnemy(_EnemyID);
        return;
      }

      if (!CanAttackGroup(_EnemyID))
      {
        sendEvent(0.0, m_LeaderID, "WingTankmanNeedsHelp", [getIdentificator(user), _EnemyID]);
        Harrassers.add([_EnemyID, getGameTime()]);

        if ((m_LastHystericTime == -1)
          || (getGameTime() - m_LastHystericTime >= m_HarrassmentCryTime))
        {
          m_LastHystericTime = getGameTime();
          WingTankman_Cry();
        }
      }
    }
  }

  void OnFriendCame(
      String _FriendID
   )
  {
    //$TMP
    return;
    if (_FriendID == m_LeaderID)
    {
      Component Player = (new #GameController()).GetObject(_FriendID);

      for (int i = 0; i < Player.m_WeaponList.size(); i++)
      {
        if (Player.m_WeaponList[i].CanFire)
            m_GroupWeaponPool.add([m_LeaderID, Player.m_WeaponList[i]]);
      }

      return;
    }

    Array Wingmen = GetMission().GetPlayerObjectsIDList();
    if (Wingmen.find(_FriendID) != -1)
      AddToGroupWeaponPool(_FriendID);
  }

  void OnFriendGone(
      String _FriendID
   )
  {
    //$TMP
    return;
    Array Wingmen = GetMission().GetPlayerObjectsIDList();
    if (Wingmen.find(_FriendID) != -1)
        RemoveFromGroupWeaponPool(_FriendID);
  }

  void OnEnemyCame(
      String _EnemyID
   )
  {
    if (m_Attack)  // don't digress from enemy player wants to see dead
        return;

    Component Enemy = GetMission().GetObject(_EnemyID);
    if (Enemy == null) // sanity check
        return;

    if (IsEnemyEngaged(_EnemyID))
      return;

    if (!CanAttackPersonally(_EnemyID)) // unreachable
      return;

    if (IsAttacking()) // already in process, check menace
    {
      Component CurEnemy = GetMission().GetObject(m_CurrentEnemy);

      if ((CurEnemy != null)
          && (CurEnemy.UnitMenacePower < Enemy.UnitMenacePower))
        AttackEnemy(_EnemyID);
    }

    if (m_Patrol || m_Follow)  // alert state - attack
      AttackEnemy(_EnemyID);
  }

  void OnEnemyGone(
      String _EnemyID
   )
  {
  }

  event void MissionStarted()
  {
    if (m_InstantWingTankman)
    {
      sendEvent(float(m_WingTankmanRank + 1) * 1.0 + 5.0, getIdentificator(user), "WingTankman_SetOrder", []);
      PostDelayedEvent("StickToNearestLeader", [], (m_WingTankmanRank + 1));
    }
  }
}