//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

//Subcalibre 7576_85_88
class CWaterSubcalibre7576_85_88BulletHitDustEffect
  extends CAnimatedParticleGenerator
{
  CWaterSubcalibre7576_85_88BulletHitDustEffect()
  {
    SetAnimationTime(4.0);
    SetEffectTime(4.2);

    SetSamplesQty(20);
    SetSpeed(3.0, 3.0);
    SetDirection(new Vector(0.0, 0.0, 1.0), 9.0);
    SetGravity(CWorldPhysics::GravityVector);

    SetSizeParams(0.8, 0.6);

    final int SamplesQty =
      CEffectsArray::WaterSprayEffectSkin.Materials.size();

    //m_AnimLength = 16;               

    for (int I = 0; I < SamplesQty; I++)
    {
      SetFixedMaterial(new String(I));
      GenerateAnimatedParticle(
        CEffectsArray::WaterSprayEffectSkin, 0, 1.0,
        new Vector(0.0, 0.0, 0.0), new Vector(0.0, 0.0, 0.0),
        new Vector(1.0, 1.0, 1.0), new Vector(4.0, 4.0, 4.0)
      );
    }
  }
}

//Calibre 7576_85_88
class CWaterCalibre7576_85_88BulletHitDustEffect
  extends CWaterExplosionSprayEffect
{

  CWaterCalibre7576_85_88BulletHitDustEffect()
  {
    SetAnimationTime(6.0);
    SetEffectTime(6.0);

    SetSamplesQty(20);
    SetSpeed(7.0, 6.0);
    SetDirection(new Vector(0.0, 0.0, 0.2), 9.0);
    SetGravity(CWorldPhysics::GravityVector);

    SetSizeParams(6.8, 16.6);

    final int SamplesQty =
      CEffectsArray::WaterSprayEffectSkin.Materials.size();

    //m_AnimLength = 16;

    for (int I = 0; I < SamplesQty; I++)
    {
      SetFixedMaterial(new String(I));
      GenerateAnimatedParticle(
        CEffectsArray::WaterSprayEffectSkin, 0, 1.0,
        new Vector(0.0, 0.0, 0.0), new Vector(0.0, 0.0, 0.0),
        new Vector(1.0, 1.0, 1.0), new Vector(4.0, 4.0, 4.0)
      );
    }
  }
}

//HE 7576_85_88
class CWaterHE7576_85_88BulletHitDustEffect
  extends CWaterExplosionSprayEffect
{
  CWaterHE7576_85_88BulletHitDustEffect()
  {
    SetAnimationTime(6.0);
    SetEffectTime(6.0);

    SetSamplesQty(20);
    SetSpeed(7.0, 6.0);
    SetDirection(new Vector(0.0, 0.0, 0.2), 9.0);
    SetGravity(CWorldPhysics::GravityVector);

    SetSizeParams(6.8, 16.6);

    final int SamplesQty =
      CEffectsArray::WaterSprayEffectSkin.Materials.size();

    //m_AnimLength = 16;

    for (int I = 0; I < SamplesQty; I++)
    {
      SetFixedMaterial(new String(I));
      GenerateAnimatedParticle(
        CEffectsArray::WaterSprayEffectSkin, 0, 1.0,
        new Vector(0.0, 0.0, 0.0), new Vector(0.0, 0.0, 0.0),
        new Vector(1.0, 1.0, 1.0), new Vector(4.0, 4.0, 4.0)
      );
    }
  }
}

//class CWaterExplosionSprayEffect
class CWaterExplosionSprayEffect
  extends CBaseRefuseEffect
{
// Data block ...............................................................................
   float EjectionPeriodMS   = 0.001;	//период генерации частицы, (сек)
   float PeriodVarianceMS   = 0.001;   	//рандомизация периода (сек)
   float LifetimeMS         = 0.071;   	//время жизни эмитеера (время выброса частиц, с)
   float EjectionVelocity   = 8.5;   	//начальная скорость частицы (м/с)
   float VelocityVariance   = 2.0;   	//рандомизация начальной скорости (м/с)
   float EjectionOffsetMin  = 0.0;   	//мин радиус эмитеера в нормальной плоскости (м)
   float EjectionOffsetMax  = 0.0;   	//макс радиус эмитеера в нормальной плоскости (м)
   float ShiftVariance      = 1.0;   	//смещение вдоль вектора начальной скорости (м)
   float Shift              = 0.0;   	//рандомизация смещени

   int ThetaMin             = 0;    	//мин отклонение скорости частицы от норм эмиттера
   int ThetaMax             = 60;    	//макс отклонение
   int PhiReferenceVel      = 0;     	//начало сектора генерации в норм плоскости (град)
   int PhiVariance          = 360;   	//конец сектора генерации в  (град, 0-360 -круг)
   boolean OverrideAdvances = false; 	//использование частицами локала эмитеера
							//  (true-да, false - нет)
   boolean OrientParticles  = true;  	//ориентация нормалей частиц "на камеру"
							//  (true-да, false - нет)
   boolean m_LightingParticle = false; 	//освещенность патиклов (true-да, false - нет)
   float m_LightingInterpolate = 0.5;  	//смещение серого к свету (0-1)

   String TexName           = "textures/Eff_test4.tex";	//имя файла текстуры

   boolean UseInvAlpha      = true;  	//тип прозрачности false - аддитивная,
							//  true - нормальна
   int     TexSize          = 128;    	//размер текстуры в пикселах
   int     TexFrameX        = 128;     	//размер кадра по ширине
   int     TexFrameY        = 128;     	//размер кадра по высоте

   String ParticlesClass    = "CWaterExplosionSprayParticle";    //имя описателя частиц

// Data block ...............................................................................
CWaterExplosionSprayEffect()
   {
     String Transparency = "NORMAL";
     if(!UseInvAlpha)
       Transparency = "ADDITIVE";
     CBaseRefuseEffectSkin::TexName = TexName;
     CBaseRefuseEffectSkin::Transparency = Transparency;
     CBaseRefuseEffectSkin::Size = TexSize;
     CBaseRefuseEffectSkin::XSize = TexFrameX;
     CBaseRefuseEffectSkin::YSize = TexFrameY;
     CBaseRefuseEffect::Init();
   }
}
// ОПИСАНИЕ ЧАСТИЦ --------------------------------------------------------------------------
class CWaterExplosionSprayParticle
  extends CBaseRefuseParticle
{
// Data block ..............................................................................
   float ParticleLifetimeMS         = 2.5;  		//время жизни частицы (сек)
   float ParticleLifetimeVarianceMS = 0.6;		//вариация времени жизни(сек)
   float DragCoefficient            = 0.4;		//not in use
   float GravityCoefficient         = 0.60;		//коэффициент влияния гравитации
   float InheritedVelFactor         = 1.0;		//коэффициент наследования начальной
									// скорости эмитеера
   float ConstantAcceleration       = -0.15;		//собственное усокрение

   float SpinRandomMin              = -3.1;		//мин поворот частицы вокруг
									// своей нормали (-3.14 до 3.14)
   float SpinRandomMax              =  3.1;		//макс (-3.14 до 3.14)
   float SpinSpeed                  =  0.001;		//скорость вращени
//БЛОК ДИНАМИКИ ---------------------------------------------------------------------------
  Array times  = [0.1, 1.1, 2.7, 3.0];			//временные периоды в течение
									// жизни частицы (до 8 периодов)

  Array colors = [ 						//цвет и альфа частицы по периодам
                    new Color(0.9, 0.9, 0.9, 0.3),
                    new Color(0.9, 0.9, 0.9, 0.4),
                    new Color(0.9, 0.9, 0.9, 0.4),
                    new Color(0.9, 0.9, 0.9, 0.4)
                  ];

   Array sizes  = [1.3, 1.8, 2.5, 3.0];			//размер частицы по периодам (масштаб)

   Array frames = [                           		//кадры анимации между периодами
					[0],
					[0],
					[0]
                  ];
// Data block ..............................................................................
}

