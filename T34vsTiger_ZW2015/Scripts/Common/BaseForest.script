//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CTreeDescriptor
{
  CTreeDescriptor()
  {
    IsPhysicaly = false;
  }

  CTreeDescriptor(
      String  _NormalModelClass,
      String  _DamagedModelClass,
      String  _RootSystemTexture,
      float   _RootSystemSize
    )
  {
    NormalModelClass   = _NormalModelClass;
    DamagedModelClass  = _DamagedModelClass;

    RootSystemTexture  = _RootSystemTexture;
    RootSystemSize     = _RootSystemSize;

    IsPhysicaly = false;
  }

  CTreeDescriptor(
      String  _NormalModelClass,
      String  _DamagedModelClass,
      String  _RootSystemTexture,
      float   _RootSystemSize,
      float   _FallEnergy,
      float   _TreeRadius
    )
  {
    NormalModelClass   = _NormalModelClass;
    DamagedModelClass  = _DamagedModelClass;

    RootSystemTexture  = _RootSystemTexture;
    RootSystemSize     = _RootSystemSize;

    IsPhysicaly  = true;
    FallEnergy   = _FallEnergy;
    BounceCoeff  = 0.2;
    Acceleration = 0.4;
    TreeRadius   = _TreeRadius;
  }

  String    NormalModelClass;
  String    DamagedModelClass;

  boolean   IsPhysicaly;
  float     FallEnergy;
  float     BounceCoeff;
  float     Acceleration;
  float     TreeRadius;
  boolean   IsSkipContact     = false;

  String    FallEffectId      = "BaseBuildingExplosionSmokeEffect";
  String    FallSoundId       = "LargeTreeFallSound";

  // Root system
  String    RootSystemTexture = "Textures/effect_sign.tex";
  float     RootSystemSize    = 1.5f;

  float     Elasticity        = 0.0f;
  float     Friction          = 0.0f;
}

class CSmallTreeDescriptor
{
  String    NormalModelClass = "";
  String    DamagedModelClass = "";

  boolean   IsPhysicaly   = true;
  float     FallEnergy    = 10.0;

  float     BounceCoeff   = 0.01;
  float     Acceleration  = 3.5;
  float     TreeRadius    = 0.1;
  boolean   IsSkipContact = true;

  String    FallEffectId  = "BaseBuildingExplosionSmokeEffect";
  String    FallSoundId   = "SmallTreeFallSound";;

  String    RootSystemTexture = "Textures/TreeSign_FirScotch.tex";
  float     RootSystemSize    = 0.25f;

  float     Elasticity        = 0.5f;
  float     Friction          = 0.0f;
}

class CAppleTreeDescriptor
{
  String    NormalModelClass  = "";
  String    DamagedModelClass = "";

  boolean   IsPhysicaly   = true;
  float     FallEnergy    = 10.0;

  float     BounceCoeff   = 0.01;
  float     Acceleration  = 3.5;
  float     TreeRadius    = 0.1;
  boolean   IsSkipContact = true;

  String    FallEffectId  = "BaseBuildingExplosionSmokeEffect";
  String    FallSoundId   = "SmallTreeFallSound";;

  String    RootSystemTexture = "Textures/TreeSign_LightBranchLeaf.tex";
  float     RootSystemSize    = 0.20f;

  float     Elasticity        = 0.5f;
  float     Friction          = 0.0f;
}

class CSmallAppleTreeDescriptor extends CAppleTreeDescriptor
{
  String    NormalModelClass  = "";
  String    DamagedModelClass = "";
}


class CBushDescriptor
{
  String    NormalModelClass = "CBulfordHolly";
  String    DamagedModelClass = "CBulfordHollyDestroyed";

  boolean   IsPhysicaly   = true;
  float     FallEnergy    = 10.0;
  float     BounceCoeff   = 0.01;
  float     Acceleration  = 2.8;
  float     TreeRadius    = 0.1;
  boolean   IsSkipContact = true;

  String    FallEffectId  = "BaseBuildingExplosionSmokeEffect";
  String    FallSoundId   = "SmallTreeFallSound";

  String    RootSystemTexture = "Textures/TreeSign_FirScotch.tex";
  float     RootSystemSize    = 0.5f;

  float     Elasticity        = 0.5f;
  float     Friction          = 0.0f;
}

class CLargeBushDescriptor
{
  String    NormalModelClass = "CBulfordHollyLarge";
  String    DamagedModelClass = "CBulfordHollyLargeDestroyed";

  boolean   IsPhysicaly   = true;
  float     FallEnergy    = 10.0;
  float     BounceCoeff   = 0.01;
  float     Acceleration  = 2.8;
  float     TreeRadius    = 0.1;
  boolean   IsSkipContact = true;

  String    FallEffectId  = "BaseBuildingExplosionSmokeEffect";
  String    FallSoundId   = "SmallTreeFallSound";

  String    RootSystemTexture = "Textures/TreeSign_FirScotch.tex";
  float     RootSystemSize    = 1.0f;

  float     Elasticity        = 0.5f;
  float     Friction          = 0.0f;
}

class CBaseForest
{
  int     QuadtreeDepth     = 8;
  int     TemplateSize      = 128;
  Array   LevelDistribution = [ 1600,   3200,   4800,   6400,   8000   ];
  Array   LevelRangeMin     = [ 2600.0, 2100.0, 1600.0, 1100.0, 600.0  ];
  Array   LevelRangeMax     = [ 2600.0, 2400.0, 2200.0, 2000.0, 1800.0 ];

  float   BurnDelay         = 10.0;
  float   ModelDistance     = 15.0;

  float   ShiftRange        = 0.01;

  float   HighDensityFactor = 8.0;

  // Distances for non-bordered cells
  float   MinVariableDistance          = 300.0;
  float   MaxVariableDistance          = 650.0;
  // Distances for bordered cells
  int     BorderCells                  = 2;
  float   MinVariableDistanceForBorder =  900.0;
  float   MaxVariableDistanceForBorder = 1000.0;

  //Max Distance for tree root system
  float   MaxVariableDistanceForRoot   = 400.0;

  //Min Distance for tree root system
  float   MinVariableDistanceForRoot   = 100.0;

  boolean TreeBillboardUpZ             = true;

  float   LeaveWindWeight              = 0.15; //влеяние ветра на листву деревьев

  String  BulletHitEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  BulletHitSound    = "ForestBulletHitSound";
  String  ExplosionEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  ExplosionSound    = "ForestBulletHitSound";

  //
  //  Trees in format
  //
  final static Component Fir_short            = new CTreeDescriptor("CFir_short",       "CFir_shortDestroyed",         "Textures/TreeSign_LightBranchLeaf.tex", 1.5,  100.0, 0.1);
//  final static Component Fir_short            = new CSmallTreeDescriptor();
  final static Component Fir_tall_bend        = new CTreeDescriptor("CFir_tall_bend",     "CFir_tall_bendDestroyed",     "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component Fir_tall             = new CTreeDescriptor("CFir_tall",          "CFir_tallDestroyed",          "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component FirScotch            = new CTreeDescriptor("CFirScotch",         "CFirScotchDestroyed",         "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component FirScotchSmall       = new CTreeDescriptor("CFirScotchSmall",    "CFirScotchSmallDestroyed",    "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_med           = new CTreeDescriptor("CLinden_med",        "CLinden_Med_Destroyed",       "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja korafinal static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_small         = new CTreeDescriptor("CLinden_small",      "CLinden_Small_Destroyed",     "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Birch                = new CTreeDescriptor("CBirch",             "CBirchDestroyed",             "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component SmallBirch           = new CTreeDescriptor("CSmallBirch",        "CSmallBirchDestroyed",        "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component AppleTree            = new CAppleTreeDescriptor();
  final static Component SmallAppleTree       = new CSmallAppleTreeDescriptor();
  final static Component LiveOak              = new CTreeDescriptor("CLiveOak",           "CLiveOakDestroyed",           "Textures/TreeSign_FirScotch.tex", 4.5,  1000.0, 0.1);  //Temnaja kora
  final static Component BulfordHolly         = new CBushDescriptor();
  final static Component Holly                = new CTreeDescriptor("CHolly",      "CHollyDestroyed",      "Textures/TreeSign_FirScotch.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component BulfordHollyLarge    = new CBushDescriptor();
//final static Component BulfordHollyLarge    = new CTreeDescriptor("CBulfordHollyLarge", "CBulfordHollyLargeDestroyed", "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component NullTree             = null;
}

class CShrubbery
{
  int   CreationCount = 2;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::BulfordHolly,   1.0]
                                  ];
}

class CShrubberyLarge
{
  int   CreationCount = 2;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::BulfordHollyLarge,   1.0]
                                  ];
}

class CExtraLightForest
{
  int   CreationCount = 2;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::FirScotchSmall,0.3],
                                    [CBaseForest::BulfordHolly, 0.5],
                                    [CBaseForest::BulfordHollyLarge,   0.3],
                                    [CBaseForest::Linden_small,       0.6]
                                  ];
}

class CLiveOakForest
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::LiveOak, 1.0]
                                  ];
}

class CLightForest    
{
  int   CreationCount = 1;
  float MinDistance   = 2.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::Fir_tall,0.3],
                                    [CBaseForest::FirScotchSmall,0.4],
                                    [CBaseForest::NullTree,         0.5],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseForest::BulfordHolly,   0.3]
                                  ];
}

class CMiddleForest
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::Fir_tall_bend,  0.20],
                                    [CBaseForest::Fir_tall,       0.20],
                                    [CBaseForest::FirScotch,      0.25],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseForest::FirScotchSmall, 0.95],
                                    [CBaseForest::NullTree,       0.20]
                                  ];
}

class CLargeForest
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseForest::Fir_tall_bend,  0.20],
                                    [CBaseForest::Fir_tall,       0.45],
                                    [CBaseForest::FirScotch,      0.95],
                                    [CBaseForest::Fir_short,      0.26],
                                    [CBaseForest::FirScotchSmall, 0.25]
                                  ];
}

class CSTBaseForestC1 extends CBaseForest, CBaseZoneMap  //
{
  //
  // Settings
  //

  Array ZoneValues = [
//      ZMC_Forest01,
//      ZMC_Forest02,
//      ZMC_Forest03,
//      ZMC_Forest04,
//      ZMC_Forest05,
//      ZMC_Forest06,
//      ZMC_Forest07,
//      ZMC_Forest08,
//      ZMC_Forest09
    ];

 Array CellTemplates = [
   [
    27,
    false,
    new CExtraLightForest()
   ],

   [
    28,
    true,
    new CLightForest()
   ],

   [
    29,
    true,
    new CMiddleForest()
   ],

   [
    30,
    true,
    new CLargeForest()
   ],

   [
    ZMC_ShrubberyCasual,
    false,
    new CShrubbery()
   ],

   [
     ZMC_Forest02,
     true,
//     20,
     new CLightForest()
   ],

   [
    ZMC_ShrubberyLarge,
    false,
    new CShrubberyLarge()
   ],

   [
    ZMC_SpecialLongAloneTree,
   // [BulfordHolly, -3.0,  3.0],
    [FirScotch,  0.0,  0.0],
    [BulfordHolly, -5.0,  -2.0],
    [BulfordHollyLarge,  2.0,  -3.0]
   ],

   [
    ZMC_ShrubberyRegular,
   // [BulfordHolly, -3.0,  3.0],
    [BulfordHolly,  2.0,  0.0],
    [BulfordHollyLarge, 0.0,  0.0],
    [BulfordHolly,  3.0,  -3.0]
   ],

   [
    ZMC_VillagePlanting01,
    [Linden, 2.0, 2.0],
    [BulfordHolly,  1.0, -1.0],
    [BulfordHolly, -1.0, -3.0]
   ],

   [
    ZMC_VillagePlanting02,
    [Linden, 2.0, 3.0],
    [Linden, -1.0, -2.0],
    [BulfordHolly, 1.0, -1.0]
   ],

   [
    ZMC_VillagePlanting03,
    [AppleTree, -1.5, 3.0],
    [SmallAppleTree, 0.0, -3.0]
   ],

   [
    ZMC_RoadForest,
    [FirScotchSmall, 2.0, 3.0],
    [Fir_short, 0.0, 0.0],
    [BulfordHolly, -1.0, -3.0]
   ],

   [
    ZMC_Forest03,
    [BulfordHollyLarge,  2.0, 1.0],
    [Linden, 0.0, 0.0],
    [BulfordHolly, -6.0,  -4.0],
    [Fir_short,  2.0, -5.0],
    [Linden_med, -4.0, 3.0],
    [Linden_small, 4.0, -4.0]
   ]
  ];

  Array VariableTemplates = [
      [
        ZMC_Forest04,
        20,
       new CLargeForest() 
      ],

      [
        ZMC_Forest01,
        20,
        new CMiddleForest()
      ]

 /*     [
        ZMC_Forest02,
        20,
        new CMiddleForest()
      ],

      [
        ZMC_Forest03,
        20,
        new CExtraLightForest()
      ]   */
    ];


  Array     Descriptors = [];

  Component MissionAtmosphere = null;
  Component MaterialManager = new #MaterialManager<CSTBaseForestC1Materials>();

  CSTBaseForestC1(
      Component _MissionAtmosphere
    )
  {
    MissionAtmosphere = _MissionAtmosphere;
  }
}

class CSTBaseForestC1Materials
{
  Array Materials = [
/*
      new CSubstanceMaterial(
          "",
          CMaterialStructure::MSID_Wood
        ),

      new CSubstanceMaterial(
          "FirShort",
          CMaterialStructure::MSID_Metal
        ),
 */

      new CSubstanceMaterial(
          "bush",
          CMaterialStructure::MSID_Bush
        )

    ];
}

class CSTBaseForestC1Skin
{
  // "DISABLE",      // вылезающий слой с альфой
  // "NORMAL",       // невылезающий слой с альфой
  // "ADDITIVE",     // невылезающий без альфы

  Array Materials = [
       new CForestPlaneMaterial(
          "L1",
          "Textures/Forest_1.tex",
          "DISABLE"     //NORMAL используется только для определения нижнего сло

        ),

       new CForestPlaneMaterial(
          "L2",
          "Textures/Forest_2.tex",
          "DISABLE"                  //   NORMAL

        ),

       new CForestPlaneMaterial(
          "L3",
          "Textures/Forest_3.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L4",
          "Textures/Forest_4.tex",
          "DISABLE"

        ),
      new CForestPlaneMaterial(
          "L5",
          "Textures/Forest_5.tex",
          "DISABLE"

        )/*,
      new CForestShadowMaterial(
          "L6",
          "Textures/Forest_4.tex",
          "NORMAL"
        )*/
    ];
}
//==================================LowLand==================================================

class CBaseLowLandForest
{
  int     QuadtreeDepth     = 8;
  int     TemplateSize      = 128;
  Array   LevelDistribution = [ 1600,   3200,   4800,   6400,   8000   ];
  Array   LevelRangeMin     = [ 2600.0, 2100.0, 1600.0, 1100.0, 600.0  ];
  Array   LevelRangeMax     = [ 2600.0, 2400.0, 2200.0, 2000.0, 1800.0 ];

  float   BurnDelay         = 10.0;
  float   ModelDistance     = 15.0;

  float   ShiftRange        = 0.01;

  float   HighDensityFactor = 8.0;

  // Distances for non-bordered cells
  float   MinVariableDistance          = 400.0;
  float   MaxVariableDistance          = 550.0;
  // Distances for bordered cells
  int     BorderCells                  = 2;
  float   MinVariableDistanceForBorder =  400.0;
  float   MaxVariableDistanceForBorder = 1000.0;

  //Max Distance for tree root system
  float   MaxVariableDistanceForRoot   = 400.0;

  //Min Distance for tree root system
  float   MinVariableDistanceForRoot   = 100.0;

  boolean TreeBillboardUpZ             = true;

  float   LeaveWindWeight              = 0.15; //влеяние ветра на листву деревьев

  String  BulletHitEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  BulletHitSound    = "ForestBulletHitSound";
  String  ExplosionEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  ExplosionSound    = "ForestBulletHitSound";
   //
  //  Trees in format
  //
  final static Component Fir_short            = new CTreeDescriptor("CFir_short",       "CFir_shortDestroyed",         "Textures/TreeSign_LightBranchLeaf.tex", 1.5,  100.0, 0.1);
//  final static Component Fir_short            = new CSmallTreeDescriptor();
  final static Component Fir_tall_bend        = new CTreeDescriptor("CFir_tall_bend",     "CFir_tall_bendDestroyed",     "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component Fir_tall             = new CTreeDescriptor("CFir_tall",          "CFir_tallDestroyed",          "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component FirScotch            = new CTreeDescriptor("CFirScotch",         "CFirScotchDestroyed",         "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component FirScotchSmall       = new CTreeDescriptor("CFirScotchSmall",    "CFirScotchSmallDestroyed",    "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_med           = new CTreeDescriptor("CLinden_med",        "CLinden_Med_Destroyed",       "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja korafinal static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_small         = new CTreeDescriptor("CLinden_small",      "CLinden_Small_Destroyed",     "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Birch                = new CTreeDescriptor("CBirch",             "CBirchDestroyed",             "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component SmallBirch           = new CTreeDescriptor("CSmallBirch",        "CSmallBirchDestroyed",        "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component AppleTree            = new CAppleTreeDescriptor();
  final static Component SmallAppleTree       = new CSmallAppleTreeDescriptor();
  final static Component LiveOak              = new CTreeDescriptor("CLiveOak",           "CLiveOakDestroyed",           "Textures/TreeSign_FirScotch.tex", 4.5,  1000.0, 0.1);  //Temnaja kora
  final static Component BulfordHolly         = new CBushDescriptor();
  final static Component Holly                = new CTreeDescriptor("CHolly",      "CHollyDestroyed",      "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component BulfordHollyLarge    = new CBushDescriptor();
//final static Component BulfordHollyLarge    = new CTreeDescriptor("CBulfordHollyLarge", "CBulfordHollyLargeDestroyed", "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component NullTree             = null;
}

class CShrubbery_low
{
  int   CreationCount = 2;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::BulfordHolly,   1.0]
                                  ];
}

class CShrubberyLarge_low
{
  int   CreationCount = 2;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::BulfordHollyLarge,   1.0]
                                  ];
}

class CExtraLightForest_low
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::Linden_small,0.8],
                                    [CBaseLowLandForest::BulfordHolly, 0.4],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseLowLandForest::Linden_small,       0.6],
                                    [CBaseLowLandForest::NullTree,      0.15]
                                  ];
}

class CLiveOakForest_low
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::LiveOak, 1.0]
                                  ];
}

class CLightForest_low
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::Linden_small,      0.6],
                                    [CBaseLowLandForest::BulfordHolly,   0.4],
                                    [CBaseLowLandForest::Linden_med,       0.6],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseLowLandForest::Linden_small, 0.5],
                                    [CBaseLowLandForest::Linden,      0.5]
                                  ];
}

class CMiddleForest_low
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::Linden_med,  0.20],
                                    [CBaseLowLandForest::Linden_small,       0.40],
                                    [CBaseLowLandForest::Linden,      0.25],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseForest::BulfordHolly,   0.4],
                                    [CBaseLowLandForest::NullTree,       0.10]
                                  ];
}

class CLargeForest_low
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseLowLandForest::Linden,  0.3],
                                    [CBaseLowLandForest::BulfordHolly,   0.3],
                                    [CBaseForest::BulfordHollyLarge,   0.4],
                                    [CBaseLowLandForest::Linden_med,      0.36],
                                    [CBaseLowLandForest::Linden_small, 0.5]
                                  ];
}

class CSTBaseLowLandForestC1 extends CBaseLowLandForest, CBaseZoneMap
{
  //
  // Settings
  //

  Array ZoneValues = [
//      ZMC_Forest01,
//      ZMC_Forest02,
//      ZMC_Forest03,
//      ZMC_Forest04,
//      ZMC_Forest05,
//      ZMC_Forest06,
//      ZMC_Forest07,
//      ZMC_Forest08,
//      ZMC_Forest09
    ];

 Array CellTemplates = [
   [
    27,
    true,
    new CLightForest_low()
   ],

   [
    28,
    true,
    new CLightForest_low()
   ],

   [
    29,
    true,
    new CMiddleForest_low()
   ],

   [
    30,
    true,
    new CMiddleForest_low()
   ],

   [
    ZMC_ShrubberyCasual,
    false,
    new CShrubbery_low()
   ],

   [
     ZMC_Forest02,
     true,
//     20,
     new CMiddleForest_low()
   ],

   [
    ZMC_ShrubberyLarge,
    false,
    new CShrubberyLarge_low()
   ],

   [
    ZMC_SpecialLongAloneTree,
    [BulfordHolly, -3.0,  3.0],
    [Linden,  2.0,  0.0],
    [BulfordHolly, -2.0,  -3.0],
    [BulfordHollyLarge,  3.0,  -3.0]
   ],

   [
    ZMC_ShrubberyRegular,
    [BulfordHolly, -3.0,  3.0],
    [BulfordHolly,  2.0,  0.0],
    [BulfordHollyLarge, -2.0,  -3.0],
    [BulfordHolly,  3.0,  -3.0]
   ],

   [
    ZMC_VillagePlanting01,
    [Linden, 2.0, 2.0],
    [BulfordHolly,  1.0, -1.0],
    [BulfordHolly, -1.0, -3.0]
   ],

   [
    ZMC_VillagePlanting02,
    [Linden, 2.0, 3.0],
    [Linden, -1.0, -2.0],
    [BulfordHolly, 1.0, -1.0]
   ],

   [
    ZMC_VillagePlanting03,
    [AppleTree, -1.5, 3.0],
    [SmallAppleTree, 0.0, -3.0]
   ],

   [
    ZMC_RoadForest,
    [Linden_small, 4.0, 2.0],
    [Linden, 0.0, 0.0],
    [BulfordHolly, -2.0, -1.0]
   ],

   [
    ZMC_Forest03,
    [BulfordHolly,  -2.0, 2.0],
    [Linden, 0.0, 0.0],
    [Linden_small,        2.0, 5.0]
   ]
  ];

  Array VariableTemplates = [
      [
        ZMC_Forest01,
        10,
        new CLightForest_low()
      ],

      [
        ZMC_Forest04,
        10,
        new CLightForest_low()
      ]/*,

     [
        ZMC_Forest02,
        10,
        new CLightForest_low()
      ],

      [
        ZMC_Forest03,
        10,
        new CLightForest_low()
      ]    */
    ];


  Array     Descriptors = [];

  Component MissionAtmosphere = null;
  Component MaterialManager = new #MaterialManager<CSTBaseLowLandForestC1Materials>();

  CSTBaseLowLandForestC1(
      Component _MissionAtmosphere
    )
  {
    MissionAtmosphere = _MissionAtmosphere;
  }
}

class CSTBaseLowLandForestC1Materials
{
  Array Materials = [
/*
      new CSubstanceMaterial(
          "",
          CMaterialStructure::MSID_Wood
        ),

      new CSubstanceMaterial(
          "FirShort",
          CMaterialStructure::MSID_Metal
        ),
 */

      new CSubstanceMaterial(
          "bush",
          CMaterialStructure::MSID_Bush
        )

    ];
}

class CSTBaseLowLandForestC1Skin
{
  // "DISABLE",      // вылезающий слой с альфой
  // "NORMAL",       // невылезающий слой с альфой
  // "ADDITIVE",     // невылезающий без альфы

  Array Materials = [
       new CForestPlaneMaterial(
          "L1",
          "Textures/Forest_1.tex",
          "DISABLE"     //NORMAL используется только для определения нижнего сло

        ),

       new CForestPlaneMaterial(
          "L2",
          "Textures/Forest_2.tex",
          "DISABLE"                  //   NORMAL

        ),

       new CForestPlaneMaterial(
          "L3",
          "Textures/Forest_3.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L4",
          "Textures/Forest_4.tex",
          "DISABLE"

        ),
      new CForestPlaneMaterial(
          "L5",
          "Textures/Forest_5.tex",
          "DISABLE"

        )/*,
      new CForestShadowMaterial(
          "L6",
          "Textures/Forest_4.tex",
          "DISABLE"
        )*/
    ];
}

//==========================================WINTER==========================================WINTER

class CBaseWinterForest
{
  int     QuadtreeDepth     = 8;
  int     TemplateSize      = 128;
  Array   LevelDistribution            = [ 1600   ];
  Array   LevelRangeMin                = [ 2600.0 ];
  Array   LevelRangeMax                = [ 2600.0 ];

  float   BurnDelay         = 10.0;
  float   ModelDistance     = 15.0;

  float   ShiftRange        = 0.01;

  float   HighDensityFactor = 8.0;

  // Distances for non-bordered cells
  float   MinVariableDistance          = 400.0;
  float   MaxVariableDistance          = 550.0;
  // Distances for bordered cells
  int     BorderCells                  = 2;
  float   MinVariableDistanceForBorder =  400.0;
  float   MaxVariableDistanceForBorder = 800.0;

  //Max Distance for tree root system
  float   MaxVariableDistanceForRoot   = 400.0;

  //Min Distance for tree root system
  float   MinVariableDistanceForRoot   = 100.0;

  boolean TreeBillboardUpZ             = true;

  float   LeaveWindWeight              = 0.15; //влеяние ветра на листву деревьев

  String  BulletHitEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  BulletHitSound    = "ForestBulletHitSound";
  String  ExplosionEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  ExplosionSound    = "ForestBulletHitSound";

  //
  //  Trees in format
  //
  final static Component Fir_short            = new CTreeDescriptor("CFir_short_W",         "CFir_shortDestroyed_W",          "Textures/TreeSign_FirTall.tex", 0.8,  1000.0, 0.1);
  //final static Component Fir_short            = new CTreeDescriptor("CFir_tall_bend_W",     "CFir_tall_bendDestroyed_W",     "Textures/TreeSign_FirTall.tex", 0.8,  1000.0, 0.1);
  final static Component Fir_tall_bend        = new CTreeDescriptor("CFir_tall_bend_W",     "CFir_tall_bendDestroyed_W",     "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component Fir_tall             = new CTreeDescriptor("CFir_tall_W",          "CFir_tallDestroyed_W",          "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component FirScotch            = new CTreeDescriptor("CFirScotch_W",         "CFirScotchDestroyed_W",         "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component FirScotchSmall       = new CTreeDescriptor("CFirScotchSmall_W",    "CFirScotchSmallDestroyed_W",    "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component Linden               = new CTreeDescriptor("CLinden_W",            "CLindenDestroyed_W",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_med           = new CTreeDescriptor("CLinden_med_W",        "CLinden_Med_Destroyed_W",       "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja korafinal static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_small         = new CTreeDescriptor("CLinden_small_W",      "CLinden_Small_Destroyed_W",     "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Birch                = new CTreeDescriptor("CBirch_W",             "CBirchDestroyed_W",             "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component SmallBirch           = new CTreeDescriptor("CSmallBirch_W",        "CSmallBirchDestroyed_W",        "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component AppleTree            = new CAppleTreeDescriptor();
  final static Component SmallAppleTree       = new CSmallAppleTreeDescriptor();
  final static Component LiveOak              = new CTreeDescriptor("CLiveOak_W",           "CLiveOakDestroyed_W",           "Textures/TreeSign_FirScotch.tex", 4.5,  1000.0, 0.1);  //Temnaja kora
  final static Component BulfordHolly         = new CBushDescriptor();
  //final static Component BulfordHolly         = new CTreeDescriptor("CBulfordHolly_W",      "CBulfordHollyDestroyed",      "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component BulfordHollyLarge    = new CLargeBushDescriptor();
//final static Component BulfordHollyLarge    = new CTreeDescriptor("CBulfordHollyLarge_W", "CBulfordHollyLargeDestroyed", "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component NullTree             = null;
}

class CShrubbery_W
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::Linden,   0.1]
                                  ];
}

class CShrubberyLarge_W
{
  int   CreationCount = 1;
  float MinDistance   = 5.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::Linden,   0.1]
                                  ];
}

class CExtraLightForest_W
{
  int   CreationCount = 1;
  float MinDistance   = 5.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::Linden,      0.2],
                                    [CBaseWinterForest::Linden_med,  0.2],
                                    [CBaseWinterForest::FirScotch,0.2],
                                    [CBaseWinterForest::NullTree,      0.15]
                                  ];
}

class CLiveOakForest_W
{
  int   CreationCount = 1;
  float MinDistance   = 1.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::LiveOak, 1.0]
                                  ];
}

class CLightForest_W
{
  int   CreationCount = 1;
  float MinDistance   = 5.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::Fir_short,      0.2],
                                    [CBaseWinterForest::FirScotch,  0.2],
                                    [CBaseWinterForest::Linden_med,       0.2],
                                    [CBaseWinterForest::FirScotchSmall, 0.2],
                                    [CBaseWinterForest::Fir_tall,      0.2]
                                  ];
}

class CMiddleForest_W
{
  int   CreationCount = 1;
  float MinDistance   = 5.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::FirScotch,  0.20],
                                    [CBaseWinterForest::Fir_tall,       0.10],
                                    [CBaseWinterForest::FirScotch,      0.25],
                                    [CBaseWinterForest::FirScotchSmall,      0.21],
                                    [CBaseWinterForest::Fir_short,     0.22],
                                    [CBaseWinterForest::NullTree,      0.23]
                                  ];
}

class CLargeForest_W
{
  int   CreationCount = 1;
  float MinDistance   = 7.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterForest::Fir_tall_bend,  0.20],
                                    [CBaseWinterForest::FirScotch,       0.20],
                                    [CBaseWinterForest::Fir_short,      0.15],
                                    [CBaseWinterForest::FirScotchSmall,      0.20],
                                    [CBaseWinterForest::Fir_tall,       0.22]
                                  ];
}

class CSTBaseWinterForestC1 extends CBaseWinterForest, CBaseZoneMap
{
  //
  // Settings
  //

  Array ZoneValues = [
//      ZMC_Forest01,
//      ZMC_Forest02,
//      ZMC_Forest03,
//      ZMC_Forest04,
//      ZMC_Forest05,
//      ZMC_Forest06,
//      ZMC_Forest07,
//      ZMC_Forest08,
//      ZMC_Forest09
    ];

 Array CellTemplates = [
   [
    27,
    false,
    new CExtraLightForest_W()
   ],

   [
    28,
    true,
    new CLightForest_W()
   ],

   [
    29,
    true,
    new CMiddleForest_W()
   ],

   [
    30,
    true,
    new CLargeForest_W()
   ],

   [
    ZMC_ShrubberyCasual,
    false,
    new CShrubbery_W()
   ],

   [
     ZMC_Forest02,
     true,
//     20,
     new CLightForest_W()
   ],

   [
    ZMC_ShrubberyLarge,
    false,
    new CShrubberyLarge_W()
   ],

   [
    ZMC_SpecialLongAloneTree,
    [FirScotch,  2.0,  0.0]

   ],

   [
    ZMC_ShrubberyRegular,
    [Linden_small, 0.0,  3.0]
   ],

   [
    ZMC_VillagePlanting01,
    [Linden, 2.0, 2.0],
    [FirScotchSmall,  1.0, -1.0]
   ],

   [
    ZMC_VillagePlanting02,
    [Linden, 2.0, 3.0],
    [Linden, -1.0, -2.0]
   ],

   [
    ZMC_VillagePlanting03,
    [Linden_small, 0.0, -3.0]
   ],

   [
    ZMC_RoadForest,
    [FirScotchSmall, 4.0, 2.0],
    [FirScotch, 0.0, 0.0]
   ],

   [
     ZMC_Forest03,
    [Linden,  1.0, 0.0],
    [Linden_small,  -2.0, 4.0],
    [Linden_med, -4.0, 2.0]
   ]
  ];

  Array VariableTemplates = [
      [
        ZMC_Forest04,
        20,
        new CLargeForest_W()
      ],

      [
        ZMC_Forest01,
        20,
        new CMiddleForest_W()
      ]/*,

     [
        ZMC_Forest02,
        20,
        new CLightForest_W()
      ],

      [
        ZMC_Forest03,
        20,
        new CLiveOakForest_W()
      ]   */
    ];


  Array     Descriptors = [];

  Component MissionAtmosphere = null;
  Component MaterialManager = new #MaterialManager<CSTBaseWinterForestC1Materials>();

  CSTBaseWinterForestC1(
      Component _MissionAtmosphere
    )
  {
    MissionAtmosphere = _MissionAtmosphere;
  }
}

class CSTBaseWinterForestC1Materials
{
  Array Materials = [

      new CSubstanceMaterial(
          "bush",
          CMaterialStructure::MSID_Bush
        )

    ];
}
class CSTBaseWinterForestC1Skin
{
  // "DISABLE",
  // "NORMAL",
  // "ADDITIVE",     

  Array Materials = [
       new CForestPlaneMaterial(
          "L1",
          "Textures/Winter/Forest_1.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L2",
          "Textures/Winter/Forest_2.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L3",
          "Textures/Winter/Forest_3.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L4",
          "Textures/Winter/Forest_4.tex",
          "DISABLE"

        ),
      new CForestPlaneMaterial(
          "L5",
          "Textures/Winter/Forest_5.tex",
          "DISABLE"
        )

    ];
}
//==========================================WINTER-LowLand==========================================WINTER

class CBaseWinterLowLandForest
{
  int     QuadtreeDepth     = 8;
  int     TemplateSize      = 128;
  Array   LevelDistribution = [ 1600,   3200,   4800,   6400,   8000   ];
  Array   LevelRangeMin     = [ 2600.0, 2100.0, 1600.0, 1100.0, 600.0  ];
  Array   LevelRangeMax     = [ 2600.0, 2400.0, 2200.0, 2000.0, 1800.0 ];

  float   BurnDelay         = 10.0;
  float   ModelDistance     = 15.0;

  float   ShiftRange        = 0.01;

  float   HighDensityFactor = 8.0;

  // Distances for non-bordered cells
  float   MinVariableDistance          = 400.0;
  float   MaxVariableDistance          = 550.0;
  // Distances for bordered cells
  int     BorderCells                  = 2;
  float   MinVariableDistanceForBorder =  400.0;
  float   MaxVariableDistanceForBorder = 1000.0;

  //Max Distance for tree root system
  float   MaxVariableDistanceForRoot   = 400.0;

  //Min Distance for tree root system
  float   MinVariableDistanceForRoot   = 100.0;

  boolean TreeBillboardUpZ             = true;

  float   LeaveWindWeight              = 0.15; //влеяние ветра на листву деревьев

  String  BulletHitEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  BulletHitSound    = "ForestBulletHitSound";
  String  ExplosionEffect   = "ForestBulletHitDustEffect"; //"ForestBulletHitEffect";
  String  ExplosionSound    = "ForestBulletHitSound";

  //
  //  Trees in format
  //
  final static Component Fir_short            = new CTreeDescriptor("CFir_short_W",         "CFir_shortDestroyed_W",          "Textures/TreeSign_FirTall.tex", 0.8,  1000.0, 0.1);
  //final static Component Fir_short            = new CTreeDescriptor("CFir_tall_bend_W",     "CFir_tall_bendDestroyed_W",     "Textures/TreeSign_FirTall.tex", 0.8,  1000.0, 0.1);
  final static Component Fir_tall_bend        = new CTreeDescriptor("CFir_tall_bend_W",     "CFir_tall_bendDestroyed_W",     "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component Fir_tall             = new CTreeDescriptor("CFir_tall_W",          "CFir_tallDestroyed_W",          "Textures/TreeSign_FirTall.tex", 1.7,  1000.0, 0.1);    // elka
  final static Component FirScotch            = new CTreeDescriptor("CFirScotch_W",         "CFirScotchDestroyed_W",         "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component FirScotchSmall       = new CTreeDescriptor("CFirScotchSmall_W",    "CFirScotchSmallDestroyed_W",    "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.1);  //sosna
  final static Component Linden               = new CTreeDescriptor("CLinden_W",            "CLindenDestroyed_W",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_med           = new CTreeDescriptor("CLinden_med_W",        "CLinden_Med_Destroyed_W",       "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja korafinal static Component Linden               = new CTreeDescriptor("CLinden",            "CLindenDestroyed",            "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Linden_small         = new CTreeDescriptor("CLinden_small_W",      "CLinden_Small_Destroyed_W",     "Textures/TreeSign_FirScotch.tex", 0.75,  1000.0, 0.11); //Temnaja kora
  final static Component Birch                = new CTreeDescriptor("CBirch_W",             "CBirchDestroyed_W",             "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component SmallBirch           = new CTreeDescriptor("CSmallBirch_W",        "CSmallBirchDestroyed_W",        "Textures/TreeSign_LightBranchLeaf.tex", 1.9,  1000.0, 0.1); //Svetlaja kora
  final static Component AppleTree            = new CAppleTreeDescriptor();
  final static Component SmallAppleTree       = new CSmallAppleTreeDescriptor();
  final static Component LiveOak              = new CTreeDescriptor("CLiveOak_W",           "CLiveOakDestroyed_W",           "Textures/TreeSign_FirScotch.tex", 4.5,  1000.0, 0.1);  //Temnaja kora
  final static Component BulfordHolly         = new CBushDescriptor();
  final static Component BulfordHolly         = new CTreeDescriptor("CBulfordHolly_W",      "CBulfordHollyDestroyed",      "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component BulfordHollyLarge    = new CLargeBushDescriptor();
  final static Component BulfordHollyLarge    = new CTreeDescriptor("CBulfordHollyLarge_W", "CBulfordHollyLargeDestroyed", "Textures/TreeSign_DarkBranchLeaf.tex", 0.5,  1000.0, 0.5);  //Temnaja kora
  final static Component NullTree             = null;
}

class CShrubbery_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden_small,   0.1]
                                  ];
}

class CShrubberyLarge_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden_small,   0.1]
                                  ];
}

class CExtraLightForest_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 2.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden,      0.8],
                                    [CBaseWinterLowLandForest::Linden_med,  0.8],
                                    [CBaseWinterLowLandForest::Linden_small,0.8],
                                    [CBaseWinterLowLandForest::NullTree,      0.15]
                                  ];
}

class CLiveOakForest_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden, 1.0]
                                  ];
}

class CLightForest_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden,      0.8],
                                    [CBaseWinterLowLandForest::Linden_med,  0.8],
                                    [CBaseWinterLowLandForest::Linden_small,0.8]
                                  ];
}

class CMiddleForest_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden,      0.8],
                                    [CBaseWinterLowLandForest::Linden_med,  0.8],
                                    [CBaseWinterLowLandForest::Linden,  0.8],
                                    [CBaseWinterLowLandForest::Linden_small,0.8]
                                  ];
}

class CLargeForest_Low_W
{
  int   CreationCount = 1;
  float MinDistance   = 3.0;
  Array TreeCreationProbability = [
                                    [CBaseWinterLowLandForest::Linden,  0.10],
                                    [CBaseWinterLowLandForest::Linden_med,       0.30],
                                    [CBaseWinterLowLandForest::Linden_small,      0.26],
                                    [CBaseWinterLowLandForest::Linden, 0.35]
                                  ];
}

class CSTBaseWinterLowLandForestC1 extends CBaseWinterLowLandForest, CBaseZoneMap
{
  //
  // Settings
  //

  Array ZoneValues = [
//      ZMC_Forest01,
//      ZMC_Forest02,
//      ZMC_Forest03,
//      ZMC_Forest04,
//      ZMC_Forest05,
//      ZMC_Forest06,
//      ZMC_Forest07,
//      ZMC_Forest08,
//      ZMC_Forest09
    ];

 Array CellTemplates = [
   [
    27,
    false,
    new CExtraLightForest_Low_W()
   ],

   [
    28,
    true,
    new CLightForest_Low_W()
   ],

   [
    29,
    true,
    new CMiddleForest_Low_W()
   ],

   [
    30,
    true,
    new CLargeForest_Low_W()
   ],

   [
    ZMC_ShrubberyCasual,
    false,
    new CShrubbery_Low_W()
   ],

   [
     ZMC_Forest02,
     true,
//     20,
     new CLightForest_Low_W()
   ],

   [
    ZMC_ShrubberyLarge,
    false,
    new CShrubberyLarge_Low_W()
   ],

   [
    ZMC_SpecialLongAloneTree,
    [FirScotchSmall,  0.0,  0.0]
   ],

   [
    ZMC_ShrubberyRegular,
    [Linden_small, 0.0,  3.0]
   ],/**/

   [
    ZMC_VillagePlanting01,
    [Linden, 2.0, 2.0],
    [FirScotchSmall,  1.0, -1.0]
   ],

   [
    ZMC_VillagePlanting02,
    [Linden, 2.0, 3.0],
    [Linden, -1.0, -2.0]
   ],

   [
    ZMC_VillagePlanting03,
    [Linden_small, 0.0, -3.0]
   ],

   [
    ZMC_RoadForest,
    [Linden, 2.0, 2.0],
    [Linden_med, 0.0, -1.0],
    [Linden_small,  -2.0, 3.0]
   ],

   [
     ZMC_Forest03,
    [Linden,  1.0, 0.0],
    [Linden_small,  -2.0, 3.0],
    [Linden_med, -4.0, 1.0]
   ]
  ];

  Array VariableTemplates = [
      [
        ZMC_Forest04,
        20,
        new CLargeForest_Low_W()
      ],

      [
        ZMC_Forest01,
        20,
        new CMiddleForest_Low_W()
      ]/*,

     [
        ZMC_Forest02,
        20,
        new CLightForest_Low_W()
      ],

      [
        ZMC_Forest03,
        20,
        new CLiveOakForest_Low_W()
      ] */
    ];


  Array     Descriptors = [];

  Component MissionAtmosphere = null;
  Component MaterialManager = new #MaterialManager<CSTBaseWinterLowLandForestC1Materials>();

  CSTBaseWinterLowLandForestC1(
      Component _MissionAtmosphere
    )
  {
    MissionAtmosphere = _MissionAtmosphere;
  }
}

class CSTBaseWinterLowLandForestC1Materials
{
  Array Materials = [

      new CSubstanceMaterial(
          "bush",
          CMaterialStructure::MSID_Bush
        )

    ];
}
class CSTBaseWinterLowLandForestC1Skin
{
  // "DISABLE",
  // "NORMAL",
  // "ADDITIVE",     

  Array Materials = [
       new CForestPlaneMaterial(
          "L1",
          "Textures/Winter/Forest_1.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L2",
          "Textures/Winter/Forest_2.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L3",
          "Textures/Winter/Forest_3.tex",
          "DISABLE"

        ),

       new CForestPlaneMaterial(
          "L4",
          "Textures/Winter/Forest_4.tex",
          "DISABLE"

        ),
      new CForestPlaneMaterial(
          "L5",
          "Textures/Winter/Forest_5.tex",
          "DISABLE"
        )

    ];
}
