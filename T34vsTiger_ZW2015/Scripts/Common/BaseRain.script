//Rain Mod 1.1

//auteur : republicthunderbolt9@gmail.com

class CRainManager extends CBaseUtilities, CEditable, CNatureElements
{
 static Component RainSkin                     = null;
 static Component EclairSkin                   = null;
 static boolean   isSnow                       = false;
 static float     AngleWind                    = 0.25;
 static float     AngleWindCrecsendo           = 0.00001; //pour eviter le blocage dès le début
 static float 	  NbEtapeWind                  = 20.0; //depand de la vitesse de la pluie
 static boolean   AugmentationAngle            = true;
 static boolean   Wind                         = false;
 static Array     DisplayEffectList            = [];
 static String    DefaultEffectMode            = "Normal";
 static String    DefaultEclairMode            = "Normal";
 static float     DefaultWindAngle             = 30.0;
 static float     DefaultWindOrientation       = 30.0;
 static float     DefaultWindEtape             = 20.0;
 static float     DefaultWindOrientationEtape      = 20.0;
 static float     DefaultWindOrientationTolerance  = 0.0;
 static float     Orientation		       = 0.0;
 static String    PrefixeEffectDefault         = "Rain1";
 static String    PrefixeEffectOnBinocular     = "Rain2";
 static String    Effect                       = "Rain1";

 static float     WindEtape;
 static float     WindOrientationEtape;
 static float     WindOrientationTolerance;
 static float     WindAngle;
 static float     WindOrientation;
 static int       DisplayEffectId;
 static String    EffectMode;
 static int       EclairMode;
 static float     MaxEclairDistance;
 static float     MinEclairDistance;
 static float     MaxEclairTime;
 static float     MinEclairTime;
 static float     WindDefaultAngle;
 Component EffectArray = new #EffectsArray();
 Component SoundsArray = new #SoundsArray();

 void LogMessage()
 {
    WriteLog(name, "Beta = " + new String(Beta) + " Y = " + new String(Y), 0);
 }

 float GetSetting(int _Setting, int _Mode)
 {
   if(_Mode == 3)
     {
      return 0.0;
     }
   else
     {
   Array Setting = [
  	    [40.0, 30.0, 5.0], //Max Time eclair
     	    [30.0, 15.0, 4.0], //Min Time eclair
            [800.0, 600.0, 400.0], //Max Distance
  	    [600.0, 400.0, 100.0] //Min Distance
        ];
   return Setting[_Setting][_Mode];
     }
 }

 Array GetDefaultProperties()
  {
    return [
        [ "EffectMode",           	  DefaultEffectMode             ],
        [ "EclairMode",               	  DefaultEclairMode           ],
        [ "WindAngle",                    DefaultWindAngle      ],
        [ "WindOrientation",              DefaultWindOrientation],
        [ "WindOrientationTolerance",     DefaultWindOrientationTolerance ],
        [ "WindOrientationEtape",     	  DefaultWindOrientationEtape     ],
        [ "WindEtape",          	  DefaultWindEtape            ],
        [ "WindDefaultAngle",          	  0.1           ]
      ];
  }

  Array GetPropStrings()
  {
    return [
        [ "EffectMode",            Mode             ],
        [ "EclairMode",          ModeExtends           ]
      ];
  }

  void CRainManager()
  {
        RainSkin			 = new #MaterialManager<CRainEffectSkin>();
        EclairSkin			 = new #MaterialManager<CEclairEffectSkin>();
    	EffectArray.RegisterPattern("Rain1Light", 	new #DynamicEffect<CRain1Light>());
    	EffectArray.RegisterPattern("Rain1Normal", 	new #DynamicEffect<CRain1Normal>());
    	EffectArray.RegisterPattern("Rain1Hard", 	new #DynamicEffect<CRain1Hard>());
    	EffectArray.RegisterPattern("Rain2Light", 	new #DynamicEffect<CRain2Light>());
    	EffectArray.RegisterPattern("Rain2Normal", 	new #DynamicEffect<CRain2Normal>());
    	EffectArray.RegisterPattern("Rain2Hard", 	new #DynamicEffect<CRain2Hard>());
    	EffectArray.RegisterPattern("Eclair1",      new #DynamicEffect<CEclair1>());
    	EffectArray.RegisterPattern("Eclair2",      new #DynamicEffect<CEclair2>());
    	EffectArray.RegisterPattern("Eclair3",      new #DynamicEffect<CEclair3>());
    	EffectArray.RegisterPattern("Eclair4",      new #DynamicEffect<CEclair4>());
    	SoundsArray.RegisterPattern("EclairSound1",  new CEclairSound1());
    	SoundsArray.RegisterPattern("EclairSound2",  new CEclairSound2());
    	SoundsArray.RegisterPattern("EclairSound3",  new CEclairSound3());
        deleteFile("rain.log");
  }

  void SetProperties(
      Component _PropMap
    )
  {
  	EffectMode              = _PropMap.Get("EffectMode",              DefaultEffectMode);
    	EclairMode            = Mode.find(_PropMap.Get("EclairMode",  DefaultEclairMode));
        WindAngle             = _PropMap.Get("WindAngle",             WindAngle);
        WindOrientation       = _PropMap.Get("WindOrientation",       DefaultWindOrientation);
        WindOrientationEtape  = _PropMap.Get("WindOrientationEtape",     	  DefaultWindOrientationEtape    );
        WindOrientationTolerance  = _PropMap.Get("WindOrientationTolerance",     DefaultWindOrientationTolerance);
  	WindEtape             = _PropMap.Get("WindEtape",             DefaultWindEtape);
        WindDefaultAngle      = _PropMap.Get("WindDefaultAngle",             0.1);
    
    	MaxEclairDistance     = GetSetting(2, EclairMode);
    	MinEclairDistance     = GetSetting(3, EclairMode);
    	MaxEclairTime         = GetSetting(0, EclairMode);
    	MinEclairTime         = GetSetting(1, EclairMode);  /**/
  }

  void Initialize(
      Component _Mission,
      Component _PropMap
    )
  {
    SetProperties(_PropMap);
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {  
    _Mission.RegisterObject("LightEclair",  new #LightEmitter<CLightEclair>());
    _Mission.RegisterObject("SoundRain",    new #Emitter<CSoundRain>());
    SetProperties(_PropMap);
  }

  void Finalize(
      Component _Mission,
      Component _PropMap
    )
  {
        sendEvent(0.0, getIdentificator(user), "SetRainGeneric", []);

    if(ModeExtends.find(EclairMode) != 3)
      {
        sendEvent(rand(0.0, 4.0), getIdentificator(user), "SetEclair", []); 
      }
    sendEvent(0.0, getIdentificator(user), "SetWindSequence", []); 
  }
 
 event void SetRainGeneric()
 {
  String name = "Matrix";
  float Alpha = 0.0;
  float Beta = degreeToRadian(WindDefaultAngle) + WindAngle();
  float Y = degreeToRadian(WindOrientation) + WindOrientation();
  Vector Origin = getPosition(Object()).origin;

    WriteLog(name, "Beta = " + new String(Beta) + " Y = " + new String(Y), 0);

//orientation des vecteurs unitaires
//Rotation Z>Y>X

  Vector Xvec = new Vector(cos(Y) * cos(Beta),
                           sin(Y) * cos(Beta),
                           -sin(Beta));

  Vector Yvec = new Vector(cos(Y) * sin(Beta) * sin(Alpha) - sin(Y) * cos(Alpha),
                           sin(Y) * sin(Beta) * sin(Alpha) + cos(Y) * cos(Alpha),
 			   cos(Beta) * sin(Alpha) );

  Vector Zvec = new Vector(cos(Y) * sin(Beta) * cos(Alpha) + sin(Y) * sin(Alpha),
                           sin(Y) * sin(Beta) * cos(Alpha) - cos(Y) * sin(Alpha),
                           cos(Beta) * cos(Alpha));

  Matrix AngleMatrix = new Matrix(
         Xvec.x, Yvec.x, Zvec.x, Origin.x ,
         Xvec.y, Yvec.y, Zvec.y, Origin.y,
         Xvec.z, Yvec.z, Zvec.z, Origin.z + 10.0,   //aucun calcul de deplacement du a l'angle actuellement 
         0.0, 0.0, 0.0, 1.0
                                     );

     setPosition(GetMission().GetObject("SoundRain"), getPosition(Object()));
     SetEffect(AngleMatrix, Effect + EffectMode);
     float Time = (GetStaticEffectVariable("MaxAndMinRand") * 2 - 0.2) / (-GetStaticEffectVariable("HeightFinal") / GetStaticEffectVariable("Speed"));
     sendEvent(Time, getIdentificator(user), "SetRainGeneric", []);
  }
  
 event void SetEclair()
 { 
  Vector Origin = getPosition(Object()).origin;

   float Radius = rand(MinEclairDistance, MaxEclairDistance);
   float Alpha  = Math_PI;//rand(0.0, Math_PI * 2.0);
   float CordX  = Radius * cos(Alpha);
   float CordY  = Radius * sin(Alpha);

  Matrix Position = new Matrix(
				 1.0, 0.0, 0.0, Origin.x + CordX,//pour la position de l'eclair dans le ciel 
				 0.0, 1.0, 0.0, Origin.y + CordY,
				 0.0, 0.0, 1.0, Origin.z,
				 0.0, 0.0, 0.0, 1.0
                                     );

  Matrix PositionLight = new Matrix(
				 -cos(Alpha), -sin(Alpha), 0.0, Origin.x,//pour l'orientation de l'emetteur(position = celle de MPU)
				 -sin(Alpha), -cos(Alpha), 0.0, Origin.y,
				 0.0,          0.0,      1.0, Origin.z,
				 0.0, 0.0, 0.0, 0.0
                                     );

    setPosition(GetMission().GetObject("LightEclair"), PositionLight);
      sendEvent(0.0, "LightEclair", "SequenceEclair", [Alpha, Radius]);
   EffectArray.CreateEffect("Eclair" + new String(int(rand(1.0, 4.0))), Position, this);
      sendEvent(rand(MinEclairTime, MaxEclairTime), "RainManager", "SetEclair", []);


      sendEvent(Radius / 340.0, getIdentificator(user), "EclairSound", [Position]);
 }

 event void EclairSound(Matrix _Position)
 {
    SoundsArray.CreateSound("EclairSound" + new String(int(rand(1.0, 3.0))), _Position);
 } 
}

//////////////////////////////////////////////////////EFFECTS/////////////////////////////////////////////////////////////////////////////////////////

class CRain1 
  extends CBaseEffect
{

  static float MaxAndMinRand = 2.0;
  static float HeightStart   = 0.0;
  static float HeightFinal   = -20.0;
  static float RadianPas     = 1.0;
  static float Speed         = 0.4;   
  static float BillBoardSize = 0.015;
  static float BillBoardlenght = 0.6;
  static float StartRadius   = 1.0;
  static float RadiusPas     = 1.0;
  static float MaxRadius     = 25.0;
  static Color EffectColor   = new Color(0.5, 0.5, 0.5, 0.12);
  static String Material     = "0";

   void CRain1()
   {
  
    for(float Radius = StartRadius; Radius < MaxRadius; Radius+= RadiusPas)
    {
    float Alpha = RadianPas / Radius;
    for(float radian = 0.0; radian < Math_PI * 2; radian+= Alpha)
    {
    SetWindEffect(0.5); 
    SetAnimationTime(Speed);
    SetEffectTime(Speed);
    ExpandFramesTable(5);
    SetSkinClass(CRainManager::RainSkin);

    int Goutte = CreateParticle(
        EPPID_BILLBOARD_PLANE,
        new Vector(0.0, 0.0, 0.0),
        new Vector(0.0, 0.0, 0.035),
        Material,
        new Color(1.0, 1.0, 1.0, 1.0)
      ); 

    

   float CordX = (Radius + rand(-0.5, 0.5)) * cos(radian);
   float CordY = (Radius + rand(-0.5, 0.5)) * sin(radian);

    Vector Start = new Vector(CordX, CordY, HeightStart + rand(-MaxAndMinRand, MaxAndMinRand));
    Vector Size = new Vector(BillBoardSize, BillBoardSize, BillBoardlenght + rand(-0.001, 0.001));

    for (int Frame = 0; Frame < GetFramesQuantity(); Frame++)
    {
      float Phase  = float(Frame) / float(GetFramesQuantity());

       SetPosition(Goutte, Frame, 
       Start + ((new Vector(0.0, 0.0, HeightFinal) + Start) - Start) * Phase);    

       SetSizeFactor(Goutte, Frame,
        Size + (Size - Size) * Phase);

       SetColor(Goutte, Frame, EffectColor);

       Start = Start + new Vector(rand(-0.01, 0.01), rand(-0.01, 0.01), 0.0);    
       Size = new Vector(BillBoardSize, BillBoardSize, BillBoardlenght + rand(-0.001, 0.001));  
    }
   }
  }
 }
}

class CRain1Light 
  extends CRain1
{

  static float RadianPas     = 4.0;
  static float RadiusPas     = 4.0;
  static float BillBoardSize = 0.01;
  static float BillBoardlenght = 0.5;
  static float Speed         = 0.6;   

   void CRain1Normal()
   {
    CRain1::CRain1();
   }
}

class CRain1Normal 
  extends CRain1
{

  static float RadianPas     = 2.0;
  static float RadiusPas     = 2.0;
  static float BillBoardSize = 0.012;
  static float BillBoardlenght = 0.55;
  static float Speed         = 0.5;   

   void CRain1Normal()
   {
    CRain1::CRain1();
   }
}

class CRain1Hard 
  extends CRain1
{

  static float RadianPas     = 0.8;
  static float RadiusPas     = 0.8;
  static float BillBoardSize = 0.015;
  static float BillBoardlenght = 0.6;
  static float Speed         = 0.4;   

   void CRain1Hard()
   {
    CRain1::CRain1();
   }
}

class CRain2Light 
  extends CRain1
{

  static float RadianPas     = 4.0;
  static float RadiusPas     = 4.0;
  static float BillBoardSize = 0.005;
  static float BillBoardlenght = 0.3;
  static float Speed         = 0.6;   

   void CRain2Normal()


   {
    CRain1::CRain1();
   }
}

class CRain2Normal 
  extends CRain1
{

  static float RadianPas     = 2.0;
  static float RadiusPas     = 2.0;
  static float BillBoardSize = 0.0024;
  static float BillBoardlenght = 0.35;
  static float Speed         = 0.5;   

   void CRain2Normal()
   {
    CRain1::CRain1();
   }
}

class CRain2Hard 
  extends CRain1
{

  static float RadianPas     = 0.8;
  static float RadiusPas     = 0.8;
  static float BillBoardSize = 0.003;
  static float BillBoardlenght = 0.4;
  static float Speed         = 0.4;   

   void CRain2Hard()
   {
    CRain1::CRain1();
   }
}

////////////////////////////////////////////////////////////////////////ECLAIRS/////////////////////////////////////////////////////////////

class CEclair1 
  extends CBaseEffect
{
  static String Material = "0";
  void CEclair1()
  {
    SetAnimationTime(0.2);
    SetEffectTime(0.2);
    ExpandFramesTable(2);
    SetSkinClass(CRainManager::EclairSkin);
    SetRenderLayer(PRIMLAYER_ATMOSPHERE);

    int Eclair = CreateParticle(
        EPPID_BILLBOARD_PLANE,
        new Vector(0.0, 0.0, 0.0),
        new Vector(20.0, 20.0, 20.0),
        Material,
        new Color(10.0, 10.0, 10.0, 1.0)
      );

    for (int Frame = 0; Frame < GetFramesQuantity(); Frame++)
    {
      float Phase  = float(Frame) / float(GetFramesQuantity());


       SetPosition(Eclair, Frame, new Vector(0.0, 0.0, 20.0)); 
       SetColor(Eclair, Frame, new Color(1.0, 0.8, 1.0, 0.8)/* * Phase*/);
    }
  }
}

class CEclair2 
  extends CEclair1
{
  static String Material = "1";
  void CEclair2()
  {
    CEclair1::CEclair1();
  }
}

class CEclair3 
  extends CEclair1
{
  static String Material = "2";
  void CEclair3()
  {
       CEclair1::CEclair1(); 
  }
}

class CEclair4 
  extends CEclair1
{
  static String Material = "3";
  void CEclair4()
  {
     CEclair1::CEclair1();
  }
}

///////////////////////////////////////////////////////////////SKINS//////////////////////////////////////////////////////////////////////
class CRainEffectSkin
  extends CAnimatedEffectSkin
{
   Array Materials = [
      new CEffectMaterial(
          "0",                      // material id
          "Textures/Rainbase.tex", // texture name
          "ADDITIVE",               // transparency
          0, 0, 21, 80            // texture page
        ),

      new CEffectMaterial(
          "1",                      // material id
          "Textures/Rainbase.tex", // texture name
          "ADDITIVE",               // transparency
          21, 0, 21, 80            // texture page
        ),

      new CEffectMaterial(
          "2",                      // material id
          "Textures/Rainbase.tex", // texture name
          "ADDITIVE",               // transparency
          42, 0, 21, 80            // texture page
        )
      ];
}

class CEclairEffectSkin
  extends CAnimatedEffectSkin
{
   Array Materials = [
      new CEffectMaterial(
          "0",                      // material id
          "Textures/eclair.tex", // texture name
          "ADDITIVE",               // transparency
          0, 0, 271, 316            // texture page
        ),

      new CEffectMaterial(
          "1",                      // material id
          "Textures/eclair.tex", // texture name
          "ADDITIVE",               // transparency
          271, 0, 248, 316            // texture page
        ),

      new CEffectMaterial(
          "2",                      // material id
          "Textures/eclair.tex", // texture name
          "ADDITIVE",               // transparency
          527, 0, 191, 316            // texture page
        ),
      
      new CEffectMaterial(
          "3",                      // material id
          "Textures/eclair.tex", // texture name
          "ADDITIVE",               // transparency
          720, 0, 300, 316           // texture page
        )
      ];
}

///////////////////////////////////////////////////////////////////////////LIGHT/////////////////////////////////////////////////////////////////////////
class CLightEclair extends CBaseLightEmitter, CBaseUtilities
{
  Color   LightColor       = new Color(0.0, 0.0, 0.0, 0.0);
  int     LightType        = LIGHTTYPE_POINT;
  float   m_Distance;
  float   Distance;
   float Factor;
 String name = "LightManager";

 Component Atmosphere()
 {
   return GetMission().GetObject("Atmosphere");
 } 

 Component PropertiesList()
 {
   return new CPropertiesMap(Atmosphere().GetPropertiesList(GetMission()));
 }

 void LogMessages(String _Message, float _color)
 {
   CNatureElements::WriteLog(name, _Message, _color);
 }

 Color Light(float _Density, String _Axis)
 {
  if(_Axis != "")
    {
     if(PropertiesList().Get("FogColor" + _Axis, new Color()).r >= 1.0)
       {
         LogMessages("Can't set fog color FogColor" + _Axis + ".r >= 1.0", 2);
           return;
       }
     if(PropertiesList().Get("FogColor" + _Axis, new Color()).g >= 1.0)
       {
         LogMessages("Can't set fog color FogColor" + _Axis + ".g >= 1.0", 2);
           return;
       }
     if(PropertiesList().Get("FogColor" + _Axis, new Color()).b >= 1.0)
       {
         LogMessages("Can't set fog color FogColor" + _Axis + ".b >= 1.0", 2);
           return;
       }
  
     else
      {
       if(_Density > 0.0)
         {
          //PropertiesList().Get("FogColor" + _Axis, new Color()).r : basé sur la couleur rouge. le brouillard est généralemment gris...
           return 
             PropertiesList().Get("FogColor" + _Axis, new Color())  + 
             (1.0 - PropertiesList().Get("FogColor" + _Axis, new Color()).r) * new Color(1.0 , 0.8 , 1.0) * _Density * (1.0 - Distance);
         }
       else
         {
           return 
           PropertiesList().Get("FogColor" + _Axis, new Color());
         }
      }
    }
   

  if(_Axis == "")
    {
       return  new Color(1.0 , 0.9 , 1.0) * (1.0 - Distance);
    }
 }

  event void SequenceEclair(float _Alpha, float _Distance)
  {
    m_Distance = _Distance;
   Distance = (m_Distance - CRainManager::MinEclairDistance) / (CRainManager::MaxEclairDistance - CRainManager::MinEclairDistance);
      for(float i = 0; i < float(int(rand(1.0, 4.0))) * 0.3; i += 0.3)
        {
          sendEvent(i + rand(0.0, 0.1), "LightEclair", "SetEclairLight", [_Alpha]);
        }
  }

  event void SetEclairLight(float _Alpha)
  {
    /*  LogMessages("Distance eclair " + new String(m_Distance), 1);
      LogMessages(new String(Light(cos(_Alpha), "XPos")) + " X+", 1);
      LogMessages(new String(Light(-cos(_Alpha), "XNeg"))+ " X-", 1);
      LogMessages(new String(Light(sin(_Alpha), "YPos")) + " Y+", 1);
      LogMessages(new String(Light(-sin(_Alpha), "YNeg"))+ " Y-", 1);   */

      SetLightColor(Light(1.0, ""));
      Atmosphere().SetFogColorXPos(Light(cos(_Alpha), "XPos"));
      Atmosphere().SetFogColorXNeg(Light(-cos(_Alpha), "XNeg"));
      Atmosphere().SetFogColorYPos(Light(sin(_Alpha), "YPos"));
      Atmosphere().SetFogColorYNeg(Light(-sin(_Alpha), "YNeg"));
      sendEvent(0.1 +  + rand(-0.05, 0.05), "LightEclair", "StopLight", []);
  }
  event void StopLight()
  {
      Atmosphere().SetFogColorXPos(PropertiesList().Get("FogColorXPos", new Color()));
      Atmosphere().SetFogColorXNeg(PropertiesList().Get("FogColorXNeg", new Color()));
      Atmosphere().SetFogColorYPos(PropertiesList().Get("FogColorYPos", new Color()));
      Atmosphere().SetFogColorYNeg(PropertiesList().Get("FogColorYNeg", new Color()));
      SetLightColor(LightColor);
  }
}

///////////////////////////////////////////////////////////////////////////SOUNDS//////////////////////////////////////////////////////////////////////////
class CSoundRain extends CEngineSound//, CSoundEmitter
{
  String SoundFile   = "Sounds/rain.wav";
  float   MinDistance    = 0.0;
  float   MaxDistance    = FLT_MAX;
  int     MinMaxType     = SD_MAX;
  
  void CSoundRain()

  {
   LoadSoundFile(SoundFile);
   PlaySoundBuffer(true);
  }
}

class CEclairSound1
  extends CEngineSound
{
  String  SoundFile      = "Sounds/eclair1.wav";
  float   MinDistance    = 0.0;
  float   MaxDistance    = FLT_MAX;
  int     MinMaxType     = SD_MAX;
}

class CEclairSound2
  extends CEclairSound1
{
  String  SoundFile      = "Sounds/eclair2.wav";
}

class CEclairSound3
  extends CEclairSound1
{
  String  SoundFile      = "Sounds/eclair3.wav";
}
