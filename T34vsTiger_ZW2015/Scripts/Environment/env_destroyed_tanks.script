//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//------------------------------------------Cenv_T34_76_Destroyed_W-------------------------

// Unit Explosion

class Cenv_T34_76_DestroyedUnit extends CGroundBuilding
{

  final static float DefaultHitPoints = -1;


  // Automatic classificators of this object
  final static Array AutomaticClassificators = ["STRUCTURE"];

  final static String DefaultSurfaceControl = "PutonGround";
  static Array  LandingJoints = [""];

  // =======================================
  // Contruction and initialization
  // =======================================
  void Cenv_T34_76_DestroyedUnit()
  {
    SetupMesh(new #AnimatedObject<Cenv_T34_76_DestroyedModel>(), [0]);

    Component Mesh = GetMeshComponent();

    if (null == Mesh)
    {
      logMessage("Mesh not found in SetupDestroyPhysicsController function call");
      return;
    }

   // m_DestroyEnergy = _DestroyEnergy;

    // Create physics controller
    Component PhysicsController = new #ObjectPhysicsController();
    loadFromScript(PhysicsController, "CMetalSubstance");

    // Initialize controller
    PhysicsController.SetEventHandler(this);
    PhysicsController.SetMass(86000.0f);
    setSlaveObject(PhysicsController, Mesh);

    // Compute volume of object
    Vector Sizes = getBoundingSize(Mesh);
    PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);

    // Register object physics controller
    RegisterObject("DestroyController", PhysicsController);

    Array Shapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    if (Shapes.isEmpty())
      logError("Empty shapes");

    boolean IsValidBody = PhysicsController.CreateRigidBody("Body", Mesh.GetRootJoint(), Shapes);
     
    addClassificator(user, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
    addClassificator(user, CLASSIFICATOR_WALK_SURFACE);
    addClassificator(user, CLASSIFICATOR_COLLISION_SHAPES);

    PhysicsController.SetIsectionModeAsGroupTriangles();  //# comment for vector solver # 
    PhysicsController.CreateTouchTrigger(180000.0f);
    PhysicsController.EnableControl(false);
  }

  event void OnPhysicsEnabled(
      boolean _Enable
    )
  {
    Component DestroyController = GetObject("DestroyController");
    DestroyController.Activate(true);
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    Component PhysicsController = GetObject("DestroyController");
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(180000.0f);

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);
  }
}

//WINTER
class Cenv_T34_76_Destroyed_WUnit extends CGroundBuilding
{

  final static float DefaultHitPoints = -1;


  // Automatic classificators of this object
  final static Array AutomaticClassificators = ["STRUCTURE"];


  final static String DefaultSurfaceControl = "PutonGround";
  static Array  LandingJoints = [""];

  // =======================================
  // Contruction and initialization
  // =======================================
  void Cenv_T34_76_Destroyed_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cenv_T34_76_Destroyed_WModel>(), [0]);


    Component Mesh = GetMeshComponent();
    if (null == Mesh)
    {
      logMessage("Mesh not found in SetupDestroyPhysicsController function call");
      return;
    }

   // m_DestroyEnergy = _DestroyEnergy;      

    // Create physics controller
    Component PhysicsController = new #ObjectPhysicsController();
    loadFromScript(PhysicsController, "CMetalSubstance");

    // Initialize controller
    PhysicsController.SetEventHandler(this);
    PhysicsController.SetMass(86000.0f);
    setSlaveObject(PhysicsController, Mesh);

    // Compute volume of object
    Vector Sizes = getBoundingSize(Mesh);
    PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);

    // Register object physics controller
    RegisterObject("DestroyController", PhysicsController);

    Array Shapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    if (Shapes.isEmpty())
      logError("Empty shapes");

    boolean IsValidBody = PhysicsController.CreateRigidBody("Body", Mesh.GetRootJoint(), Shapes);
     
    addClassificator(user, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
    addClassificator(user, CLASSIFICATOR_WALK_SURFACE);
    addClassificator(user, CLASSIFICATOR_COLLISION_SHAPES);

    PhysicsController.SetIsectionModeAsGroupTriangles();  //# comment for vector solver # 
    PhysicsController.CreateTouchTrigger(180000.0f);
    PhysicsController.EnableControl(false);
  }

  event void OnPhysicsEnabled(
      boolean _Enable
    )
  {
    Component DestroyController = GetObject("DestroyController");
    DestroyController.Activate(true);
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    Component PhysicsController = GetObject("DestroyController");
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(180000.0f);

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);
  }
}


// T34-85 1944 Units

class Cenv_T34_85_DestroyedUnit extends CGroundBuilding
{

  final static float DefaultHitPoints = -1;


  // Automatic classificators of this object
  final static Array AutomaticClassificators = ["STRUCTURE"];

  final static String DefaultSurfaceControl = "PutonGround";
  static Array  LandingJoints = [""];

  // =======================================
  // Contruction and initialization
  // =======================================
  void Cenv_T34_85_DestroyedUnit()
  {
    SetupMesh(new #AnimatedObject<Cenv_T34_85_DestroyedModel>(), [0]);


    Component Mesh = GetMeshComponent();
    if (null == Mesh)
    {
      logMessage("Mesh not found in SetupDestroyPhysicsController function call");
      return;
    }
   // m_DestroyEnergy = _DestroyEnergy;

    // Create physics controller
    Component PhysicsController = new #ObjectPhysicsController();
    loadFromScript(PhysicsController, "CMetalSubstance");

    // Initialize controller
    PhysicsController.SetEventHandler(this);
    PhysicsController.SetMass(86000.0f);
    setSlaveObject(PhysicsController, Mesh);

    // Compute volume of object
    Vector Sizes = getBoundingSize(Mesh);
    PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);

    // Register object physics controller
    RegisterObject("DestroyController", PhysicsController);

    Array Shapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    if (Shapes.isEmpty())
      logError("Empty shapes");

    boolean IsValidBody = PhysicsController.CreateRigidBody("Body", Mesh.GetRootJoint(), Shapes);
     
    addClassificator(user, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
    addClassificator(user, CLASSIFICATOR_WALK_SURFACE);
    addClassificator(user, CLASSIFICATOR_COLLISION_SHAPES);

    PhysicsController.SetIsectionModeAsGroupTriangles();  //# comment for vector solver # 
    PhysicsController.CreateTouchTrigger(180000.0f);
    PhysicsController.EnableControl(false);
  }

  event void OnPhysicsEnabled(
      boolean _Enable
    )
  {
    Component DestroyController = GetObject("DestroyController");
    DestroyController.Activate(true);
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    Component PhysicsController = GetObject("DestroyController");
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(180000.0f);

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);
  }
}

//WINTER
class Cenv_T34_85_Destroyed_WUnit extends CGroundBuilding
{

  final static float DefaultHitPoints = -1;


  // Automatic classificators of this object
  final static Array AutomaticClassificators = ["STRUCTURE"];

  final static String DefaultSurfaceControl = "PutonGround";
  static Array  LandingJoints = [""];

  // =======================================
  // Contruction and initialization
  // =======================================
  void Cenv_T34_85_Destroyed_WUnit()
  {
    SetupMesh(new #AnimatedObject<Cenv_T34_85_Destroyed_WModel>(), [0]);

 
   Component Mesh = GetMeshComponent();
  if (null == Mesh)
  {
      logMessage("Mesh not found in SetupDestroyPhysicsController function call");
      return;
  }
   // m_DestroyEnergy = _DestroyEnergy;

    // Create physics controller
    Component PhysicsController = new #ObjectPhysicsController();
    loadFromScript(PhysicsController, "CMetalSubstance");

    // Initialize controller
    PhysicsController.SetEventHandler(this);
    PhysicsController.SetMass(86000.0f);
    setSlaveObject(PhysicsController, Mesh);

    // Compute volume of object
    Vector Sizes = getBoundingSize(Mesh);
    PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);

    // Register object physics controller
    RegisterObject("DestroyController", PhysicsController);

    Array Shapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    if (Shapes.isEmpty())
      logError("Empty shapes");

    boolean IsValidBody = PhysicsController.CreateRigidBody("Body", Mesh.GetRootJoint(), Shapes);
     
    addClassificator(user, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
    addClassificator(user, CLASSIFICATOR_WALK_SURFACE);
    addClassificator(user, CLASSIFICATOR_COLLISION_SHAPES);

    PhysicsController.SetIsectionModeAsGroupTriangles();  //# comment for vector solver # 
    PhysicsController.CreateTouchTrigger(180000.0f);
    PhysicsController.EnableControl(false);
  }

  event void OnPhysicsEnabled(
      boolean _Enable
    )
  {
    Component DestroyController = GetObject("DestroyController");
    DestroyController.Activate(true);
  }

  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    Component PhysicsController = GetObject("DestroyController");
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(180000.0f);

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);
  }
}

