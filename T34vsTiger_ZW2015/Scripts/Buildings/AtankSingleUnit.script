//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

// Unit Explosion
class CAntiTankSingleUnit
  extends CGroundBuilding
{

  final static float DefaultHitPoints = -1.0f;

  static String PrevDeathEffect = "BarrelFireEffect";
  static String PrevDeathSound  = "BarrelFireSound";
  final static int  DeathEffectDelay = 1.5;

  static String PostExplosionID = "BarrelExplosion";

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["STRUCTURE"];

  // =======================================
  // Contruction and initialization
  // =======================================

  void CAntiTankSingleUnit()
  {
    SetupMesh(new #AnimatedObject<Cenv_Antitank_singleModel>(), [200, 100, 7]);

    Component Mesh = GetMeshComponent();
    if (null == Mesh)
    {
      logMessage("Mesh not found in SetupDestroyPhysicsController function call");
      return;
    }

//    m_DestroyEnergy = _DestroyEnergy;

    // Create physics controller
    Component PhysicsController = new #ObjectPhysicsController();
    loadFromScript(PhysicsController, "CMetalSubstance");

    // Initialize controller
    PhysicsController.SetEventHandler(this);
    PhysicsController.SetMass(500.0f);
    setSlaveObject(PhysicsController, Mesh);

    // Compute volume of object
    Vector Sizes = getBoundingSize(Mesh);
    PhysicsController.SetVolume(Sizes.x * Sizes.y * Sizes.z);

    // Register object physics controller
    RegisterObject("DestroyController", PhysicsController);

    Array Shapes = Mesh.GetCollisionShapes(Mesh.GetRootJoint(), false);
    if (Shapes.isEmpty())
      logError("Empty shapes");

    boolean IsValidBody = PhysicsController.CreateRigidBody("Root1", Mesh.GetRootJoint(), Shapes);

    addClassificator(user, CLASSIFICATOR_PHYSICS_CONTROLLABLE);
    addClassificator(user, CLASSIFICATOR_WALK_SURFACE);
    addClassificator(user, CLASSIFICATOR_COLLISION_SHAPES);
                           
    //# comment for vector solver # PhysicsController.SetIsectionModeAsGroupTriangles();
    PhysicsController.CreateTouchTrigger(0.0f);
    PhysicsController.EnableControl(false);
  }

  event void OnPhysicsEnabled(
      boolean _Enable
    )
  {
    Component DestroyController = GetObject("DestroyController");
    DestroyController.Activate(true);
  }



  event void OnSuccessTouchTrigger(
    float _Energy
    )
  {
    Component PhysicsController = GetObject("DestroyController");
    if (null != PhysicsController)
      PhysicsController.CreateTouchTrigger(0.0);

    Component SurfaceControl = GetSurfaceControl();
    if (null != SurfaceControl)
      SurfaceControl.EnableSurfaceControl(false);

    PhysicsController.EnableControl(true);
    PhysicsController.Activate(true);
  }
}
