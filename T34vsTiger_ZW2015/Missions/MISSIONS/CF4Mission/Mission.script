//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CCF4Mission extends CDMMission, CCF4Mission_Strings, CMissionStatus
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------

  static int   MaxPlayers        = 16;

  String m_LocalTime             = "6:20:00";
  String m_TerrainMapTextureName = "Textures/CF4_Map.tex"; //Textures/C1M3_Map.tex
  String _NavPointID             = "NavPoint_VP";

  static String m_MissionBriefingPicMaterial = "CF4BriefingPic"; //C1M3BriefingPic

  static Array  m_MissionObjectives = [
      [MOTID_Primary,   CCF4Mission_Strings::Objective01, MOSID_InProgress, true,  1/*team (blue)*/ ],
      [MOTID_Primary,   CCF4Mission_Strings::Objective02, MOSID_InProgress, true,  0/*team (red)*/]
                                      ];
  boolean isDebug = true;
  boolean isRadarUpdateDebug = false;
  boolean isCaptured = false;

  int TimeCount = 300;

  Array m_NavpointsForPlayerMap = [
      [
        ["NavPoint_VP"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(255.0/255.0, 0.0/256.0, 0.0/256.0)   // NavColor
      ]
                                 ];

  float  CockpitMapMinRange        = 1000.0;
  float  CockpitMapMaxRange        = 4500.0;
  float  CockpitMapNavNameMaxRange = 2000.0;
  int    CockpitMapZoomSteps       = 10;
  Vector MarksInitPoint            = new Vector(1000.0, 1000.0, 0.0);
  Array  CockpitMapAccessBox       = [new Vector(2402, 1502.0, 0.0), new Vector(6902.0, 6002.0, 0.0)];


  final static Array RouterWorkingZones = [
    [40000.0 , 40000.0, 60000.0, 60000.0]
                                          ];

  void CCF4Mission()
  {
    // Construct mission
    CDMMission("CCF4Mission", "CCF4Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CCF4Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CCF4Atmosphere>());
    SetMissionSky(new #SkyObject<CSky02Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

    m_MissionLensFlare =  new #LensFlare<CLensFlare>();
    SetMissionWorldMatrices(new #WorldMatrices<CCF4WorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME,         "CCF4LandscapeLayer"],
        [LAYER_TERRAIN_ZONE,         "CCF4TerrainZoneLayer"],
        [LAYER_MICROTEXTURE_MAP1,    "CCF4MicroTextures1"],
        [LAYER_TERRAIN_WATERHEIGHTS, "CCF4WaterHeights"]
      ]);

//    SetRouterPrecalculatedGraph(
//      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

//    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited
    CDMMission::StartMission();
//    Component console = new #GameController().GetObject(SOID_Console);
//    console.disablebeh();
//    console.showbehinf(true);
    fireEvent(0.0, [], "MissionStarted", []);
    sendEvent(1200.0,  SOID_MissionController, "RedTeamVictory", []);

  }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CDMMission::OnObjectDestroyed(_ObjectID);
    Component DeadThing = GetObject(_ObjectID);

    if(isDebug)
      logWarning("Object destroyed: " + _ObjectID + ", last damaged by unit: " + new String(DeadThing.GetLastDamager()));

    if ((new #GameController()).GetGameMode() != "Server")
      return;
    sendEvent(0.0, SOID_MissionController, "CheckUnitInNavPoint", [_NavPointID]);
 }

 void OnObjectEnterNavPoint(String _NavPointID, String _ObjectID)
 {
   if (isDebug)
     logMessage("Object: " + _ObjectID + " enter NavPoint: " +  _NavPointID);

   if ((new #GameController()).GetGameMode() != "Server")
      return;

   if (!isCaptured)
   {
     int Slot = GetPlayerSlotIDByUnitID(_ObjectID);
     if(Slot == -1) return;
     logWarning("Object identified: " + _ObjectID);

     Component Session = (new #GameController()).GetGameSession();
     int Team = Session.m_PlayerSlots[Slot].Team;

     logWarning("Team identified: " + new String (Team));


     if ((Team == 1) && (_NavPointID == "NavPoint_VP"))
     {
       isCaptured = true;
       sendEvent(0.0, SOID_MissionController, "BlueTeamCounter", []);
       SetNavpointColor (_NavPointID, new Color  (0.0/256.0, 0.0/256.0, 255.0/255.0)); //change for blue color
       Session.FireNetEvent("SetNavpointColor", [_NavPointID, new Color  (0.0/256.0, 0.0/256.0, 255.0/255.0)]);
       logWarning("[OnObjectEnterNavPoint]Change_for_Blue_Color");
     }
   }
 }

 void OnObjectLeaveNavPoint(String _NavPointID, String _ObjectID)
 {
   if ((new #GameController()).GetGameMode() != "Server")
     return;

   logWarning ("[OnObjectLeaveNavPoint]Call_Change_for_Red_Color_NavPointID: " + _NavPointID + " by_Object: " + _ObjectID );
   sendEvent (0.0, SOID_MissionController, "CheckUnitInNavPoint", [_NavPointID]);
   logWarning( "[OnObjectLeaveNavPoint]Call_CheckUnitInNavPoint");
 }

 event void BlueTeamCounter()
 {
   if ((new #GameController()).GetGameMode() != "Server")
     return;

   logWarning("BlueTeam_in_VP");
   if(isCaptured)
   {
     logWarning("TimeCount");
     SendBroadcastCockpitMessage
        (
          PlayerInfo.Rank + L" " + PlayerInfo.Name + CCommonStrings::str_EnterPlayer,
          CCockpitColorMap::m_NeutralNewsColor
        );
     TimeCount = TimeCount - 5;
     if (TimeCount <= 0)
        {
          sendEvent(0.0, SOID_MissionController, "BlueTeamVictory", []);
          return;
        }
     else
       {
         sendEvent(5.0, getIdentificator(user), "BlueTeamCounter", []);
       }
   }
   else
   {
     TimeCount = 300;
     logWarning("VP_free");
     SetNavpointColor (_NavPointID, new Color  (255.0/255.0, 0.0/256.0, 0.0/256.0)); //change for Red color
     Session.FireNetEvent("SetNavpointColor", [_NavPointID, new Color  (255.0/255.0, 0.0/256.0, 0.0/256.0)]);
     logWarning("[BlueTeamCounter]Change_for_Red_Color");

     SendBroadcastCockpitMessage
       (
         PlayerInfo.Rank + L" " + PlayerInfo.Name + CCommonStrings::str_EnterPlayer,
         CCockpitColorMap::m_NeutralNewsColor
       );
   }
 }

  event void BlueTeamVictory()
  {
    if (isDebug)
          logWarning("BlueTeamIsVictorious");

    CompleteObjective(0);
    FailObjective(1);
  }

  event void RedTeamVictory()
  {
    if (isDebug)
          logWarning("RedTeamIsVictorious");

    CompleteObjective(1);
    FailObjective(0);
  }

  event void CheckUnitInNavPoint(String _NavPointID)
  {
    int BlueCount = 0;

    if ((new #GameController()).GetGameMode() != "Server")
        return;

    logWarning("[CheckUnitInNavPoint]BeginCheck_enter_NavPoint: " +  _NavPointID);

    Array UnitsInNavPoint = GetObject("NavPoint_VP").GetDetectedList();
    logWarning("[CheckUnitInNavPoint]Definition_Units_In_NavPoint");

    for (int i = 0; i < UnitsInNavPoint.size(); i++)
    {
      //int Slot = GetPlayerSlotIDByUnitID(UnitsInNavPoint[i]);

      Component Session = (new #GameController()).GetGameSession();
      //int Team = Session.m_PlayerSlots[Slot].Team;
      int Team = GetPlayerTeamByUnitID(UnitsInNavPoint[i]);
      logWarning("Team_another_identifier TEAM: " + new String (Team));

      if (Team = 1)
      {
        BlueCount = BlueCount + 1;
        SetNavpointColor (_NavPointID, new Color  (0.0/256.0, 0.0/256.0, 255.0/255.0)); //change for blue color
        Session.FireNetEvent("SetNavpointColor", [_NavPointID, new Color  (0.0/256.0, 0.0/256.0, 255.0/255.0)]);
        logWarning("[CheckUnitInNavPoint]Change_for_Blue_Color");
      }
    }

    if (BlueCount == 0)
    {
      isCaptured  = false;
      SetNavpointColor (_NavPointID, new Color  (255.0/255.0, 0.0/256.0, 0.0/256.0)); //change for red color
      Session.FireNetEvent("SetNavpointColor", [_NavPointID, new Color  (255.0/255.0, 0.0/256.0, 0.0/256.0)]);
      logWarning("[CheckUnitInNavPoint]Change_for_Red_Color");
    }
  }
}
