//-----------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-----------------------------------------------------------------

//--------------------------------------------------------------------------------
//Make Array KillList with ERT_AGGRESSIVE must attack ignored other units
//--------------------------------------------------------------------------------

class TSovietKillGroup extends CBaseUnitGroup
{
  Array KillList = [
                     "Evil1",
                     "Evil2",
                     "Evil3",
                     "Evil4"
                   ];
  void Init()
  {
    CBaseUnitGroup::Init();
    logWarning("TSovietKillGroup void Init");
    SetOrder_Attack(KillList, ERT_AGGRESSIVE);
    sendEvent(0.0, "Myhero", "AfterGroupInit", []); //ss
   }

  void SetOrder_Attack(    //ss
      Array _Targets,
      int _EnemyReactionType
   )
  {
    logWarning("TSovietKillGroup void SetOrder_Attack");
    if (m_EnemyReactionType == ERT_FRIGID)
    {
      logWarning("TSovietKillGroup ERT_FRIGID and return");
      return;
    }

    if (m_CurrentOrder.m_Order != "" && m_CurrentOrder.m_Order != "Maneuver")
    {
      logWarning("TSovietKillGroup m_CurrentOrder.m_Order != null and m_CurrentOrder.m_Order != Maneuver AND PushOrder "+new String(m_CurrentOrder.m_Order));
      PushOrder();
    }

    m_CurrentOrder.m_Order = "Intermission";
    logWarning("TSovietKillGroup m_CurrentOrder.m_Order = Intermission");
    if (!_Targets.isEmpty())
    {
      logWarning("TSovietKillGroup SetEnemiesArray(_Targets)");
      SetEnemiesArray(_Targets);
    }
    m_CurrentOrder.m_EnemyReactionType = _EnemyReactionType;
    logWarning("TSovietKillGroup ERT is "+new String(m_EnemyReactionType));
    m_CurrentOrder.m_Order = "Attack";
    RefreshUnitsList();
    ContinueOrder();
    logWarning("TSovietKillGroup m_CurrentOrder.m_Order = Attack / RefreshUnitsList / ContinueOrder");
  }

  event void MyStatusList() //ss
  {
    logWarning("TSovietKillGroup MyStatusList");
    logWarning("order               is "+m_CurrentOrder.m_Order);
    logWarning("speed               is "+new String(m_CurrentOrder.m_MovingSpeed));
    logWarning("formation           is "+m_CurrentOrder.m_Formation);
    logWarning("distance            is "+new String(m_CurrentOrder.m_FormationDistance));
    logWarning("CyclePath           is "+new String(m_CurrentOrder.m_CyclePath));
    logWarning("NonSynchedPatrol    is "+new String(m_CurrentOrder.m_NonSynchedPatrol));
    logWarning("NextPatrolPoint     is "+new String(m_CurrentOrder.m_NextPatrolPoint));
    logWarning("GuardRadius         is "+new String(m_CurrentOrder.m_GuardRadius));
    logWarning("TargetObjectID      is "+m_CurrentOrder.m_TargetObjectID);
    logWarning("ReferenceObjectID   is "+m_CurrentOrder.m_ReferenceObjectID);
    logWarning("EnemyReactionType   is "+new String(m_CurrentOrder.m_EnemyReactionType));
  }
}

class CSovietKillerOfList extends CBaseAITask
{
  void OnEnemyTargeted()
  {
    CBaseAITask::OnEnemyTargeted();
    logWarning("CSovietKillerOfList "+GetName()+" call OnEnemyTargeted. Target now is : "+TargetedEnemy);
  }

  void Init()
  {
    CBaseAITask::Init();
    logWarning("CSovietKillerOfList void Init");
    logWarning("CSovietKillerOfList EnemyReactionType: unit="+new String(m_EnemyReactionType));
    if (m_Group != null)
        logWarning("CSovietKillerOfList init EnemyReactionType: group ="+new String(m_Group.m_EnemyReactionType));
    else logWarning("CSovietKillerOfList init EnemyReactionType: group = NO GROUP");
   }

  event void AfterGroupInit()  //ss
  {
    logWarning("CSovietKillerOfList void AfterGroupInit");
    logWarning("CSovietKillerOfList EnemyReactionType: unit="+new String(m_EnemyReactionType));
    if (m_Group != null)
        logWarning("CSovietKillerOfList init EnemyReactionType: group ="+new String(m_Group.m_EnemyReactionType));
    else logWarning("CSovietKillerOfList init EnemyReactionType: group = NO GROUP");
  }

  void SetOrder_Attack(
      String  _TargetID,
      float   _MoveSpeed
   )
  {
    // $LOG
    if (StatusDebug)
      logWarning(getIdentificator(user) + ": attacking " + _TargetID);
    if (m_EnemyReactionType == ERT_FRIGID)
        return;
    SetAnchorState(false);
    SetOrderState(true);
    m_CurrentEnemy = _TargetID;

    sendEvent(0.0, "TSovietKillGroupID", "MyStatusList", []); //ss
    logWarning("CSovietKillerOfList Array KillList "+new String(m_Group.KillList));
    setOrder_Attack(
        _TargetID,
        _MoveSpeed);
  }
}
