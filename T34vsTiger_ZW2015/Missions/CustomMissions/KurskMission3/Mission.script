//-------------------------------------------------------------------
//
//
//-------------------------------------------------------------------

class KurskM3Mission extends CSPMission
{
  //
  // Contruction and initialization
  //

  String  m_LocalTime       = "6:29:00";
  String m_TerrainMapTextureName = "Textures/Kursk_MAP1.tex";

  static String m_MissionBriefingPicMaterial = "CEFKM3BriefingPic";
/* */
  static Array  m_MissionObjectives = [
      [MOTID_Primary, KurskM3Mission_Strings::Objective01, MOSID_InProgress, true], //
      [MOTID_Primary, KurskM3Mission_Strings::Objective02, MOSID_InProgress, true]  //
                               ];

  static WString ObjectivesText = KurskM3Mission_Strings::ObjectivesText;
  boolean isDebug = true;
  boolean MainPlayerStartEgine = false;

    Array m_NavpointsForPlayerMap = [

                            [
                              ["NavPoint_Dubrova"],
                               CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                               new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
                            ]

                                   ];

  float  CockpitMapMinRange        = 500.0;
  float  CockpitMapMaxRange        = 5000.0;
  float  CockpitMapNavNameMaxRange = 5000.0;
  int    CockpitMapZoomSteps       = 5;
  Vector MarksInitPoint            = new Vector(1600.0, 1600.0, 0.0);
  Array  CockpitMapAccessBox       = [new Vector(0.0, 0.0, 0.0), new Vector(36000.0, 36000.0, 0.0)];

  final static Array RouterWorkingZones = [
                                           [100.0 , 100.0, 600000.0, 600000.0]
                                          ];
 /*  */
  final static Array DefaultMask = [["ENEMY", "MainMesh"], ["NEUTRAL", "AIR"]];
  final static Array Mask        = [["ENEMY", "MainMesh"], ["NEUTRAL", "AIR"]];                                          


  Array KillList_Primary = ["A_Tank18", "A_Tank19", "A_Tank20", "A_Tank21", "A_Tank22", "A_Tank23", "A_Tank24", "A_Tank25", "A_Tank26", "A_Tank27", "A_Tank28", "A_Tank29", "A_Tank30", "A_Tank31", "A_Tank32", "A_Tank33", "A_Tank34", "A_Tank35", "A_Tank36", "A_Tank37", "A_Tank38", "A_Tank39", "A_Tank40"];
                                           
//  Array KillList_Secondary = ["FirePoint_Zis76_1", "FirePoint_Zis76_2", "FirePoint_Zis76_3", "AISU85Unit_1", "AISU85Unit_3", "AI_T34-76Unit_1", "AI_T34-76Unit_2", "AI_T34-76Unit_3", "AI_T34-76Unit_4", "AI_T34-76Unit_5"];
  

  void KurskM3Mission()
  {
    // Construct mission
    CSPMission("KurskM3Mission", "KurskM3Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<KurskM3Terrain>());
    SetMissionAtmosphere(new #Atmosphere<KurskM3Atmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseLowLandForestC1(GetMissionAtmosphere()));
    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());
    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

   m_MissionLensFlare =  new #LensFlare<CLensFlare>();

    SetMissionWorldMatrices(new #WorldMatrices<KurskM3WorldMatrices>(), [
        [ LAYER_TERRAIN_NAME, "KurskM3LandscapeLayer"   ],
        [ LAYER_TERRAIN_ZONE, "KurskM3TerrainZoneLayer" ],
        [ LAYER_ROUTER_ZONE,   "KurskM3RouterZoneLayer" ],//
        [ LAYER_MICROTEXTURE_MAP1, "KurskM3MicroTextures1" ],  //
        [ LAYER_TERRAIN_WATERHEIGHTS, "KurskM3WaterHeights"]
      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

// TODO
  void StartMission()
  {
    // call inherited
   CSPMission::StartMission();

  }

  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
     MainPlayerStartEgine = true;
  }



  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
     if (((_NavPointID == "NavPoint_Dubrova")) && ((_ObjectID == "MainPlayerUnit")))
    {
     // CompleteObjective(1);
      SetObjectiveStatus(1, MOSID_Completed);
     sendEvent(1.0, SOID_MissionController, "Shutdown", []);   //

    }
    if (((_NavPointID == "NavPoint_Tig_Dubrova")) && ((_ObjectID.IsStartsWith("TigerGrp1"))))
    {
    //  CompleteObjective(1);
      SetObjectiveStatus(1, MOSID_Completed);    
      sendEvent(1.0, SOID_MissionController, "Shutdown", []);   // 
     } 
   }


  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
      /*    if (_NavPointID == "NavPoint_BattleFront")
       {
        logWarning("Object: " + _ObjectID + " leave NavPoint: " +  _NavPointID); //
       } */


  }


  //----------------
  // Another Classes
  //----------------
  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }

  event void OnObjectDestroyed( String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);
    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
      //logError("Component 'DeadThing' == null");
      return;
    }

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
        //logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
          //logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"  
          if (Penalty_count >= 2)
          {
            //logWarning("MissionKillingByFriendlyFire");
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(2.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }
    int _Index_Primary   = KillList_Primary.find(_ObjectID);

    if(_Index_Primary != -1)
    {
      KillList_Primary.remove(_Index_Primary);
    }
    if((KillList_Primary.size() <= 4))
    {
      SetObjectiveStatus(0, MOSID_Completed);
      //CompleteObjective(0);
    }
}

  event void FailMissionMad()
  {
    FailMission(0.0);
  }

 void Shutdown()
  {
    //CSPMission::Shutdown();
    //CMission::Shutdown();
logWarning("debug132 = [Mission.script]  void Shutdown");
    ClearObjectives();
    if (null == m_MissionContentClass)
      return;

    // Shutdown mission content
    for (int Index = 0; Index < m_MissionContentClass.GetObjectRecordsQty(); Index++)
    {
      Array Record = m_MissionContentClass.GetObjectRecord(Index);
      Component Object = GetObject(Record[CMissionContent::INDEX_ObjectID]);
      if (null != Object)
      {
        if (isFunctionExist(Object, "Shutdown", 1))
          Object.Shutdown(this);
        shutdownComponent(Object);
//          DeleteObject(Record[CMissionContent::INDEX_ObjectID]);
       }
//      m_MissionContentClass.DeleteObjectRecord(Record[CMissionContent::INDEX_ObjectID]);
    }
    shutdownComponent(m_MissionContentClass); 
  }

  }