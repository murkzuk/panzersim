//-------------------------------------------------------------------
//
//
//-------------------------------------------------------------------

class KurskM1Mission extends CSPMission
{
  //
  // Contruction and initialization
  //

  String  m_LocalTime       = "6:20:00";
  String m_TerrainMapTextureName = "Textures/Kursk_MAP1.tex";

  static String m_MissionBriefingPicMaterial = "CEFKM1BriefingPic";
/* */
  static Array  m_MissionObjectives = [
      [MOTID_Primary, KurskM1Mission_Strings::Objective01, MOSID_InProgress, true]
                               ];
static WString ObjectivesText = KurskM1Mission_Strings::ObjectivesText;

  boolean isDebug = true;
  boolean MainPlayerStartEgine = false;
  //boolean AttackM1 = true;  

    Array m_NavpointsForPlayerMap = [
                            [
                              ["NavPoint_Village_C1"],
                               CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                               new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
                            ],

                            [
                              ["NavPoint_Tomarovka"],
                               CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                               new Color(30.0/256.0, 60.0/256.0, 245.0/256.0)   // NavColor
                            ]

                                   ];

  float  CockpitMapMinRange        = 500.0;
  float  CockpitMapMaxRange        = 7000.0;
  float  CockpitMapNavNameMaxRange = 4000.0;
  int    CockpitMapZoomSteps       = 5;
  Vector MarksInitPoint            = new Vector(3200.0, 3200.0, 0.0);
  Array  CockpitMapAccessBox       = [new Vector(0.0, 0.0, 0.0), new Vector(36000.0, 36000.0, 0.0)];

  final static Array RouterWorkingZones = [
                                           [100.0 , 100.0, 600000.0, 600000.0]
                                          ];
 /* 
  final static Array DefaultMask = [["ENEMY", "MainMesh"], ["NEUTRAL", "AIR"]];
  final static Array Mask        = [["ENEMY", "MainMesh"], ["NEUTRAL", "AIR"]];                                          
*/

  Array KillList_Primary = ["A_Tank1", "A_Tank2", "A_Tank3", "A_Tank4", "A_Tank5", "A_Tank6", "A_Tank7", "A_Tank8", "A_Tank9"];

//  Array KillList_Secondary = ["FirePoint_Zis76_1", "FirePoint_Zis76_2", "FirePoint_Zis76_3", "AISU85Unit_1", "AISU85Unit_3", "AI_T34-76Unit_1", "AI_T34-76Unit_2", "AI_T34-76Unit_3", "AI_T34-76Unit_4", "AI_T34-76Unit_5"];
 boolean MainPlayerStart = false;

  void KurskM1Mission()
  {
    // Construct mission
    CSPMission("KurskM1Mission", "KurskM1Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<KurskM1Terrain>());
    SetMissionAtmosphere(new #Atmosphere<KurskM1Atmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseLowLandForestC1(GetMissionAtmosphere()));
    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());
    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());


    SetMissionWorldMatrices(new #WorldMatrices<KurskM1WorldMatrices>(), [
        [ LAYER_TERRAIN_NAME, "KurskM1LandscapeLayer"   ],
        [ LAYER_TERRAIN_ZONE, "KurskM1TerrainZoneLayer" ],
        [ LAYER_ROUTER_ZONE,   "KurskM1RouterZoneLayer" ],//    
        [ LAYER_MICROTEXTURE_MAP1, "KurskM1MicroTextures1" ],  //
        [ LAYER_TERRAIN_WATERHEIGHTS, "KurskM1WaterHeights"]
      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

// TODO
  void StartMission()
  {
    // call inherited    //       NavPoint_Tig_C1
   CSPMission::StartMission();

   Component console = new #GameController().GetObject(SOID_Console);

    sendEvent(60.0, "CZ1RedGunTask", "SetActiveGroup", []);
    sendEvent(90.0, "CZ22RedGunTask", "SetActiveGroup", []);
    sendEvent(92.0, "CZ33RedGunTask", "SetActiveGroup", []);
  }

  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (!MainPlayerStart)
    {
      //logWarning("Start cinema!!");
      MainPlayerStart = true;  //
      sendEvent(10.0, getIdentificator(user) ,"MainPlayerUnitMessage", []);
      sendEvent(6.0, "LAH_Tiger1302", "WMFollow", []);
     
     // Component _Game = new #GameController();
     // if ( null != _Game)
     //   _Game.RunCinema("EngineStart");
    }
  }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
    if ((_NavPointID == "NavPoint_AirBattle_3") && ((_ObjectID.IsStartsWith("Stuka_") )))
    {
      sendEvent(0.0, "C_StG_A", "Stuka1End", []);
      sendEvent(1.0, "C_StG_B", "Stuka2End", []);
      sendEvent(2.0, "C_StG_C", "Stuka3End", []);
    }

    if (_ObjectID.IsStartsWith("LAH_") )
    {

      if (_NavPointID == "NavPoint_Tig_C1")
       {
        sendEvent(0.0, SOID_MissionController, "Shutdown", []);
        //SetObjectiveStatus(0, MOSID_Completed);   
        }
        
      else if (_NavPointID == "Village_C1_end")
       {
        sendEvent(0.0, SOID_MissionController, "Shutdown", []);
       // SetObjectiveStatus(0, MOSID_Completed);   
       }

    }
     if ((_NavPointID == "NavPoint_Village_C1") && ((_ObjectID == "MainPlayerUnit")))
    {
      sendEvent(0.0, SOID_MissionController, "Shutdown", []);
      SetObjectiveStatus(0, MOSID_Completed);
      
    }
}
  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
          if (_NavPointID == "NavPoint_BattleFront")
       {
        logWarning("Object: " + _ObjectID + " leave NavPoint: " +  _NavPointID); //
       } /**/

  }
  //----------------
  // Another Classes
  //----------------

  event void MainPlayerUnitMessage()
  {
    SendCockpitMessage(L"Unit 1302 Reporting: " + CGameMessages::msg_OnOurWay, new Color(1.0, 1.0, 0.0));
  }

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }

  event void OnObjectDestroyed( String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);
    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
      //logError("Component 'DeadThing' == null");
      return;
    }

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
        //logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
          //logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"  
          if (Penalty_count >= 2)
          {
            //logWarning("MissionKillingByFriendlyFire");
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(2.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }
     if (_ObjectID.IsStartsWith("A_Tank"))
    {
      int _Index = KillList_Primary.find(_ObjectID);

      /*if (_Index == -1)
      {
        if (isDebug)
          logError("Object: " + _ObjectID + " not find in KillList_Primary1: " + new String(KillList_Primary1) + ".");
        return;
      }*/

      if(_Index != -1)
        KillList_Primary.remove(_Index);

      if (KillList_Primary.size() == 0)
      {
//        if (isDebug)
         logError("We congratulate!!! You have executed first problem.");

//         CompleteObjective(0);
      }
    }
 }

  event void FailMissionMad()
  {
    FailMission(0.0);
  }

 void Shutdown()
  {

    CSPMission::Shutdown();
  }

 }
