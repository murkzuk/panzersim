
//-------------------German Forces

class CWEFM1Panzer_FaustGrp extends CBaseUnitGroup
{
  boolean isActive = false;

  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(221.0, getIdentificator(user), "SetActiveGroup", []);

  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);  //
    isActive = true;

  }

}

class CWEFM1Panzer_FaustTask extends CBaseAITankTask, CBaseAITask   //this is the flanking panzers
{
     boolean isActive = false;
     boolean First  = false;
     boolean Second = true;

  void Init()
  {
    CBaseAITankTask::Init();

    sendEvent(223.0, getIdentificator(user), "FaustTask_PointVecA", []);
    sendEvent(330.0, getIdentificator(user), "ToggelOn", []);
  }


  event void FaustTask_PointVecA()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    float Radius = randnum(9.99);
    Vector RandomVector = new Vector(0.0, rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_CWEFM1Patrol_2");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(40.0, getIdentificator(user), "FaustTask_PointVecA", []);
    }
  }

  event void PointVecC()
  {
    if (!Second)
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2CVec =  GetNavPointBehPos("NavPoint_PZ6_Attack2");
    Vector  Destination2CVec = PreDestination2CVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2CVec), 3.8f );
    sendEvent(40.0, getIdentificator(user), "PointVecC", []);

    }
  }
  event void ToggelOn()
  {
   if(!First)
   {
     First = true;
     Second = false;
     sendEvent(0.0, getIdentificator(user), "PointVec2C", []);

   }
  }
}

class CWEFM1Panzer_Faust2ndGrp extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();//
    ActivateRadar(false);
    ActivateMovement(false);
    ActivateFire(false);
    sendEvent(226.0, getIdentificator(user), "Faust2ndGrp", []); //
  }

 event void Faust2ndGrp()
 {
    CBaseUnitGroup::Init(); //
    PopDelayedOrder();    //
   // SetFormation("CWideWedgeFormation", 30, true, false); 
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);//  


 }
}
class CWEFM1Faust2ndTask extends CBaseAITankTask, CBaseAITask
{
  boolean Faust2Vec2B = false;
   void Init()
   {
   sendEvent(228.0, getIdentificator(user), "Faust2ndPosition", []); //  CWEFM1_Faust2ndVecTask //
   }

  event void Faust2ndPosition()
  {
    if(!Faust2Vec2B)
      CBaseAITankTask::Init();
      Faust2Vec2B = true;
      sendEvent(1.0, getIdentificator(user), "Faust2ndPointVec2B", []);
  }

  event void Faust2ndPointVec2B()
  {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector (rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_PZ6_Attack2");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(34.0, getIdentificator(user), "Faust2ndPointVec2B", []);
  }

}
//===============  Player platoon
// ==============  TIGER TASK
class CWEFM1_TIGERGrp1 extends CBaseUnitGroup          //this is the flanking tigers
{
  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(268.0, getIdentificator(user), "TigerAwake", []);

  }

  event void TigerAwake()
  {
      PopDelayedOrder();
      CBaseUnitGroup::Init();    //
      CBaseAITankTask::Init();
      ActivateMovement(true);
      float CollisionRadius = 12.0;
  }
}

class CWEFM1_TigerVecTask extends CBaseAITankTask, CBaseAITask
{
  boolean TigerVec2   = false;
  boolean TigerVecAT3 = false;
  boolean TigerVecAT4 = false;

  void Init()
  {
   sendEvent(278.0, getIdentificator(user), "TigerAttackVec2", []); //
   sendEvent(688.0, getIdentificator(user), "TigerAttackVecAT3", []); //
   sendEvent(808.0, getIdentificator(user), "TigerAttackVecAT4", []); //
  }
  
  event void TigerAttackVec2()
  {
    if(!TigerVec2)
    {
    CBaseAITankTask::Init();
    ActivateRadar(true);
    ActivateFire(true);
    //SetEnemyReactionType(ERT_AGGRESSIVE);
    TigerVec2 = true;
    }
    if(!TigerVecAT3)
    {
    float Radius = randnum(19.99);
    Vector RandomVector = new Vector (rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2TVec =  GetNavPointBehPos("NavPoint_PZ6_Attack");
    Vector  Destination2TVec = PreDestination2TVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2TVec), 3.8f );
    sendEvent(31.0, getIdentificator(user), "TigerAttackVec2", []);
    }
    else return;
  }

  event void TigerAttackVecAT3()
  {
    if(!TigerVecAT3)
    {
    CBaseAITankTask::Init();
    ActivateRadar(true);
    ActivateFire(true);
   // SetEnemyReactionType(ERT_AGGRESSIVE);
    TigerVecAT3 = true;
    }

    float Radius = randnum(99.99);
    Vector RandomVector = new Vector (rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination3TVec =  GetNavPointBehPos("NavPoint_PZ6_Attack3");
    Vector  Destination3TVec = PreDestination3TVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination3TVec), 4.0f );               //  
    sendEvent(28.0, getIdentificator(user), "TigerAttackVecAT3", []);

  }

  event void TigerAttackVecAT4()
  {
    if(!TigerVecAT4)
    {
    CBaseAITankTask::Init();
    ActivateRadar(true);
    ActivateFire(true);
   // SetEnemyReactionType(ERT_AGGRESSIVE);
    TigerVecAT4 = true;
    }

    float Radius = randnum(99.99);
    Vector RandomVector = new Vector (rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination4TVec =  GetNavPointBehPos("NavPoint_PZ6_Attack4");
    Vector  Destination4TVec = PreDestination4TVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination4TVec), 3.8f );               //
    sendEvent(24.0, getIdentificator(user), "TigerAttackVecAT4", []);

  }
}
// ========================================================================TigerGrp2
class CWEFM1_HANOMAGGrp1  extends CBaseUnitGroup //
{
  void Init()
  {
    CBaseUnitGroup::Init();//
    ActivateRadar(false);
    ActivateMovement(false);
    ActivateFire(false);
    sendEvent(475.0, getIdentificator(user), "AttachTarget", []); //
  }

 event void AttachTarget()
 {
    PopDelayedOrder();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
   // SetEnemyReactionType(ERT_AGGRESSIVE);

 }
}

class CWEFM1_PANZERGrp1  extends CBaseUnitGroup //
{
}
class CWEFM1_PANZERTASK1 extends CBaseAITankTask, CBaseAITask
{

     boolean isActive = false;
     boolean First  = false;
     boolean Second = true;

  void Init()
  { 
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(267.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(628.0, getIdentificator(user), "ToggelOn", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2B", []);
   
  }
  event void PointVec2B()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    //SetEnemyReactionType(ERT_AGGRESSIVE); 
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(69.99);
    Vector RandomVector = new Vector (0.0, rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_PZ6_Attack");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(44.0, getIdentificator(user), "PointVec2B", []);
    }
    return;

  }
  event void PointVec2C()
  {
    if (!Second)
    {
    CBaseAITankTask::Init();
//    SetEnemyReactionType(ERT_AGGRESSIVE); 
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_PZ6_Attack_T34");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(30.0, getIdentificator(user), "PointVec2C", []);

    }
    return;
  }

  event void ToggelOn()
  {
   if(!First)
   {
     First = true;
     Second = false;
     sendEvent(0.0, getIdentificator(user), "PointVec2C", []);

   }
  }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}

class CWEFM1Pnz_ResupplyTask extends CVeeFormationTask    //  CBaseUnitGroup  ,
{
  void Init()
  {
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
    sendEvent(312.0, getIdentificator(user), "SupplyMainPlayer", []); //
  }
 event void SupplyMainPlayer()
 {
    CVeeFormationTask::Init();
    ActivateRadar(true);
    ActivateFire(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float CollisionRadius = 12.0;
 }
}

class CWEFM1Tiger_TroopersGrp1 extends CBaseUnitGroup //
{
  void Init()
  {
    CBaseUnitGroup::Init();//
    ActivateRadar(false);
    ActivateMovement(false);
    ActivateFire(false);
    sendEvent(325.0, getIdentificator(user), "AttachMainPlayer", []); //
  }

 event void AttachMainPlayer()
 {
    PopDelayedOrder();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);   //

 }
}

//-----------------------SOVIET Forces--------------------------------------------

class CWEFM1TankArmyGrp extends CBaseUnitGroup        // KVs tanks
{

  void Init()
  {
    CBaseUnitGroup::Init();//
    ShowGroup(false);
    ActivateRadar(false);
    ActivateMovement(false);
    ActivateFire(false);
    sendEvent(220.0, getIdentificator(user), "CWEFM1TankArmy", []); //
  }

 event void CWEFM1TankArmy()
 {
    ShowGroup(true);
    PopDelayedOrder();//
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);   //
 }

}

class CWEFM1TankArmyTask extends CBaseAITankTask, CBaseAITask    
{
  boolean TankArmyVec2A = false;

   void Init()
   {
     CBaseAITankTask::Init;
     sendEvent(225.0, getIdentificator(user), "TankArmy2ndPointVec2A", []);
   }

  event void TankArmy2ndPointVec2A()
  { 
   if(!TankArmyVec2A)
   {
    float Radius = randnum(59.99);
    Vector RandomVector = new Vector (rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationTA2AVec =  GetNavPointBehPos("NavPoint_PZ6_Attack");
    Vector  DestinationTA2AVec = PreDestinationTA2AVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationTA2AVec), 3.8f );
    sendEvent(31.0, getIdentificator(user), "TankArmy2ndPointVec2A", []);
   }
  }
}

class CWEFM1t34_Task extends CBaseAITankTask, CBaseAITask
{

}
/*
class CWEFM1ArttileryPos_A2 extends CBaseUnitGroup
{
      void Init ()
   {
    ShowGroup(false);
    ActivateFire(false);                         //
    sendEvent(3.0, getIdentificator(user), "UnMask", []);
   }
    event void UnMask()
   {
   ShowGroup(true);
   ActivateFire(true);
   }
}

class CWEFM1ArttileryPos_A5 extends CBaseUnitGroup
{
      void Init ()
   {
    ShowGroup(false);
    ActivateFire(false);                         //
    sendEvent(10.0, getIdentificator(user), "UnMask", []);
   }
    event void UnMask()
   {
   ShowGroup(true);
   ActivateFire(true);
   }
}
        
class CWEFM1ArttileryPos_B1 extends CBaseUnitGroup
{
      void Init ()
   {
    ShowGroup(false);
    ActivateFire(false);                         //
    sendEvent(10.0, getIdentificator(user), "UnMask", []);
   }
    event void UnMask()
   {
   ShowGroup(true);
   ActivateFire(true);
   }
}   */
class CWEFM1T34ReserveGrp extends CBaseUnitGroup
{

    void Init ()
   {
    CBaseUnitGroup::Init();
    ShowGroup(false);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
//    sendEvent(30.0, getIdentificator(user), "Mask", []);           10                    //
//    sendEvent(220.0, getIdentificator(user), "UnMask", []);           10
    sendEvent(221.0, getIdentificator(user), "PlatoonAttackPosition", []);    //   320

   }

   event void PlatoonAttackPosition()
   {
    CBaseAITankTask::Init();
    //PopOnStoppedOrder();
    ShowGroup(true);
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 3.5;
    SetFormation("CWedgeFormation", 32, true, false);

     Array ApproachPoints = [
                    GetNavPointBehPos("Nav_WEFM1Reserve1"),            //
                    GetNavPointBehPos("Nav_WEFM1Reserve2"),
                    GetNavPointBehPos("Nav_WEFM1Reserve3"),
                    GetNavPointBehPos("Nav_WEFM1Reserve4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1T34ReserveGrp", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1T34ReserveGrp", "", [], ""]
                     ]);
   // sendEvent(90.0, getIdentificator(user), "PushOrder", []);
}

   event void Mask()
   {
   CancelAllOrders();
   ShowGroup(false);
   }

    event void UnMask()
   {
   CancelAllOrders();
   ShowGroup(true);
   }

}
class CWEFM1BTR_Task extends CBaseAIBtrTask
{

    void Init ()
   {
    ActivateFire(true);
    ActivateRadar(true);
    CBaseAIBtrTask::Init();
    ActivateMovement(true);
    sendEvent(230.0, getIdentificator(user), "PlatoonAttackPosition", []); //
   }

 event void PlatoonAttackPosition()
  {
    ActivateMovement(true);
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 4.00;
    float CollisionRadius = 12.0;          
     Array ApproachPoints = [
                    //GetNavPointBehPos("NP_WEFM1RedArmy_A1"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A2"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1BTR_Task", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1BTR_Task", "", [], ""]
                      ]);
}

  void OnUnitHitByEnemy(String _UnitID, String _EnemyID)  // calles when unit (member of the group) hit by enemy
  {

   SetEnemyReactionType(ERT_AGGRESSIVE);
 //  sendEvent(0.0, getIdentificator(user), "", []);

 }

}
class CWEFM1T34PlatoonA1_Grp1 extends CBaseUnitGroup
{

    void Init ()
   {
    CBaseUnitGroup::Init();
    ShowGroup(false);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(218.0, getIdentificator(user), "PlatoonAttackPosition", []);//
   }
   event void PlatoonAttackPosition()
  {
    CBaseAITankTask::Init();
    ShowGroup(true);
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Speed  = 4.00;
    float CollisionRadius = 12.0;          //    
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    SetFormation("CWideWedgeFormation", 52, true, false);




     Array ApproachPoints = [
                    GetNavPointBehPos("NP_WEFM1RedArmy_A1"),       // GetPointXYPos() Using my new XY function, tested 10-3-09 and worked perfect
                    GetNavPointBehPos("NP_WEFM1RedArmy_A2"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1T34PlatoonA1_Grp1", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1T34PlatoonA1_Grp1", "", [], ""]
                      ]);

 }

}
class CWEFM1SHOCKPlatoonA2_Grp extends CBaseUnitGroup
{
    void Init ()
   {
    CBaseUnitGroup::Init();
    ShowGroup(false);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(210.0, getIdentificator(user), "SHOCKAttackPosition", []);  //
   }
   event void SHOCKAttackPosition()
  {

    CBaseTankTask::Init();
    ShowGroup(true);
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 3.50;
    float CollisionRadius = 12.0;
    SetFormation("CWideWedgeFormation", 62, true, false);
     Array ApproachPoints = [
                    GetNavPointBehPos("Nav_WEFM1Reserve2"),
                    GetNavPointBehPos("Nav_WEFM1Reserve3"),
                    GetNavPointBehPos("Nav_WEFM1Reserve4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1SHOCKPlatoonA2_Grp", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1SHOCKPlatoonA2_Grp", "", [], ""]
                      ]);
   // sendEvent(90.0, getIdentificator(user), "PushOrder", []);
}

 }

class CWEFM1_SU122Grp extends CBaseUnitGroup
{
    void Init ()
    {
    CBaseUnitGroup::Init();
    ShowGroup(false);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(212.0, getIdentificator(user), "GroupAttackPosition", []);//
    }
  event void GroupAttackPosition()
   {
    CBaseAISAUTask::Init();
    ShowGroup(true);
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Speed  = 3.50;
    float CollisionRadius = 12.0;
    SetFormation("CWideWedgeFormation", 62, true, false);

     Array ApproachPoints = [
                    GetNavPointBehPos("NP_WEFM1RedArmy_A1"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1_SU122Grp", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1_SU122Grp", "", [], ""]
                      ]);
//    sendEvent(90.0, getIdentificator(user), "PushOrder", []);
 }

}


class CWEFM1T34Platoon3 extends CBaseUnitGroup
{

    void Init ()
   {
    CBaseUnitGroup::Init();
    ShowGroup(false);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(230.0, getIdentificator(user), "PlatoonAttackPosition", []);     //
   }
   event void PlatoonAttackPosition()
  {
    CBaseAITankTask::Init();
    ShowGroup(true);
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetFormation("CWideWedgeFormation", 32, true, false);
    float Speed  = 3.5;
    float CollisionRadius = 12.0;          //
     Array ApproachPoints = [
                    GetNavPointBehPos("Nav_WEFM1Reserve2"),
                    GetNavPointBehPos("Nav_WEFM1Reserve3"),
                    GetNavPointBehPos("Nav_WEFM1Reserve4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1T34Platoon3", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1T34Platoon3", "", [], ""]
                      ]);

    }
}


class CWEFM1AIBtrTask extends CBaseAIBtrTask
{
   boolean isActive = false;

  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(90.0, getIdentificator(user), "SetActiveGroup", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    isActive = true;
  }
}

class CWEFM1StaticGunsTask extends CFieldGunTask_G
{
   boolean isActive = false;

  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(128.0, getIdentificator(user), "SetActiveGroup", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    isActive = true;
  }
}
class CWEFM1BaseZisTask extends CFieldGunTask_R
{
   boolean isActive = false;

  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(130.0, getIdentificator(user), "SetActiveGroup", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    isActive = true;
  }
}

class CWEFM1BM13Task extends CReFillBM13Task_R //, CFieldGunTask_R
{
   boolean isActive = false;

  void Init()
  {
    CReFillBM13Task_R::Init();
    ShowUnit(false);  //   //
    //SetRadarDetectFriends(true);
    SetRadarDetailedEnemies(true);
   // SetRadarDetailedFriends(true);
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(170.0, getIdentificator(user), "SetActiveGroup", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ShowUnit(true);  //
    ActivateFire(true);
    ActivateRadar(true);
   // SetEnemyReactionType(ERT_AGGRESSIVE);
    isActive = true;
  }
}
/////////////////////////////////////////////////////////////////////


class CWEFM1SovietZis1HiddenGroup  extends  BaseZisGroup
{
  boolean active = false;

  void Init()
  {
    BaseZisGroup::Init();
    StopFightGroup();
  //  ShowGroup(false);
    for (int i = 0; i < m_Units.size(); i++)
      addClassificatorObject(m_Units[i], "INVISIBLE_ON_RADAR");

    //if (GetMission().isDebug)
    //{
    //  logWarning("[Init]  GroupID = " + getIdentificator(user));
    //  for (int i = 0; i < m_Units.size(); i++)
    //      (new #GameController().GetObject(SOID_Console)).logClassificatorsList(m_Units[i]);
    //}
  }

  event void StartFightHiddenZis()
  {

     //logWarning("[Ironweed] StartFightHiddenZis ENTER");

    if (!active)
    {
      //logWarning("[Ironweed] StartFightHiddenZis active is FALSE = " + new String(active));
      GetMission().SetObjectiveVisible(1, true);
    // ShowGroup(true);

      //if(GetMission().isDebug)
      //{
      //  logWarning("[Ironweed] StartFightHiddenZis");
      //  logWarning("[Ironweed]  group ID = " + getIdentificator(user));
      //}

      for (int i = 0; i < m_Units.size(); i++)
      {
        removeClassificatorObject(m_Units[i], "INVISIBLE_ON_RADAR");
      }

      fireEvent(0.0, [], "SetRadarUnit", [GetMission().DefaultMask]);
      StartFightGroup();
      active = true;
      //logWarning("[Ironweed] StartFightHiddenZis active is MUST BE TRUE = " + new String(active));
    }
  }

   void OnUnitHitByEnemy(String _UnitID, String _OwnerID)
  {
    CBaseUnitGroup::OnUnitHitByEnemy(_UnitID, _OwnerID);

    //if(GetMission().isDebug)
    //  logWarning("SovietZisHiddenGroup = " + _UnitID + " has_damaged_from_OwnerID = " + _OwnerID);

    Component Owner = GetMission().GetObject(_OwnerID);

    if (_OwnerID == "MainPlayerUnit")
    {
      //sendEvent(0.0, SOID_MissionController, "StartPhase2", []);
     sendEvent(0.0, "CWEFM1SovietZis1HiddenGroup", "StartFightHiddenZis", []);
      //  fireEvent(0.0, [], "StartFightHiddenZis", []);
   // sendEvent(0.0, getIdentificator(this), "StartFightHiddenZis", []);
      //if(GetMission().isDebug)
      //  logWarning("Hidden_Zis_AggressiveByHit");
    }
  }

  void OnUnitExplosion(String _UnitID, String _OwnerID)
  {
    CBaseUnitGroup::OnUnitExplosion(_UnitID, _OwnerID);

    //if(GetMission().isDebug)
    //  logWarning("CWEFM1SovietZis1HiddenGroup _UnitID = " + _UnitID + "has explosion from _OwnerID = "+ _OwnerID);

    Component enemy = GetMission().GetObject(_OwnerID);
    if(enemy == null)
      return;

    //if (!_isvisible)
     // return;

    if((_OwnerID == "MainPlayerUnit"))
    {
    // ShowGroup(true);
      //Component enemy = GetMission().GetObject(_OwnerID);
      Component Owner = GetMission().GetObject(_OwnerID);

      if (checkMask(Owner, ["HEAVYTANK", "FRIEND"], []))
        {
          sendEvent(0.0, SOID_MissionController, "StartPhase2", []);
          fireEvent(0.0, [], "StartFightHiddenZis", []);
          // sendEvent(0.0, "CWEFM1SovietZis1HiddenGroup", "StartFightHiddenZis", []);
          //if(GetMission().isDebug)
          //      logWarning("Hidden_Zis_AggressiveByExplosion");

        }
     }
  }
}
/*
class CWEFM1AsaultGunTask extends CBaseAISAUTask  
{
   void Init()
  {
      CBaseAISAUTask::Init();
      ActivateMovement(false);
      ActivateRadar(false);
      ActivateFire(false);
  }

} */

class CWEFM1Sappers_Group  extends CBaseUnitGroup
{
  boolean SapperAlarm = false;

  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateFire", [false]);
    ForEachUnitTask("ActivateMovement", [false]);
    SetEnemyReactionType(ERT_PASSIVE);
  }

  event void AwaySappers()
  {
    ForEachUnitTask("ActivateMovement", [true]);
    PopDelayedOrder();
    SetEnemyReactionType(ERT_FRIGID);
    SetFormation("CWedgeFormation", 12, true, false);
    //if(GetMission().isDebug)
    //  logWarning("SAPPERS AWAY!");
  }

  void OnEnemyTargeted(Component _UnitAlerted)
  {
    GetMission().AwaySappaersOnSee();
  }
}

class CWEFM1RepairZis_Group  extends CBaseUnitGroup
{
  boolean SapperAlarm = false;

  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateFire", [false]);
    ForEachUnitTask("ActivateMovement", [false]);
    SetFormation("CWedgeFormation", 12, true, false);
    SetEnemyReactionType(ERT_PASSIVE);

   }

  event void AwayRepair()
  {
    ForEachUnitTask("ActivateRadar", [true]);
    ForEachUnitTask("ActivateMovement", [true]);
    PopDelayedOrder();
    SetEnemyReactionType(ERT_FRIGID);
    SetFormation("CWedgeFormation", 12, true, false);

    //if(GetMission().isDebug)
    //  logWarning("REPAIR TEAM AWAY!");
  }

  void OnEnemyTargeted(Component _UnitAlerted)
  {
    GetMission().AwaySappaersOnSee();
  }
}

class CWEFM1TaskSappers  extends CBaseAITask
{
 event void OnExplosion(
    float     _Damage,               // - force impact wave (not of used)
    Matrix    _Position,             //  - source of the wave
    float     _Radius,               // - radius of explosion (not used)
    String    _OwnerID,              // - ID of [unit], which in the essence applied [povrezhdeni]
    category  _DamageType,           // - the type of damage  - the type of projectile which fell
    int       _SubstanceId,          // - material into which burn Array
    Array     _ExtraAttribs,         // - additional parameters
    float     _BulletDamageModifier, // - coefficient of damage transmitted by the projectile
    Component _DamageJoint
              )
  {
    if (!m_Group.SapperAlarm)
    {
      //if(GetMission().isDebug)
      //  logError(" OnExplosion - for Sappers team");

      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
  }

  void OnHitByEnemy(String _EnemyID)
  {
    if (!m_Group.SapperAlarm)
    {
      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
  }
}

class CWEFM1TaskRepairZiS  extends CBaseAITask
{
 event void OnExplosion(
    float     _Damage,               // - force impact wave (not of used)
    Matrix    _Position,             //  - source of the wave
    float     _Radius,               // - radius of explosion (not used)
    String    _OwnerID,              // - ID of [unit], which in the essence applied [povrezhdeni]
    category  _DamageType,           // - the type of damage  - the type of projectile which fell
    int       _SubstanceId,          // - material into which burn Array
    Array     _ExtraAttribs,         // - additional parameters
    float     _BulletDamageModifier, // - coefficient of damage transmitted by the projectile
    Component _DamageJoint
                        )
  {
    if (!m_Group.SapperAlarm)
    {
      //if(GetMission().isDebug)
      //  logError(" OnExplosion - for Repair team");

      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
   }

  void OnHitByEnemy(String _EnemyID)
  {
    if (!m_Group.SapperAlarm)
    {
      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
    }
  }

}

 class CWEFM1USSRSoldier1Group extends CBaseUnitGroup
{
  void Init()
  {
    ShowGroup(false);  //
    ForEachUnitTask("ActivateMovement", [false]);
    CBaseUnitGroup::Init();
    sendEvent(493.0, getIdentificator(user), "Mask", []); //
    sendEvent(500.0, getIdentificator(user), "CWEFM1SoldiersMarch1", []); // NP_WEFM1RedArmy_A2 NP_WEFM1RedArmy_A3 NP_WEFM1RedArmy_A4
  }

   event void CWEFM1SoldiersMarch1()
    {
     PopDelayedOrder();   
     ForEachUnitTask("ActivateMovement", [true]);
//     ShowGroup(true);     
  //   SetOrder_MoveTo(GetNavPointBehPos("Path"), 3.0, true);
    }
   event void Mask()
   {
  // CancelAllOrders();
   ShowGroup(true);
   }
} 
 class CWEFM1RedArmyPlatoon2 extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateMovement(false);
    ShowGroup(false);  //
     sendEvent(540.0, getIdentificator(user), "Mask", []); //
    sendEvent(558.0, getIdentificator(user), "AttackPosition", []); 
  }

  event void AttackPosition()
  {
  //  ShowGroup(true);    
    ActivateMovement(true);
    float Speed  = 3.5f;
   SetFormation("CFrontFormation", 16, false, false);
   Array ApproachPoints = [
                    GetNavPointBehPos("NP_WEFM1RedArmy_A2"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1RedArmyPlatoon2", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1RedArmyPlatoon2", "", [], ""]
                      ]);
    }
   event void Mask()
   {
   ShowGroup(true);
   }

}
 class CWEFM1RedArmyPlatoon3 extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateMovement(false);
    ShowGroup(false);  //
    sendEvent(542.0, getIdentificator(user), "Mask", []);
    sendEvent(552.0, getIdentificator(user), "AttackPosition", []); 
  }

  event void AttackPosition()
  {
   // ShowGroup(true);
    ActivateMovement(true);
    float Speed  = 3.5f;
   SetFormation("CWedgeFormation", 16, false, false);
   Array ApproachPoints = [
                    GetNavPointBehPos("NP_WEFM1RedArmy_A2"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1RedArmyPlatoon3", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1RedArmyPlatoon3", "", [], ""]
                      ]);
    }

   event void Mask()
   {
     ShowGroup(true);
   }
}

 class CWEFM1RedArmyPlatoon4 extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
    ShowGroup(false);  //
    sendEvent(576.0, getIdentificator(user), "Mask", []);
    ActivateMovement(false);
    sendEvent(580.0, getIdentificator(user), "AttackPosition", []); //
  }

  event void AttackPosition()
  {
//   ShowGroup(true);     
   ActivateMovement(true);
   float Speed  = 3.5f;
   SetFormation("CFrontFormation", 16, false, false);
   Array ApproachPoints = [
                    GetNavPointBehPos("NP_WEFM1RedArmy_A2"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A3"),
                    GetNavPointBehPos("NP_WEFM1RedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1RedArmyPlatoon4", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1RedArmyPlatoon4", "", [], ""]
                      ]);
    }

  event void Mask()
   {
   ShowGroup(true);
   }
}
/*
class CWEFM1_Ru_BomberGrp1 extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateMovement(false);
    sendEvent(32.0, getIdentificator(user), "AttackPosition", []); //
  }

  event void AttackPosition()
  {
    ActivateMovement(true);
    float Speed  = 119.9f;
   SetFormation("CWedgeFormation", 66, false, false);
   Array ApproachPoints = [
                    GetNavPointBehPos("NP_Air_1"),
                    GetNavPointBehPos("NP_Air_2")
                    ];

    SetFirstQueueOrders([
                        ["CWEFM1_Ru_BomberGrp1", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["CWEFM1_Ru_BomberGrp1", "", [], ""]
                      ]);
    }

}   

    [
      "Bomber_1",
      "GameObject",
      "CIL2Unit",
      new Matrix(
          0.535064, 0.844812, 0.000000, 4530.491211,
          -0.844812, 0.535064, 0.000000, 17661.625000,
          0.000000, 0.000000, 1.000000, 1926.474121,
          0.000000, 0.000000, 0.000000, 1.000000
        ),
      [
        ["Affiliation", "ENEMY"],
        ["Task", "CBaseAITask"]
      ]
    ],

    [
      "Bomber_2",
      "GameObject",
      "CIL2Unit",
      new Matrix(
          0.535064, 0.844812, 0.000000, 4272.199219,
          -0.844812, 0.535064, 0.000000, 17630.609375,
          0.000000, 0.000000, 1.000000, 1926.474121,
          0.000000, 0.000000, 0.000000, 1.000000
        ),
      [
        ["Affiliation", "ENEMY"],
        ["Task", "CBaseAITask"]
      ]
    ],

    [
      "Bomber_3",
      "GameObject",
      "CIL2Unit",
      new Matrix(
          0.535064, 0.844811, 0.000000, 4736.836426,
          -0.844811, 0.535064, 0.000000, 17858.808594,
          0.000000, 0.000000, 1.000000, 1926.474121,
          0.000000, 0.000000, 0.000000, 1.000000
        ),
      [
        ["Affiliation", "ENEMY"],
        ["Task", "CBaseAITask"]
      ]
    ],

    [
      "CWEFM1_Ru_BomberGrp1",
      "UnitGroup",
      "CWEFM1_Ru_BomberGrp1",
      new Matrix(
          0.535064, 0.844812, 0.000000, 4530.491211,
          -0.844812, 0.535064, 0.000000, 17661.625000,
          0.000000, 0.000000, 1.000000, 1926.474121,
          0.000000, 0.000000, 0.000000, 1.000000
        ),
      [
        ["Units", ["Bomber_1", "Bomber_2", "Bomber_3"]]
      ]
    ],

*/

