//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CWinterM2Mission  extends CSPMission
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------



  String m_LocalTime             = "6:20:00";
  String m_TerrainMapTextureName = "Textures/Winter_CWM1_Map.tex";

  static String m_MissionBriefingPicMaterial = "WinterM2BriefingPic";

  static Array  m_MissionObjectives = [
      [MOTID_Primary,   CWinterM2Mission_Strings::Objective01, MOSID_InProgress, true],
      [MOTID_Primary,   CWinterM2Mission_Strings::Objective02, MOSID_InProgress, true],
      [MOTID_Primary,   CWinterM2Mission_Strings::Objective03, MOSID_InProgress, true],
      [MOTID_Primary,   CWinterM2Mission_Strings::Objective04, MOSID_InProgress, true]
                               ];
static WString ObjectivesText = CWinterM2Mission_Strings::ObjectivesText;
  boolean isDebug  = true;

  boolean MainPlayerStart       = false;
  boolean TIGER_Start           = false;

  boolean Phase1  = false;
  boolean Phase2  = false;
  boolean Phase3  = false;

  Array m_NavpointsForPlayerMap = [
    /*  [
        ["NavPointRedArmy"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
      ], */

      [
        ["Hill_Nr_210"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
      ],

      [
        ["NavPointGerman"],
        CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
        new Color(30.0/256.0, 60.0/256.0, 245.0/256.0)   // NavColor
      ]
                                   ];

  float  CockpitMapMinRange        = 500.0;
  float  CockpitMapMaxRange        = 4000.0;
  float  CockpitMapNavNameMaxRange = 4000.0;
  int    CockpitMapZoomSteps       = 6;
  Vector MarksInitPoint            = new Vector(1600.0, 1600.0, 0.0);
  Array  CockpitMapAccessBox       = [new Vector(2, 2.0, 0.0), new Vector(18000.0, 18000.0, 0.0)];


  final static Array RouterWorkingZones = [
    [-1000.0 , -1000.0, 20000.0, 20000.0]
                                          ];
  final static Array DefaultMask = [["ENEMY", "MainMesh"], []];   //  "ENEMY", "CLASSIFICATOR_DEAD_OBJECT"
  final static Array Mask        = [["ENEMY", "MainMesh"], []];

  Array ArtilleryKillList1 =  ["SovietHidden_GunZis1", "SovietHidden_GunZis2", "SovietHidden_GunZis2_1", "SovietHidden_GunZis2_2", "SovietHidden_GunZis3_1", "SovietHidden_GunZis3_2","SovietHidden_Mortar1", "SovietHidden_Mortar2", "SovietHidden_Mortar3", "SovietHidden_Mortar4", "SovietHidden_Mortar5", "SovietHidden_Mortar6"];
  Array ArtilleryKillList2 =  ["SUPlatoon_01", "SUPlatoon_03", "SUPlatoon_04", "SUPlatoon_05"];
  Array Reserve1KillList   =  ["T34ArmorReserve1", "T34ArmorReserve2", "T34ArmorReserve3", "T34ArmorReserve4", "T34ArmorReserve5"];
  Array T34PlatoonKillList =  ["T34PlatoonA_KVs_01", "T34PlatoonA_KVs_02", "T34PlatoonA_KVs_03",
                               "T34PlatoonA_KVs_04", "T34PlatoonA_KVs_05","T34PlatoonA1_T34_01",
                               "T34PlatoonA1_T34_02","T34PlatoonA1_T34_03", "T34PlatoonA1_T34_04",
                               "T34PlatoonA1_T34_05","T34PlatoonA1_T34_06","T34PlatoonA3_T34_01",
                               "T34PlatoonA3_T34_02","T34PlatoonA3_T34_03", "T34PlatoonA3_T34_04"];

  Array GermanKillList     =  ["A_Tiger_113", "A_Tiger_112", "A_Tiger_111", "A_Tiger_114", "Panzer_Faust_211", "Panzer_Faust_212", "Panzer_Faust_213", "Panzer_Faust_214", "Panzer_Faust_221", "Panzer_Faust_222", "Panzer_Faust_223", "Panzer_Faust_224", "Panzer_Faust_231","SCOUT_HANOMAG251AusfC"];

//    Array GermanKillListCount = new Array(GermanKillList.size(), 0);
//    Array KillListCount = new Array(T34PlatoonKillList.size(), 0);

  void CWinterM2Mission()
  {
    // Construct mission
    CSPMission("CWinterM2Mission", "CWinterM2Content");
     // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CWinterM2Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CWinterM2Atmosphere>());
    SetMissionSky(new #SkyObject<CSky05Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseWinterLowLandForestC1(GetMissionAtmosphere()));    //  CSTBaseWinterForestC1

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadW1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseWinterGrassC1>());

    m_MissionLensFlare =  new #LensFlare<CWinterM2LensFlare>();
    SetMissionWorldMatrices(new #WorldMatrices<CWinterM2WorldMatrices>(),
      [
        [ LAYER_TERRAIN_NAME,         "CWinterM2LandscapeLayer"],
        [ LAYER_TERRAIN_ZONE,         "CWinterM2TerrainZoneLayer"],
        [ LAYER_ROUTER_ZONE,          "CWinterM2RouterZoneLayer" ],
        [ LAYER_MICROTEXTURE_MAP1,    "CWinterM2MicroTextures1"],
        [ LAYER_TERRAIN_WATERHEIGHTS, "CWinterM2WaterHeights"]

      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  
  }
//   void Init()
//   { }
   
   
  void StartMission()
  {
    // call inherited
    CSPMission::StartMission();
  //  sendEvent(60.0, SOID_MissionController, "StartWithTimeOut", []);        
    //sendEvent(1.0, "CWM2_A1_TrooperGroup", "PopDelayedOrder", []);
   // sendEvent(360.0, "CWM2_CUSSRSoldier1Group", "AttackPosition",[]);
   // sendEvent(380.0, "CWM2_CUSSRSoldier2GroupB", "AttackPosition",[]);
    //sendEvent(300.0, "StartAction1",[]); 

  }
 // PUT HERE======================================================================================================== DESTROY BRIDGE

  event void OnMissionDialogEnd(String _DialogID)
  {

  }

  event void StartWithTimeOut()
  {
    if(isDebug)                                       //
      logError("[Ironweed]  StartWithTimeOut");   //

    if (!MainPlayerStart)
      OnEngineStateChanged();
  }    /*    */

  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (_IsWorkEngine && MainPlayerStart)
      PlayerStartMission();
  }

  void PlayerStartMission()
  {
    MainPlayerStart = true;

  }

  event void FailMissionMad()
  {
    FailMission(0.0);
  }

  event void OnObjectDestroyed( String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);
    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
      //logError("Component 'DeadThing' == null");
      return;
    }

    //if(isDebug)
    // logWarning("Object destroyed: " + _ObjectID + " last damaged unit " + new String (DeadThing.GetLastDamager()));

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
      //logWarning("CheckMadPlayer");
      //logWarning("CheckMadPlayer. Affiliation is " + Affiliation);
      //logWarning("CheckMadPlayer. Damager is " + Damager);

      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
        //logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
          //logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"
          if (Penalty_count >= 2)
          {
            //logWarning("MissionKillingByFriendlyFire");
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(10.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }

    if(_ObjectID.IsStartsWith("SovietHidden"))
    {
      int _index = ArtilleryKillList1.find(_ObjectID);

      if (_index != -1)
       ArtilleryKillList1.remove(_index);
      
      if(ArtilleryKillList1.size() <= 0)
      {
        CompleteObjective(0);
        SetObjectiveVisible(0, MOSID_Completed);  //
        
      }
    }
    if(_ObjectID.IsStartsWith("T34PlatoonA"))
    {
      int _index = T34PlatoonKillList.find(_ObjectID);

      if (_index != -1)
        T34PlatoonKillList.remove(_index);

      if(T34PlatoonKillList.size() <= 0)
      {
        CompleteObjective(1);
        SetObjectiveVisible(1, MOSID_Completed);  //
        SendCockpitMessage(CGameMessages::msg_TakeHillOrder210, new Color(1.0, 1.0, 0.0));
      }                   

    }
    if(_ObjectID.IsStartsWith("SUPlatoon"))
    {
      int _index = ArtilleryKillList2.find(_ObjectID);

      if (_index != -1)
        ArtilleryKillList2.remove(_index);

      if(ArtilleryKillList2.size() <= 0)  //
          StartPhase3();                 //

    }
    if(_ObjectID.IsStartsWith("T34ArmorReserve"))
    {
      int _index = Reserve1KillList.find(_ObjectID);

      if (_index != -1)
        Reserve1KillList.remove(_index);

      if(Reserve1KillList.size() <= 0)
      {
        CompleteObjective(2);
        SetObjectiveVisible(2, MOSID_Completed);  //
      }
    }
  }


  // --------------------------------------------------------------------------

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
    
       if (((_NavPointID == "Nav_HillTop_1")) && ((_ObjectID.IsStartsWith("A_Tiger"))))
         {
          //CompleteObjective(3);
          SetObjectiveStatus(3, MOSID_Completed);
         }
       if (((_NavPointID == "Nav_HillTop_1")) && ((_ObjectID == "Panzer")))
         {
         // CompleteObjective(3); 
          SetObjectiveStatus(3, MOSID_Completed);
         }
       if (((_NavPointID == "Nav_HillTop_1")) && ((_ObjectID == "MainPlayerUnit")))
         {
          //CompleteObjective(3);
          SetObjectiveStatus(3, MOSID_Completed);
         }
       if (((_NavPointID == "NavPointRedArmy")) && ((_ObjectID == "MainPlayerUnit")))
         {
           //SetObjectiveStatus(3, MOSID_Completed);      
           sendEvent(0.0, SOID_MissionController, "Shutdown", []);
         }
  }

  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
  // if(_NavPointID == "NavPnt8")
       //Phase2 = true;
  }

  void Shutdown()
  {
    CSPMission::Shutdown();
  }

  event void StartAction1()
  {
    //if(isDebug)
   //logWarning("[Ironweed] StartAction1");

    if(Action1)
      return;
    logWarning("StartAction1");
    fireEvent(0.0, [], "StartAction1",[]);
    Action1 = true;
  }

  event void StartPhase1()
  {
    //if(isDebug)
    // logWarning("[Ironweed] StartPhase1");

    if(Phase1)
      return;

    fireEvent(0.0, [], "StartPhase1",[]);
    Phase1 = true;
  }

  event void StartPhase2()
  {
   // if(isDebug)
    //  logWarning("[Ironweed] StartPhase2");

    if(Phase2)
      return;

    StartPhase1();
    Phase2 = true;

  }

 // sendEvent(0.0, SOID_MissionController, "StartPhase3", []);
  event void StartPhase3()
  {
    //if(isDebug)
      logWarning("[Ironweed] StartPhase3");

    if(Phase3)
      return;

    AwaySappaersOnSee();
    //GetMission().SetObjectiveVisible(2, true);

    Phase3 = true;
  }

    //fireEvent(0.0, [], "AwaySappaersOnHit", []);          
    //fireEvent(0.0, [], "AwaySappaersOnSee", []);        

  event void AwaySappaersOnHit()
  {
    fireEvent(0.0, [], "AwaySappers", []);
    fireEvent(0.0, [], "AwayRepair", []);
  }

  event void AwaySappaersOnSee()
  {
    fireEvent(10.0, [], "AwaySappers", []);
    fireEvent(12.0, [], "AwayRepair", []);
  }
  event void AwaySU_A1Group()
  {
    fireEvent(0.0, [], "SetActiveSU_A1Group", []);
  }

}
