//----------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//
//-----------------------------------------------------------------

//--------------------------------------------------------------------------------
//Make Array KillList with ERT_AGGRESSIVE must attack ignored other units
//--------------------------------------------------------------------------------
class CEFKM4_WingmanTask extends CBaseAITankTask, CWingmanTask
{
   boolean StartWM;
   boolean EndWM;
  void Init()

  {
    CWingmanTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    StartWM = false;
    EndWM   = false;
  }

 event void WMFollow()
  {

    Wingman_SetOrder(0 /*Follow*/, m_LeaderID, "");

    if(!StartWM)
     {
      StartWM = true;
      ActivateFire(true);
      ActivateRadar(true);
      logError(m_LeaderID);
     }

    sendEvent(14.0, getIdentificator(user), "WMRestart", []); //
  }

 event void WMRestart()
  {
    if(!EndWM)
    {
      Wingman_SetOrder(0 /*Follow*/, m_LeaderID, "");
      sendEvent(16.5, getIdentificator(user), "WMFollow", []);
    }
  }

  void OnUnreacheable(Vector _Destination)
  {
    if(!EndWM)
    {
    CancelAllOrders();
    SetEnemyReactionType(ERT_AGGRESSIVE); 
    EndWM = true;
    }
  }

}

class CEFKM4_GerArtilleryTask extends CBaseAITask, CFieldGunTask_G
{ /*
     boolean isActive;


    void Init()
  {
    CBaseAITask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
   // ShowGroup(false);

   sendEvent(41.0,  getIdentificator(user), "SetActiveGroup", []);   //

  }

  event void SetActiveGroup()
  {
    if (!isActive)
    CBaseAITask::Init();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    isActive = true;
   // ShowGroup(true);
    //sendEvent(46.0, getIdentificator(user), "MoveToAttackPosition", []);
  }
}
class CZ4HummelTask extends CBaseAITask, CFieldGunTask_G  // extends    //
{
     boolean isActive;
     boolean First;
     boolean Second;

  void Init()
  {
    CBaseAITask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    First = false;
    Second = true;
    isActive = false;
    sendEvent(42.0, getIdentificator(user), "SetActive", []); //
    sendEvent(240.0,  getIdentificator(user), "MoveToSPPosition", []);
    sendEvent(299.0, getIdentificator(user), "ToggelSP2C", []);

  }

  event void SetActive()
  {
    if (!isActive)
    {
      CBaseAITask::Init();
      ActivateFire(true);
      ActivateRadar(true);
      ActivateMovement(true);
      isActive = true;
    }  
  }

  event void MoveToSPPosition()
  {
    if (!First )
    {
    float Radius = randnum(63.99);
    Vector RandomSAVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationASTVec =  GetNavPointBehPos("NavPoint_SP_1");
    Vector  DestinationASTVec = PreDestinationASTVec + RandomSAVector;
    SetOrder_MoveTo_Direct((DestinationASTVec), 3.0f);
    sendEvent(47.0, getIdentificator(user), "MoveToSPPosition", []); //
   // sendEvent(6.0, getIdentificator(user), "SPPosition", []);
    }
  }

    event void PointVecSP2C()
  {
    if (!Second)
    {
    float Radius = randnum(199.99);
    Vector RandomSTVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationESTVec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationESTVec = PreDestinationESTVec + RandomSTVector;
    SetOrder_MoveTo_Direct((DestinationESTVec), 3.0f);
    sendEvent(53.0, getIdentificator(user), "PointVecSP2C", []); //
    }
 }
   event void ToggelSP2C()
  {
     Second = false;
     First = true;
     sendEvent(1.0, getIdentificator(user), "PointVecSP2C", []);

  }    
 }

class CZ4_DR_SPTask extends CBaseAISAUTask, CBaseAITask //, CFieldGunTask_G
{
     boolean isActive;
     boolean First;
     boolean Second;

  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    First = false;
    Second = true;
    isActive = false;
    sendEvent(40.0, getIdentificator(user), "SetActive", []); //
    sendEvent(220.0,  getIdentificator(user), "MoveToSPAttackPosition", []);
    sendEvent(321.0, getIdentificator(user), "ToggelSP2C", []);  //

  }

  event void SetActive()
  {
    if (!isActive)
     isActive = true;
  }

  event void MoveToSPAttackPosition()
  {
    if (!First )
    {
    float Radius = randnum(63.99);
    Vector RandomSAVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationASTVec =  GetNavPointBehPos("NavPoint_SP_1");
    Vector  DestinationASTVec = PreDestinationASTVec + RandomSAVector;
    SetOrder_MoveTo_Direct((DestinationASTVec), 3.0f);
    sendEvent(88.0, getIdentificator(user), "MoveToSPAttackPosition", []);
   // sendEvent(6.0, getIdentificator(user), "SPPosition", []);
    }
  }
  
  event void FlipFirst()
  {
     if (!First )
      {
         First = true;
      }
     return;
  }   

   void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
     {
       if ( ((_NavPointID == "NavPoint_Tig_G1")) && (_ObjectID.IsStartsWith("CEFKM4_GerArtilleryGrp2_Wespe_")))
       {
         sendEvent(0.0, "CZ4_DR_SPTask", "FlipFirst", []);
       }
     }  

    event void PointVecSP2C()
  {
    if (!Second)
    {
    float Radius = randnum(99.99);
    Vector RandomSTVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationESTVec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationESTVec = PreDestinationESTVec + RandomSTVector;
    SetOrder_MoveTo((DestinationESTVec), 3.0f);
    sendEvent(53.0, getIdentificator(user), "PointVecSP2C", []);
    }
 }
   event void ToggelSP2C()
  {
     Second = false;
     First = true;
     SetEnemyReactionType(ERT_AGGRESSIVE);
     sendEvent(1.0, getIdentificator(user), "PointVecSP2C", []);

  } */
 }     /**/

class CEFKM4_TigerTask1 extends CBaseAISAUTask, CBaseAITask
{

     boolean isActive;
     boolean First;
     boolean Second;
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(52.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(126.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(190.0, getIdentificator(user), "ToggelOn2C", []);
  //  sendEvent(297.0, getIdentificator(user), "ToggelOn2E", []); /**/  
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);

  }

  event void PointVec2A()
  {
    if (!First )
    {
    CBaseAITankTask::Init();

    //SetEnemyReactionType(ERT_AGGRESSIVE);
    float Radius = randnum(160);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_Tig_E1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo((DestinationT1AVec), 3.0f );
    sendEvent(31.0, getIdentificator(user), "PointVec2A", []);
    }
   else if (!Second)
    {
    CBaseAITankTask::Init();
    Vector  DestinationT2BVec =  GetNavPointBehPos("NavPoint_Tig_G1");
    //SetEnemyReactionType(ERT_AGGRESSIVE);
    SetOrder_MoveTo((DestinationT2BVec), 3.0f);
    sendEvent(28.0, getIdentificator(user), "PointVec2A", []);
     }
   else if(!Third)
    {
    CBaseAITankTask::Init();
    float RadiusX = randnum(399.99);
    float VectorY = randnum(199.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(VectorY), 0.0);
    Vector  PreDestinationE1Vec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationE1Vec = PreDestinationE1Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationE1Vec), 3.0f);
    sendEvent(36.0, getIdentificator(user), "PointVec2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}

class CEFKM4Tiger2Task extends CBaseAISAUTask, CBaseAITask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(58.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(129.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(192.0, getIdentificator(user), "ToggelOn2C", []);
//    sendEvent(260.0, getIdentificator(user), "ToggelOn2E", []);  /**/  
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    sendEvent(1.0, getIdentificator(user), "PointVectig2A", []);
  }

  event void PointVectig2A()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_Tig_E1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 3.5f );
    sendEvent(33.0, getIdentificator(user), "PointVectig2A", []);
    }
   else if (!Second)
    {
    CBaseAITankTask::Init();
    Vector  DestinationT2BVec =  GetNavPointBehPos("NavPoint_Tig_G2");
    SetOrder_MoveTo_Direct((DestinationT2BVec), 3.5f);
    sendEvent(34.0, getIdentificator(user), "PointVectig2A", []);
     }
   else if(!Third)
    {
    CBaseAITankTask::Init();
    float RadiusX = randnum(199.99);
    Vector RandomVector = new Vector(rand(RadiusX),0.0, 0.0);
    Vector  PreDestinationE2Vec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationE2Vec = PreDestinationE2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationE2Vec), 3.5f);
    sendEvent(35.0, getIdentificator(user), "PointVectig2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVectig2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVectig2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVectig2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}

class CEFKM4Tank2Task extends CBaseAITask, CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(66.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(319.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(992.0, getIdentificator(user), "ToggelOn2C", []);
 //   sendEvent(1387.0, getIdentificator(user), "ToggelOn2E", []);  /**/  
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }

  event void PointVec2A()
  {
    if (!First )
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_Tig_F1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(21.0, getIdentificator(user), "PointVec2A", []);
    }
   else if (!Second)
    {
    float RadiusX = randnum(99.99);
    float RadiusY = randnum(-66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);      
    Vector  PreDestinationT2BVec =  GetNavPointBehPos("NavPoint_Tig_G2");
    Vector  DestinationT2BVec = PreDestinationT2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT2BVec), 4.0f);
    sendEvent(30.0, getIdentificator(user), "PointVec2A", []);
     }
   else if(!Third)
    {
    float RadiusX = randnum(299.99);
    float RadiusY = randnum(66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);
    Vector  PreDestinationE2Vec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationE2Vec = PreDestinationE2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationE2Vec), 3.5f);
    sendEvent(25.0, getIdentificator(user), "PointVec2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}

class CEFKM4_PanzerTask extends CBaseAITask, CBaseAITankTask //CBaseUnitGroup,  extends CBaseAITankTask
{
     boolean First;
     boolean Second;
     boolean Third;
     boolean Forth;

    void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(41.0,  getIdentificator(user), "MoveToAttackPosition", []);   //
    sendEvent(261.0, getIdentificator(user), "ToggelS2C", []);
    sendEvent(965.0, getIdentificator(user), "ToggelS2D", []);
//    sendEvent(307.0, getIdentificator(user), "ToggelS2E", []);    /**/    
  }

  event void MoveToAttackPosition()
  {
    if (!First )
    {
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    float Radius = randnum(123.99);
    Vector RandomSAVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationASTVec =  GetNavPointBehPos("NavPoint_Tig_E1");
    Vector  DestinationASTVec = PreDestinationASTVec + RandomSAVector;
    SetOrder_MoveTo_Direct((DestinationASTVec), 4.0f);
    sendEvent(30.0, getIdentificator(user), "MoveToAttackPosition", []);
    }
  }
  event void PointVecS2C()
  {
    if (!Second)
    {
    float Radius = randnum(123.99);
    Vector RandomSAVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationS2CVec =  GetNavPointBehPos("NavPoint_Tig_G1");
    Vector  DestinationS2CVec = PreDestinationS2CVec + RandomSAVector;
    SetOrder_MoveTo_Direct((DestinationS2CVec), 4.0f);
    sendEvent(26.0, getIdentificator(user), "PointVecS2C", []);

    }
  }
   event void PointVec2D()
  {
    if (!Third)
    {
    float Radius = randnum(399.99);
    Vector RandomSTVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationESTVec =  GetNavPointBehPos("NavPoint_Tig_Pokrovka");
    Vector  DestinationESTVec = PreDestinationESTVec + RandomSTVector;
    SetOrder_MoveTo_Direct((DestinationESTVec), 3.5f);
    sendEvent(37.0, getIdentificator(user), "PointVec2E", []);
    }
 }
   event void ToggelS2C()
  {
     Second = false;
     First = true;
     Third = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVecS2C", []);

  }    

   event void ToggelS2D()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2D", []);
  }

    event void ToggelS2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2E", []);
  }
 }



class CEFKM4_RedArmy1Task extends CBaseAITankTask, CBaseAITask
{
     boolean isActive;


    void Init()
  {
    CBaseAITankTask::Init(); //
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;

   sendEvent(71.0,  getIdentificator(user), "SetActiveGroup", []);   //
    /**/
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    isActive = true;
    //sendEvent(46.0, getIdentificator(user), "MoveToAttackPosition", []);
  }
}

class CZ4RedArmySPTask extends CBaseAISAUTask, CBaseAITask//, CFieldGunTask_R    
{
   boolean isActive;

  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    sendEvent(42.0, getIdentificator(user), "SetActiveGroup", []); //
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    isActive = true;
  }
}
class CZ4RedArmyInfTask extends CBaseAITask //, CFieldGunTask_G
{
   boolean isActive;

  void Init()
  {
    isActive = false;
    sendEvent(42.0, getIdentificator(user), "SetActiveGroup", []); //
  }

  event void SetActiveGroup()
  {
    if (!isActive)
     isActive = true;
  }
}

class CZ4RedGunTask extends CBaseAITask, CFieldGunTask_R    //extends
{
   boolean isActive;

  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
    sendEvent(64.0, getIdentificator(user), "SetActiveGroup", []); //
  }

  event void SetActiveGroup()
  {
    if (!isActive)
   //    CFieldGunTask_R::Init();         //
    ActivateFire(true);
    ActivateRadar(true);
    isActive = true;
  }
}

class CZ4RedMortarTask extends CBaseAITask, CFieldGunTask_R    //extends
{
   boolean isActive;

  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
    sendEvent(68.0, getIdentificator(user), "SetActiveGroup", []); //
  }

  event void SetActiveGroup()
  {
    if (!isActive)
   //    CFieldGunTask_R::Init();         //
    ActivateFire(true);
    ActivateRadar(true);
    isActive = true;
  }
}
/*
class CZ4KatushaGrp1 extends CBaseUnitGroup
{


  void Init()
  {
    ActivateFire(false);
    ActivateRadar(false);
    sendEvent(630.0, getIdentificator(user), "SetActiveKatushaGroup", []);  //
  }

  event void SetActiveKatushaGroup()
  {   
   //CReFillBM13Task_R::Init();   
    ActivateFire(true);
    ActivateRadar(true);  //

  }

}   */