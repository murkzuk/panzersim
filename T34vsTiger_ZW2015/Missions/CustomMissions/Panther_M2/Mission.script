//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CC5M2Mission extends CSPMission
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------
  String m_LocalTime             = "14:20:00";
  String m_TerrainMapTextureName = "Missions/CustomMissions/Panther_M2/c5m2_Map.tex";

  static String m_MissionBriefingPicMaterial = "C5M2BriefingPic";

  static Array m_MissionObjectives = [
                                       [MOTID_Primary,   CC5M2Mission_Strings::Objective01, MOSID_InProgress, true],
                                       [MOTID_Primary,   CC5M2Mission_Strings::Objective02, MOSID_InProgress, true]//,
                                      // [MOTID_Primary,   CC5M2Mission_Strings::Objective03, MOSID_InProgress, true]

                                     ];

  static WString ObjectivesText = CC5M2Mission_Strings::ObjectivesText;

  boolean isDebug = true;
  boolean isRadarUpdateDebug = true;
  boolean MainPlayerStartEgine = false;

  Array m_NavpointsForPlayerMap = [
                                     [
                                      ["Vil_7_NavPointVis"],
                                      CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                      new Color(30.0/256.0, 60.0/256.0, 245.0/256.0)   // NavColor
                                      ]/*,

                                     [
                                      ["NavPointBer"],
                                      CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                      new Color(244.0/256.0, 10.0/256.0, 10.0/256.0)   // NavColor
                                      ],
                                      [
                                       ["NavPointHQ_1"],
                                       CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                       new Color(30.0/256.0, 60.0/256.0, 245.0/256.0)   // NavColor
                                      ]  */
                                    ];

  float  CockpitMapMinRange        = 500.0;
  float  CockpitMapMaxRange        = 3000.0;
  float  CockpitMapNavNameMaxRange = 2000.0;
  int    CockpitMapZoomSteps       = 4;
  Vector MarksInitPoint            = new Vector(1000.0, 1000.0, 0.0);
  //Array  CockpitMapAccessBox       = [new Vector(2399, 1608.0, 0.0), new Vector(6890.0, 6099.0, 0.0)];
  Array  CockpitMapAccessBox       = [new Vector(2399, 1632.0, 0.0), new Vector(12000.0, 12000.0, 0.0)];

  final static Array RouterWorkingZones = [
                                           [40000.0 , 40000.0, 60000.0, 60000.0]
                                          ];

  Array KillList_Primary1   = ["CC5M2RusGroup1_Tank1", "CC5M2RusGroup1_Tank2", "CC5M2RusGroup1_Tank3", "CC5M2RusGroup1_Tank4", "CC5M2RusGroup1_Tank5", "CC5M2RusGroup2_Tank1", "CC5M2RusGroup2_Tank2", "CC5M2RusGroup2_Tank3", "CC5M2RusGroup2_Tank4", "CC5M2RusGroup2_Tank5"];
  Array KillList_Primary2   = ["CC5M2RusGroup3_Tank1", "CC5M2RusGroup3_Tank2", "CC5M2RusGroup3_Tank3", "CC5M2RusGroup3_Tank4", "CC5M2RusGroup3_Tank5","CC5M2RusGroup4_Tank1", "CC5M2RusGroup4_Tank2", "CC5M2RusGroup4_Tank3", "CC5M2RusGroup4_Tank4", "CC5M2RusGroup4_Tank5", "CC5M2RusGroup4_Tank6", "CC5M2RusGroup4_Tank7", "CC5M2RusGroup4_Tank8"];
//  Array KillList_Secondary1 = [];


  boolean KP1_Destroy = false;


  int Penalty_count = 0;

  void CC5M2Mission()
  {
    // Construct mission
    CSPMission("CC5M2Mission", "CC5M2Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CC5M2Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CC5M2Atmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

    SetMissionWorldMatrices(new #WorldMatrices<CC5M2WorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME, "CC5M2LandscapeLayer"      ],
        [LAYER_TERRAIN_ZONE, "CC5M2TerrainZoneLayer"    ],
        [LAYER_ROUTER_ZONE,  "CC5M2RouterZoneLayer"     ],
        [LAYER_MICROTEXTURE_MAP1, "CC5M2MicroTextures1" ],
        //["Landing Zone Texture",  "CM6LZTexture"      ],
        [LAYER_TERRAIN_WATERHEIGHTS, "CC5M2WaterHeights"]
      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited
    CSPMission::StartMission();
  //  sendEvent(0.0, "CC5M2GerGroup1", "StartGermanPanzer1", []);


    sendEvent(140.0, "CC5M2RusGroup1", "StartAttack", []);
    //Component console = new #GameController().GetObject(SOID_Console);
    //console.disablebeh();
    //console.showbehinf(true);
  }

  event void OnMissionDialogEnd(String _DialogID)
  {
  }

//  fireEvent(0.0, [], "OnEngineStateChanged", [true]);    
  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (_IsWorkEngine && !MainPlayerStartEgine)
    {
      MainPlayerStartEgine = true;
    }
  }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
  }

  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
    // logWarning("Object: " + _ObjectID + " leave NavPoint: " +  _NavPointID);
  }

  event void FailMissionMad()
  {
    FailMission(0.0);
  }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);

    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
   //   logError("Component 'DeadThing' == null");
      return;
    }
    // TMP

//    logWarning("Object destroyed: " + _ObjectID + ", last damaged by unit: " + new String (DeadThing.GetLastDamager()));

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
 //     logWarning("CheckMadPlayer");
 //     logWarning("CheckMadPlayer. Affiliation is " + Affiliation);
 //     logWarning("CheckMadPlayer. Damager is " + Damager);

      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
 //       logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
 //         logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"
          if (Penalty_count >= 2)
          {
 //           logWarning("MissionKillingByFriendlyFire");
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(11.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }

    int IndexPr1  = KillList_Primary1.find(_ObjectID);
    int IndexPr2  = KillList_Primary2.find(_ObjectID);
    //int IndexSec1 = KillList_Secondary1.find(_ObjectID);



    if(IndexPr1 != -1)
       KillList_Primary1.remove(IndexPr1);
    if(IndexPr2 != -1)
      KillList_Primary2.remove(IndexPr2);
    //if(IndexSec1 != -1)
      //KillList_Secondary1.remove(IndexSec1);

    if(KillList_Primary1.size() <= 0 && !KP1_Destroy) //  
      SetObjectiveStatus(0, MOSID_Completed);
    if(KillList_Primary2.size() <= 1 && !KP1_Destroy)   //
      SetObjectiveStatus(1, MOSID_Completed);
    //if(KillList_Secondary1.size() <= 1 && !KS1_Destroy)     //
      //SetObjectiveStatus(2, MOSID_Completed);
  }

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }

  void ShutdownWatcher(String _Watcher)
  {
    Component watcher =  GetObject(_Watcher);
    if(watcher == null)
    {
   //   logError("Watcher with name=" + _Watcher + "  doees not exist!");
      return;
    }
    watcher.SetEventHandler(null);
    watcher = null;
  }

  void Shutdown()
  {
    CSPMission::Shutdown();
  }

  float Distance(String _BetweenID_1, String _BetweenID_2)
  {
    float m_CurrentDistance;
    Component Between_1 = new #GameController().GetObject(_BetweenID_1);
    Component Between_2 = new #GameController().GetObject(_BetweenID_2);

    if (null == Between_1 && null == Between_2)
    {
   //   logError("Component - null!");
      return;
    }

    Vector m_Pos_1 = getPosition(Between_1).origin;
    Vector m_Pos_2 = getPosition(Between_2).origin;

    m_CurrentDistance = (m_Pos_1 - m_Pos_2).Magnitude();

    //logWarning("[Distance] Unit`s " + _BetweenID_1 + " and " + _BetweenID_2 + " distance = " + new String(m_CurrentDistance));
    return m_CurrentDistance;
  }
}
