//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CC5M1Mission extends CSPMission
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------
  String m_LocalTime             = "14:20:00";
  String m_TerrainMapTextureName = "Textures/c1m6_Map.tex";

  static String m_MissionBriefingPicMaterial = "C5M1BriefingPic";

  static Array m_MissionObjectives = [
                                       [MOTID_Primary,   CC5M1Mission_Strings::Objective01, MOSID_InProgress, true],
                                       [MOTID_Primary,   CC5M1Mission_Strings::Objective02, MOSID_InProgress, true],
                                       [MOTID_Primary,   CC5M1Mission_Strings::Objective03, MOSID_InProgress, true]

                                     ];

  static WString ObjectivesText = CC5M1Mission_Strings::ObjectivesText;

  boolean isDebug = true;
  boolean isRadarUpdateDebug = true;

  boolean StartFightStug = false;
  boolean StartFightPak1 = false;
  boolean StartFightPak2 = false;
  boolean StartPhaseTwo = false;
  boolean StartRussianAttackDzot = false;

  boolean MainPlayerStartEgine = false;

  Array m_NavpointsForPlayerMap = [
                                    [
                                      ["NavPointVis"],
                                      CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                      new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
                                      ],

                                     [
                                      ["NavPointBer"],
                                      CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                      new Color(244.0/256.0, 10.0/120.0, 10.0/120.0)   // NavColor
                                      ],
                                      [
                                       ["NavPointGerHQ"],
                                       CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags
                                       new Color(30.0/256.0, 60.0/256.0, 245.0/256.0)   // NavColor
                                      ]
                                    ];

  float  CockpitMapMinRange        = 800.0;
  float  CockpitMapMaxRange        = 1600.0;
  float  CockpitMapNavNameMaxRange = 2000.0;
  int    CockpitMapZoomSteps       = 4;
  Vector MarksInitPoint            = new Vector(1000.0, 1000.0, 0.0);
  //Array  CockpitMapAccessBox       = [new Vector(2399, 1608.0, 0.0), new Vector(6890.0, 6099.0, 0.0)];
  Array  CockpitMapAccessBox       = [new Vector(2399, 1632.0, 0.0), new Vector(9000.0, 9000.0, 0.0)];

  final static Array RouterWorkingZones = [
                                            [40000.0 , 40000.0, 60000.0, 60000.0]
                                          ];

  Component CC5M1PRussianPanzer;
  Component CC5M1PRussianPanzerPak1;
  Component CC5M1PRussianPanzerPak2;

  Array KillList_Primary1   = ["Russian_TankGroup2_76_8","Russian_TankGroup2_76_9", "Russian_TankGroup2_76_ten", "Russian_TankGroup2_76_12", "Russian_TankGroup2_76_13", "Russian_TankGroup2_76_14","Russian_TankGroup2_76_15"];
  Array KillList_Primary2   = ["SovietTank_T34_85_1","SovietTank_T34_85_2", "SovietTank_T34_85_3", "SovietTank_T34_85_4","Russian_TankGroup2_76_1", "Russian_TankGroup2_76_2", "Russian_TankGroup2_76_3", "Russian_TankGroup2_76_4", "Russian_TankGroup2_76_5", "Russian_TankGroup2_76_6", "Russian_TankGroup2_76_7"];
  Array KillList_Secondary1 = ["Russian_TankGroup1_85_1", "Russian_TankGroup1_85_2", "Russian_TankGroup1_85_3", "Russian_TankGroup1_76_1", "Russian_TankGroup1_76_2", "Russian_TankGroup1_76_3"];
  Array KillList_forContinueAttack76 = ["German_TankGroup_T4_1"];
  Array KillList_forContinueAttack85 = ["German_Sau_1"];

  boolean KP1_Destroy = false;
  boolean KP2_Destroy = false;
  boolean KS1_Destroy = false;
  boolean KL_for76 = false;
  boolean KL_for85 = false;

  int Penalty_count = 0;

  void CC5M1Mission()
  {
    // Construct mission
    CSPMission("CC5M1Mission", "CC5M1Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CC5M1Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CC5M1Atmosphere>());
    SetMissionSky(new #SkyObject<CSky06Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

    SetMissionWorldMatrices(new #WorldMatrices<CC5M1WorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME, "CC5M1LandscapeLayer"      ],
        [LAYER_TERRAIN_ZONE, "CC5M1TerrainZoneLayer"    ],
        [LAYER_ROUTER_ZONE,  "CC5M1RouterZoneLayer"     ],
        [LAYER_MICROTEXTURE_MAP1, "CC5M1MicroTextures1" ],
        //["Landing Zone Texture",  "CM6LZTexture"      ],
        [LAYER_TERRAIN_WATERHEIGHTS, "CC5M1WaterHeights"]
      ]);

    SetRouterPrecalculatedGraph(
      new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited
    CSPMission::StartMission();
    sendEvent(20.0, "CC5M1GerGroup1_T4Tank", "StartGermanPanzer1", []);
    CC5M1PRussianPanzer = new CC5M1PRussianPanzer();
    CC5M1PRussianPanzer.Initialize(this, "CC5M1PRussianPanzer");

    CC5M1PRussianPanzerPak1 = new CC5M1PRussianPanzerPak1();
    CC5M1PRussianPanzerPak1.Initialize(this, "CC5M1PRussianPanzerPak1");

    CC5M1PRussianPanzerPak2 = new CC5M1PRussianPanzerPak2();
    CC5M1PRussianPanzerPak2.Initialize(this, "CC5M1PRussianPanzerPak2");
    sendEvent(30.0, "CC5M1RusGroup1_76Tank", "StartAttack", []);

    //GetObject("AmmoTruck").UnregisterPhysicsController();
    
    //Component console = new #GameController().GetObject(SOID_Console);
    //console.disablebeh();
    //console.showbehinf(true);
  }

  event void OnMissionDialogEnd(String _DialogID)
  {
  }

//  fireEvent(0.0, [], "OnEngineStateChanged", [true]);    
  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (_IsWorkEngine && !MainPlayerStartEgine)
    {
      sendEvent(0.0,  "CC5M1MPUGroupTank",   "SetActive", []);
      sendEvent(0.0, "CC5M1GermanPantherGroupTank", "StartGermanPanther", []);
      fireEvent(0.0, [], "StartRussianGroups", []);
      MainPlayerStartEgine = true;
    }
  }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {
  }

  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
    // logWarning("Object: " + _ObjectID + " leave NavPoint: " +  _NavPointID);
  }

  event void FailMissionMad()
  {
    FailMission(0.0);
  }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);

    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
   //   logError("Component 'DeadThing' == null");
      return;
    }
    // TMP

//    logWarning("Object destroyed: " + _ObjectID + ", last damaged by unit: " + new String (DeadThing.GetLastDamager()));

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
 //     logWarning("CheckMadPlayer");
 //     logWarning("CheckMadPlayer. Affiliation is " + Affiliation);
 //     logWarning("CheckMadPlayer. Damager is " + Damager);

      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
 //       logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
 //         logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"
          if (Penalty_count >= 2)
          {
 //           logWarning("MissionKillingByFriendlyFire");
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(11.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }

    int IndexPr1  = KillList_Primary1.find(_ObjectID);
    int IndexPr2  = KillList_Primary2.find(_ObjectID);
    int IndexSec1 = KillList_Secondary1.find(_ObjectID);



    if(IndexPr1 != -1)
      {
        KillList_Primary1.remove(IndexPr1);

      }

    if(IndexPr2 != -1)
      KillList_Primary2.remove(IndexPr2);
    if(IndexSec1 != -1)
      KillList_Secondary1.remove(IndexSec1);

    //logWarning("------ KillList_Primary1 = " + new String(KillList_Primary1));
    //logWarning("------ KillList_Primary2 = " + new String(KillList_Primary2));
    //logWarning("------ KillList_Secondary1 = " + new String(KillList_Secondary1));

    if(KillList_Primary1.size() == 0) //  && !KP1_Destroy
    {
      SetObjectiveStatus(0, MOSID_Completed);
      KP1_Destroy = true;
      sendEvent(2.0, "CC5M1RusGroup1_76Tank", "ContinueAttack", []); //

    }
    if(KillList_Primary2.size() == 0)   // && !KP2_Destroy
    {
    //  SetObjectiveVisible(2, true);
      SetObjectiveStatus(1, MOSID_Completed);
      KP2_Destroy = true;


  //    logWarning("KillList_Primary2 = " + new String(KillList_Primary2));

      if(StartRussianAttackDzot)
      {

      }
    }
    if(KillList_Secondary1.size() == 0) //  && !KS1_Destroy
    {
      SetObjectiveStatus(2, MOSID_Completed);
      KS1_Destroy = true;
  //    logWarning("KillList_Secondary1 = " + new String(KillList_Secondary1));
    }

    int Index = KillList_forContinueAttack76.find(_ObjectID);
    if(Index != -1)
     {
    //   logWarning("KillList_forContinueAttack76Index = " + new String(Index));
       KillList_forContinueAttack76.remove(Index);
     }

    if((KillList_forContinueAttack76.size() == 0) && (!KL_for76))
    {
      KL_for76 = true;
    }

    Index = KillList_forContinueAttack85.find(_ObjectID);
    if(Index != -1)
      KillList_forContinueAttack85.remove(Index);

    if((KillList_forContinueAttack85.size() == 0) && (!KL_for85))
    {
      sendEvent(10.0, "CC5M1GerGroup1_T4Tank", "StartGermanPanzer1", []); //
      KL_for85 = true;
    }

  }

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }

  void ShutdownWatcher(String _Watcher)
  {
    Component watcher =  GetObject(_Watcher);
    if(watcher == null)
    {
   //   logError("Watcher with name=" + _Watcher + "  doees not exist!");
      return;
    }
    watcher.SetEventHandler(null);
    watcher = null;
  }

  void Shutdown()
  {
    CSPMission::Shutdown();
  }

  float Distance(String _BetweenID_1, String _BetweenID_2)
  {
    float m_CurrentDistance;
    Component Between_1 = new #GameController().GetObject(_BetweenID_1);
    Component Between_2 = new #GameController().GetObject(_BetweenID_2);

    if (null == Between_1 && null == Between_2)
    {
   //   logError("Component - null!");
      return;
    }

    Vector m_Pos_1 = getPosition(Between_1).origin;
    Vector m_Pos_2 = getPosition(Between_2).origin;

    m_CurrentDistance = (m_Pos_1 - m_Pos_2).Magnitude();

    //logWarning("[Distance] Unit`s " + _BetweenID_1 + " and " + _BetweenID_2 + " distance = " + new String(m_CurrentDistance));
    return m_CurrentDistance;
  }

  event void StartFightStug()
  {
    if(StartFightStug)
      return;

    StartFightStug = true;
  }
  event void StartFightPak1()
  {
    if(StartFightPak1)
      return;

//    if(isDebug)
//      logWarning("StartFightPak1");

    sendEvent(10.0,  "CC5M1GerGroup_Pak1",   "SetActive", []);
    StartFightPak1 = true;
  }

  event void StartFightPak2()
  {
    if(StartFightPak2)
      return;

  //  if(isDebug)
  //    logWarning("StartFightPak2");


    StartFightPak2 = true;
  }
  event void StartRussianAttackDzot()
  {
    if(StartRussianAttackDzot)
     return;

//    if(isDebug)
//      logWarning("StartRussianAttackDzot");

    sendEvent(0.0, "CC5M1RusSoldierGroup", "StartAttackRussianSoldier", []);
    sendEvent(10.0, "CC5M1GerSoldierGroup", "StartAttackGermanSoldier", []);

    StartRussianAttackDzot = true;
  }
  event void StartPhaseTwo()
  {
    if(StartPhaseTwo)
     return;

 //   if(isDebug)
 //     logWarning("[Mission_StartPhaseTwo]StartPhaseTwo");

    StartPhaseTwo = true;
  }

  /*

  event void StartPhaseTwo()
  {
    if(StartPhaseTwo)
      return;

  //$TODO
    //sendEvent(0.0, "CC5M1RusGroup2_76Tank", "StartFrontAttackVyso4ani", []);
    //sendEvent(0.0, "CC5M1RusSoldierGroup", "StartAttackVyso4ani", []);
    //sendEvent(0.0, "CC5M1GerSoldierGroup", "StartAttackRussianSoldier", []);

    StartPhaseTwo = true;
  }
   */
}
