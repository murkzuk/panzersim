
//
//-------------------------------------------------------------------
// ==============  TIGER TASK
class C502M1_WingmanTask extends CWingmanTask,CBaseAITankTask
{
   boolean StartWM;

  void Init()

  {
    CWingmanTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    StartWM = false;
    sendEvent(20.0, getIdentificator(user), "WMFollow", []);
  }

 event void WMFollow()
  {

    Wingman_SetOrder(0 /*Follow*/, m_LeaderID, "");

    sendEvent(336.0, getIdentificator(user), "WMRestart", []);
  }

 event void WMRestart()
  {
   Wingman_SetOrder(0 /*Follow*/, m_LeaderID, "");
   
    if(!StartWM)
     {
     GetMission().SendCockpitMessage(L"Kommander: FIRE FRI!", new Color(1.0, 0.31, 0.0));
      ActivateFire(true);
      ActivateRadar(true);
      logError(m_LeaderID);
     // m_WingmanRank = 1;
      StartWM = true;
     }
   sendEvent(56.0, getIdentificator(user), "WMRestart", []);
  }
}
class C502M1_TigerGroup extends BaseUnitGroup
{
}
class C502M1_TigerGroupTask extends CBaseAITankTask
{
  boolean isActive;

  void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent( 20.0, getIdentificator(user), "StartPatrol", []);
    sendEvent(316.0, getIdentificator(user), "SetFireActiveGroup", []);

  }

  event void StartPatrol()
  {
    //PopDelayedOrder();
    ActivateMovement(true);
    sendEvent(1.0, getIdentificator(user), "MovetoFrontlines", []);
  }

  event void SetFireActiveGroup()
  {
    if (!isActive)
    {
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    
    }
  }
  event void MovetoFrontlines()
   {
    Vector  DestinationVec =  GetNavPointBehPos("NAV_Tiger_1");
    SetOrder_MoveTo_Direct((DestinationVec), 3.2f );
    sendEvent(45.0, getIdentificator(user), "MovetoFrontlines", []);
   }

}

class C502_M1_RedArmyTankTask extends CBaseAITask, CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;

  void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = false;
    Third = true;
    Forth = true;
    sendEvent(20.0, getIdentificator(user), "SetObserved", []);
    sendEvent(760.0, getIdentificator(user), "ToggelOn2B", []); // //
//    sendEvent(992.0, getIdentificator(user), "ToggelOn2C", []);
 //   sendEvent(1387.0, getIdentificator(user), "ToggelOn2E", []);  /**/
  }
  event void SetObserved()
  {
  GetMission().SendCockpitMessage(L"RADIO, Soviet Tanks Spotted!", new Color(1.0, 0.5, 0.0));
  ShowUnit(false);
  sendEvent(250.0, getIdentificator(user), "SetActiveGroup", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    {
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    ShowUnit(true);//
    sendEvent(1.0, getIdentificator(user), "SovietObjective", []);
    }
  }

  event void SovietObjective()
  {

    if (!Second)
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NAV_SovietObjective_1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.5f );

      while (!First )
     {
      GetMission().SendCockpitMessage(L"RADIO, Soviet Tanks ATTACKING!", new Color(1.0, 0.13, 0.0));
     // SetEnemyReactionType(ERT_AGGRESSIVE);
      First = true;
      sendEvent(1.0, getIdentificator(user), "SovietObjective", []);
     }
     sendEvent(66.0, getIdentificator(user), "SovietObjective", []);
    
    }

     if(!Third)
    {
    float Radius = randnum(99.99);

    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationT2BVec =  GetNavPointBehPos("NAV_Soviet_Home_01");
    Vector  DestinationT2BVec = PreDestinationT2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT2BVec), 6.0f);
     while (!Forth)
     {
      //CancelAllOrders(); //
      SetEnemyReactionType(ERT_FRIGID); //
      Forth = true;
      sendEvent(1.0, getIdentificator(user), "SovietObjective", []);
     }
    sendEvent(35.0, getIdentificator(user), "SovietObjective", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = true;
   // First = true;
    Third = false;
    GetMission().SendCockpitMessage(L"Kommander, enemy is retreating!", new Color(1.0, 0.6, 0.0));
    sendEvent(1.0, getIdentificator(user), "SovietObjective", []);
  }
  event void ToggelOn2C()
  {

    Second = true;
   // First = true;
    Third = false;
    sendEvent(1.0, getIdentificator(user), "SovietObjective", []);
  }
 event void EndAssaultMove()
  {

  ActivateMovement(false);

  }
}

class C502_M1RedArmyMen_Task extends CBaseMilitaryTask, CBaseAITask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseMilitaryTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = false;
    Third = true;
    Forth = true;
    sendEvent(23.0, getIdentificator(user), "SetSoldiersObserved", []);
    sendEvent(720.0, getIdentificator(user), "ToggelRetreat2B", []);

  }
  event void SetSoldiersObserved()
  {
  ShowUnit(false);
  sendEvent(180.0, getIdentificator(user), "SetSoldiersActive", []); // 280
  }

  event void SetSoldiersActive()
  {
    if (!isActive)
    {
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    ShowUnit(true);//
    sendEvent(1.0, getIdentificator(user), "SetSoldiersObjective", []);
    }
  }
  event void SetSoldiersObjective()
  {

    if (!Second)
    {
    float Radius = randnum(79.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NAV_SovietObjective_1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 3.5f );

      while (!First )
     {
     // SetEnemyReactionType(ERT_AGGRESSIVE);
      First = true;
      sendEvent(1.0, getIdentificator(user), "SetSoldiersObjective", []);
     }
     sendEvent(66.0, getIdentificator(user), "SetSoldiersObjective", []);
    
    }

     if(!Third)
    {
    float Radius = randnum(-66.66);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationT2BVec =  GetNavPointBehPos("NAV_Soviet_Home_01");
    Vector  DestinationT2BVec = PreDestinationT2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT2BVec), 4.0f);
     while (!Forth)
     {
      //CancelAllOrders(); //
      SetEnemyReactionType(ERT_FRIGID); //
      Forth = true;
      sendEvent(1.0, getIdentificator(user), "SetSoldiersObjective", []);
     }
    sendEvent(48.0, getIdentificator(user), "SetSoldiersObjective", []);
   }
 }
  event void ToggelRetreat2B()
  {

    Second = true;
   // First = true;
    Third = false;
    sendEvent(1.0, getIdentificator(user), "SetSoldiersObjective", []);
  }

}
/*

 class C502_M1_TankArmyGrp extends CBaseUnitGroup
{

}

class C502_M1T34ReserveGrp extends CBaseUnitGroup
{

    void Init ()
   {
    CBaseUnitGroup::Init();
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
   // sendEvent(30.0, getIdentificator(user), "MaskTanks", []);                    //
   // sendEvent(90.0, getIdentificator(user), "UnMask", []);
    sendEvent(182.0, getIdentificator(user), "PlatoonAttackPosition", []);

   }

   event void PlatoonAttackPosition()
   {
    CBaseAITankTask::Init();
    ActivateFire(true);
    ActivateRadar(true);
    PopOnStoppedOrder();
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 4.00;
    float CollisionRadius = 12.0;
    SetFormation("CWideWedgeFormation", 42, false, false); //

     Array ApproachPoints = [
                    GetNavPointBehPos("NavPointRedArmy"),
                    GetNavPointBehPos("Nav_C502_M1Reserve1"), //
                    GetNavPointBehPos("Nav_C502_M1Reserve3"),
                    GetNavPointBehPos("Nav_C502_M1Reserve4")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1T34ReserveGrp", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1T34ReserveGrp", "", [], ""]
                     ]);
}
    event void MaskTanks()
   {
    ShowGroup(false);
   }
  
    event void UnMask()
   {
    ShowGroup(true);

   }

}
class C502_M1BTR_Task extends CBaseAIBtrTask
{


     // void Init()

    void Init ()
   {
    CBaseUnitGroup::Init();
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
    sendEvent(40.0, getIdentificator(user), "PlatoonAttackPosition", []);
   }
   event void PlatoonAttackPosition()
  {
    ActivateFire(true);
    ActivateRadar(true);
    CBaseAIBtrTask::Init();
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 4.00;
    float CollisionRadius = 12.0;          
     Array ApproachPoints = [
                    //GetNavPointBehPos("NPRedArmy_A1"),
                    GetNavPointBehPos("NavPointRedArmy"),
                    GetNavPointBehPos("NPRedArmy_A2"),
                    GetNavPointBehPos("NPRedArmy_A3")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1BTR_Task", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1BTR_Task", "", [], ""]
                      ]);
}


}
class C502_M1T34PlatoonA1_Grp1 extends CBaseUnitGroup
{


}

class C502_M1T34PlatoonA1Task extends CBaseAITask, CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(56.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(180.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(292.0, getIdentificator(user), "ToggelOn2C", []);
 //   sendEvent(1387.0, getIdentificator(user), "ToggelOn2E", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetRadarDetailedFriends(true); //
    SetRadarDetectFriends(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }

  event void PointVec2A()
  {
    if (!First )
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NPRedArmy_A1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(20.0, getIdentificator(user), "PointVec2A", []);
    }
   else if (!Second)
    {
    float RadiusX = randnum(99.99);
    float RadiusY = randnum(-66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);      
    Vector  PreDestinationT2BVec =  GetNavPointBehPos("NPRedArmy_A3");
    Vector  DestinationT2BVec = PreDestinationT2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT2BVec), 4.0f);
    sendEvent(30.0, getIdentificator(user), "PointVec2A", []);
     }
   else if(!Third)
    {
    float RadiusX = randnum(299.99);
    float RadiusY = randnum(66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);
    Vector  PreDestinationE2Vec =  GetNavPointBehPos("NPRedArmy_A4");
    Vector  DestinationE2Vec = PreDestinationE2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationE2Vec), 3.0f);
    sendEvent(25.0, getIdentificator(user), "PointVec2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}
// ==============  SU TASK
class C502_M1_SU122SP_Task extends CBaseAISAUTask, CBaseAITask
{
  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(33.0, getIdentificator(user), "SetActiveSP", []);
  }

  event void SetActiveSP()
  {
    CBaseAISAUTask::Init();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);

  }                 //
}
class C502_M1_SU_A1Task extends CBaseAISAUTask, CBaseAITask
{
     boolean SetActiveSU;
     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;

  void Init()
  {
    CBaseAISAUTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(60.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(136.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(292.0, getIdentificator(user), "ToggelOn2C", []);
 //   sendEvent(1387.0, getIdentificator(user), "ToggelOn2E", []);
  }

  event void SetActiveSU_A1Group()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
   // SetEnemyReactionType(ERT_AGGRESSIVE); 
    sendEvent(4.0, getIdentificator(user), "PointVec2A", []);
  }

  void OnHitByEnemy(String _EnemyID)
  {
    if (!SetActiveSU)
    {
      GetMission().AwaySU_A1Group();
      SetActiveSU = true;
      SetEnemyReactionType(ERT_AGGRESSIVE);
    }
  }

  void OnEnemyTargeted(Component _UnitAlerted)
  {
    if (!isActive)
    {
      GetMission().AwaySU_A1Group();
      isActive = true;
    }
  }
  event void PointVec2A()
  {
    if (!First )
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationSU2Vec =  GetNavPointBehPos("NPRedArmy_A1");
    Vector  DestinationSU1AVec = PreDestinationSU2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationSU1AVec), 4.0f );
    sendEvent(23.0, getIdentificator(user), "PointVec2A", []);
    }
   else if (!Second)
    {
    float RadiusX = randnum(99.99);
    float RadiusY = randnum(-66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);      
    Vector  PreDestinationSU2BVec =  GetNavPointBehPos("NPRedArmy_A3");
    Vector  DestinationSU2BVec = PreDestinationSU2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationSU2BVec), 4.0f);
    sendEvent(34.0, getIdentificator(user), "PointVec2A", []);
     }
   else if(!Third)
    {
    float RadiusX = randnum(66.99);
    float RadiusY = randnum(66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);
    Vector  PreDestinationSU3Vec =  GetNavPointBehPos("NPRedArmy_A4");
    Vector  DestinationSU3Vec = PreDestinationE2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationSU3Vec), 3.5f);
    sendEvent(31.0, getIdentificator(user), "PointVec2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}


class C502_M1_SU122_Grp extends CBaseUnitGroup
{

}

class C502_M1_SU122_B2Grp extends CBaseUnitGroup
{

}
class C502_M1T34Platoon3 extends CBaseUnitGroup
{

    void Init ()
   {
    CBaseUnitGroup::Init();
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
    sendEvent(61.0, getIdentificator(user), "PlatoonAttackPosition", []); //
   }
   event void PlatoonAttackPosition()
  {
    CBaseAITankTask::Init();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
   // SetFormation("CWideWedgeFormation", 32, false, false);
    float Speed  = 4.0;
    float CollisionRadius = 12.0;
     Array ApproachPoints = [
                    GetNavPointBehPos("NavPointRedArmy"),
                    GetNavPointBehPos("NPRedArmy_A2"),
                    GetNavPointBehPos("NPRedArmy_A3")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1T34Platoon3", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1T34Platoon3", "", [], ""]
                      ]);

   }
}

class C502_M1StaticGunsTask extends CFieldGunTask_G
{

}
class C502_M1BaseZisTask extends CFieldGunTask_R
{

}

/////////////////////////////////////////////////////////////////////

class CWEFM4Pnz_ResupplyTask extends CVeeFormationTask    //  CBaseUnitGroup  ,
{
  void Init()
  {
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
    sendEvent(120.0, getIdentificator(user), "SupplyMainPlayer", []); //
  }
 event void SupplyMainPlayer()
 {
    CVeeFormationTask::Init();
    ActivateRadar(true);
    ActivateFire(true);
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float CollisionRadius = 12.0;
 }
}

class CWEFM4Tiger_TroopersGrp1 extends CBaseUnitGroup //
{
  void Init()
  {
    CBaseUnitGroup::Init();//
    ActivateRadar(false);
    ActivateMovement(false);
    ActivateFire(false);
    sendEvent(55.0, getIdentificator(user), "AttachMainPlayer", []); //
  }

 event void AttachMainPlayer()
 {
    PopDelayedOrder();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);   //

 }
}
class C502_M1PanzerA1_Task extends CBaseAITask, CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second; 
     boolean Third;
     boolean Forth;
     
  void Init()
  {
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;
    First = false;
    Second = true;
    Third = true;
    Forth = true;
    sendEvent(46.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(100.0, getIdentificator(user), "ToggelOn2B", []);
    sendEvent(292.0, getIdentificator(user), "ToggelOn2C", []);
 //   sendEvent(1387.0, getIdentificator(user), "ToggelOn2E", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    SetRadarDetailedFriends(true); //
    SetRadarDetectFriends(true);
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }

  event void PointVec2A()
  {
    if (!First )
    {
    float Radius = randnum(99.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_C502_M1Patrol_1");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(20.0, getIdentificator(user), "PointVec2A", []);
    }
   else if (!Second)
    {
    float RadiusX = randnum(99.99);
    float RadiusY = randnum(-66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);      
    Vector  PreDestinationT2BVec =  GetNavPointBehPos("NavPoint_C502_M1Patrol_2");
    Vector  DestinationT2BVec = PreDestinationT2BVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT2BVec), 4.0f);
    sendEvent(30.0, getIdentificator(user), "PointVec2A", []);
     }
   else if(!Third)
    {
    float RadiusX = randnum(299.99);
    float RadiusY = randnum(66.66);
    Vector RandomVector = new Vector(rand(RadiusX), rand(RadiusY), 0.0);
    Vector  PreDestinationE2Vec =  GetNavPointBehPos("Hill_Nr_210");
    Vector  DestinationE2Vec = PreDestinationE2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationE2Vec), 3.0f);
    sendEvent(25.0, getIdentificator(user), "PointVec2A", []);
   }
 }
  event void ToggelOn2B()
  {

    Second = false;
    First = true;
    Third = true;
    Forth = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
   event void ToggelOn2C()
  {
     Third = false;
     First = true;
     Second = true;
     Forth = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
  }
    event void ToggelOn2E()
  {
     Forth = false;
     First = true;
     Second = true;
     Third = true;
     sendEvent(1.0, getIdentificator(user), "PointVec2A", []);
 }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}
class C502_M1Panzer_FaustGrp extends CBaseUnitGroup     //this is the flanking panzers
{

}

class C502_M1Panzer_Faust2ndGrp extends CBaseUnitGroup
{
        boolean Attack2ndGrp; //
        boolean isActive;

  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateRadar(false);
    ActivateFire(false);
    ActivateMovement(false);
    isActive = false;
    Attack2ndGrp  = false;
    sendEvent(48.0, getIdentificator(user), "SetActiveGroup", []);  //
    sendEvent(188.0, getIdentificator(user), "Attck2Position", []);
  }
  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    PopDelayedOrder();
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    sendEvent(1.0, getIdentificator(user), "Faust2Position", []);
  }

  event void Faust2Position()
  {
    if(!Attack2ndGrp)
     {
        Vector  DestinationT1AVec = GetNavPointBehPos("NavPoint_C502_M1Patrol_1") ;  //
        SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
        sendEvent(25.0, getIdentificator(user), "Faust2Position", []);
     }
  }

  event void Attck2Position()
  {
     Attack2ndGrp = true;
     SetEnemyReactionType(ERT_AGGRESSIVE);
     float CollisionRadius = 12.0;
     float Speed = 4.0f;
     SetFormation("CWideWedgeFormation", 38, true, false);
     Array PatrolPoints = [
                    GetNavPointBehPos("NavPoint_C502_M1Patrol_2"),
                    GetNavPointBehPos("NavPoint_PZ6_Attack_AT_2")

                    ];

    SetFirstQueueOrders([
                        ["C502_M1Panzer_Faust2ndGrp", "SetOrder_MoveToEx", [PatrolPoints, Speed], ""],
                        ["C502_M1Panzer_Faust2ndGrp", "", [], ""]
                      ]);
       //  sendEvent(0.0, getIdentificator(user), "ExtendQueue", []);


 }
}

//===============  Player platoon




class C502_M1Panzer_Faust3Grp extends CBaseUnitGroup          //this is the flanking tigers
{

}
// ========================================================================TigerGrp2

class C502_M1_TIGERGrpTwo extends CBaseUnitGroup
{

}

class C502_M1Sappers_Group  extends CBaseUnitGroup
{
  boolean SapperAlarm = false;

  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateFire", [false]);
    ForEachUnitTask("ActivateMovement", [false]);
    SetEnemyReactionType(ERT_PASSIVE);
  }

  event void AwaySappers()
  {
    ForEachUnitTask("ActivateMovement", [true]);
    PopDelayedOrder();
    SetEnemyReactionType(ERT_FRIGID);
    SetFormation("CWedgeFormation", 12, true, true);
    //if(GetMission().isDebug)
    //  logWarning("SAPPERS AWAY!");
  }

  void OnEnemyTargeted(Component _UnitAlerted)
  {
    GetMission().AwaySappaersOnSee();
  }
}

class C502_M1RepairZis_Group  extends CBaseUnitGroup
{
  boolean SapperAlarm = false;

  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateFire", [false]);
    ForEachUnitTask("ActivateMovement", [false]);
    SetFormation("Column", 12, true, true);
    SetEnemyReactionType(ERT_PASSIVE);

   }

  event void AwayRepair()
  {
    ForEachUnitTask("ActivateRadar", [true]);
    ForEachUnitTask("ActivateMovement", [true]);
    PopDelayedOrder();
    SetEnemyReactionType(ERT_FRIGID);
    SetFormation("Column", 12, true, true);

    //if(GetMission().isDebug)
    //  logWarning("REPAIR TEAM AWAY!");
  }

  void OnEnemyTargeted(Component _UnitAlerted)
  {
    GetMission().AwaySappaersOnSee();
  }
}

class C502_M1TaskSappers  extends CBaseAITask
{
 event void OnExplosion(
    float     _Damage,               // - force impact wave (not of used)
    Matrix    _Position,             //  - source of the wave
    float     _Radius,               // - radius of explosion (not used)
    String    _OwnerID,              // - ID of [unit], which in the essence applied [povrezhdeni]
    category  _DamageType,           // - the type of damage  - the type of projectile which fell
    int       _SubstanceId,          // - material into which burn Array
    Array     _ExtraAttribs,         // - additional parameters
    float     _BulletDamageModifier, // - coefficient of damage transmitted by the projectile
    Component _DamageJoint
              )
  {
    if (!m_Group.SapperAlarm)
    {
      //if(GetMission().isDebug)
      //  logError(" OnExplosion - for Sappers team");

      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
  }

  void OnHitByEnemy(String _EnemyID)
  {
    if (!m_Group.SapperAlarm)
    {
      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
  }
}

class C502_M1TaskRepairZiS  extends CBaseAITask
{
 event void OnExplosion(
    float     _Damage,               // - force impact wave (not of used)
    Matrix    _Position,             //  - source of the wave
    float     _Radius,               // - radius of explosion (not used)
    String    _OwnerID,              // - ID of [unit], which in the essence applied [povrezhdeni]
    category  _DamageType,           // - the type of damage  - the type of projectile which fell
    int       _SubstanceId,          // - material into which burn Array
    Array     _ExtraAttribs,         // - additional parameters
    float     _BulletDamageModifier, // - coefficient of damage transmitted by the projectile
    Component _DamageJoint
                        )
  {
    if (!m_Group.SapperAlarm)
    {
      //if(GetMission().isDebug)
      //  logError(" OnExplosion - for Repair team");

      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
     }
   }

  void OnHitByEnemy(String _EnemyID)
  {
    if (!m_Group.SapperAlarm)
    {
      GetMission().AwaySappaersOnHit();
      m_Group.SapperAlarm = true;
    }
  }
}  */
/*
 class C502_M1_A1_TrooperTask extends CBaseAITask
{ 
  void Init()
  {
    CBaseUnitGroup::Init();
  //  sendEvent(30.0, getIdentificator(user), "AttackPosition", []);
  }

  event void AttackPosition()
  {
   ActivateRadar(false);
   ActivateMovement(true);
//   SetEnemyReactionType(ERT_AGGRESSIVE); 
   float Speed  = 2.5f;
   SetFormation("CNarrowWedgeFormation", 16, true, true);
   Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_PZ6_MoveToBegin_1"),     //
                    GetNavPointBehPos("NavPoint_PZ6_MoveToBegin_2"),
                    GetNavPointBehPos("NavPoint_PZ6_Attack_AT"),
                    GetNavPointBehPos("NavPoint_PZ6_Attack_AT_")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1_A1_TrooperTask", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1_A1_TrooperTask", "SetOrder_Patrol", [], ""]
                      ]);
   }
}  
 class C502_M1_A1_TrooperGroup extends CBaseUnitGroup
{

}
 class C502_M1_UssrSoldierTask extends CBaseAITask
{

}
 class C502_M1_CUSSRSoldier1Group extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
    //ActivateMovement(false);
   // sendEvent(20.0, getIdentificator(user), "AttackPosition", []);
  }

  event void AttackPosition()
  {
//    PopDelayedOrder();
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    float Speed  = 2.5f;
   SetFormation("CFrontFormation", 14, true, false);
   Array ApproachPoints = [
                    GetNavPointBehPos("NPRedArmy_A2"),
                    GetNavPointBehPos("NPRedArmy_A3"),
                    GetNavPointBehPos("NPRedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1_CUSSRSoldier1Group", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1_CUSSRSoldier1Group", "", [], ""]
                      ]);
    }
}
 class C502_M1_CUSSRSoldier2GroupB extends CBaseUnitGroup
 {
  void Init()
  {
    CBaseUnitGroup::Init();
  //  ActivateMovement(false);
   // sendEvent(20.0, getIdentificator(user), "AttackPosition", []);
  }

  event void AttackPosition()
  {
//    PopDelayedOrder();
    ActivateMovement(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);        //
    float Speed  = 2.5f;
    SetFormation("CFrontFormation", 16, true, false);
    Array ApproachPoints = [
                    GetNavPointBehPos("NPRedArmy_A2"),
                    GetNavPointBehPos("NPRedArmy_A3"),
                    GetNavPointBehPos("NPRedArmy_A4")
                    ];

    SetFirstQueueOrders([
                        ["C502_M1_CUSSRSoldier2GroupB", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                        ["C502_M1_CUSSRSoldier2GroupB", "", [], ""]
                      ]);
    }
}

class C502_M1Pnz_ResupplyGrp extends CBaseUnitGroup    //    CVeeFormationTask,
{

}

class C502_M1PzTroopersTask //extends CVee1FormationTask, CVee2FormationTask, CVee3FormationTask,
//CVee4FormationTask, CVee5FormationTask, CVee6FormationTask    //
{

} */