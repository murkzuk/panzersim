//-----------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-----------------------------------------------------------------
/*  */
class CC2M3TankClassProcessingTask extends CBaseAITankTask, CC1M3Split

{
  void OnUnreacheable(Vector _Destination)
  {
    if (m_Group != null)
      m_Group.PushOrder();

    Component me = GetMission().GetObject(getIdentificator(user));
     if (me == null)
      logError("Component 'me' == null!!!");

      Array ApproachPoints = SplitPath(getPosition(me).origin, _Destination);

      SetFirstQueueOrders([
       ["OnUnreacheable", "SetOrder_MoveToEx", [ApproachPoints, m_Group.m_CurrentOrder.m_MovingSpeed], ""],
       ["OnUnreacheable", "EndOnUnreacheable", [], ""]
                        ]);

  }

  void EndOnUnreacheable()
  {
    if (GetMission().isDebug)
      logWarning("EndOnUnreacheable");

    if (m_Group != null)
      m_Group.PopOrder();
  }
}     

class CC2M3Broken
{
  Array BrokenPath(float _stepX, float _stepY, Vector _begin , Vector _end)
  {
    Array _ResultArray;
    int  _counter = 0;

    if (_stepX == 0)
      _stepX = (_begin - _end).Magnitude()/10;

    if (_stepY == 0)
      _stepY = (_begin - _end).Magnitude()/10;

    if (_begin == _end)
    {
      //logError("Vectors _begin == _end");
      return null;
    }

    float y = _stepY;
    for (float x = _stepX/2 ; x<(_begin - _end).Magnitude(); x+=_stepX)
    {
      _counter++;
      if (_counter > 11)
        break;

      Vector dir = (_end - _begin);
      dir.Normalize();
      Vector Res = _begin + dir*rand(x-10.0, x+10.0) + new Vector(dir.y, dir.x, 0.0f)*rand(0.0, y);
      y = -y;

      _ResultArray.add(Res);
    }

    _ResultArray.add(_end);

    return  _ResultArray;
  }
}

class CBaseRussianTask extends CBaseAITankTask  //CC2M3Broken,
{ 

}
//-----------------------------------------------------------------
class CC2M3RussianTankTask extends CBaseAITankTask   //, CBaseRussianTask
{
}

class C2M3RussianTank76Group2 extends CBaseUnitGroup
 {

/*  void Init()
  {
    CBaseUnitGroup::Init();
    SetEnemyReactionType(ERT_FRIGID);
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    sendEvent(62, getIdentificator(user), "RussianAttackG2", []);
    sendEvent(102.0, getIdentificator(user), "Fireaway", []);
  }

  event void RussianAttackG2()
  {
    CBaseUnitGroup::Init();
    PopDelayedOrder();
    float Speed = 4.0f;
    ActivateMovement(true);
    SetFormation("CWedgeFormation", 40.0, false, false);
    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_1"),
                    GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_2"),
                    GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_3")
                           ];

    SetFirstQueueOrders([
      ["C2M3RussianTank76Group2", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
      ["C2M3RussianTank76Group2", "", [], ""]
                        ]);
   
  }
  event void Fireaway()
  {
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
  }  */

 }
class C2M3RuTankGrp2_Task extends CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second;

  void Init()
  { 
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
    First = false;
    Second = true;
    sendEvent(63.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(120.0, getIdentificator(user), "ToggelOn", []);
    sendEvent(380.0, getIdentificator(user), "PointVec2D", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2B", []);
   
  }
   

  event void PointVec2B()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    ActivateMovement(true);
    float Radius = randnum(299.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_1");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(24.0, getIdentificator(user), "PointVec2B", []);
    }
    return;

  }
  event void PointVec2C()
  {
    if (!Second)
    {
    CBaseAITankTask::Init();
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_2");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(30.0, getIdentificator(user), "PointVec2C", []);

    }
    return;
  }

   event void PointVec2D()
  {
    CBaseAITankTask::Init();
    Second = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationEndVec =  GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_3");
    Vector  DestinationT1DVec = PreDestinationEndVec + RandomVector;
    SetOrder_MoveTo((DestinationT1DVec), 3.5f );
    sendEvent(52.0, getIdentificator(user), "PointVec2D", []);

   }

  event void ToggelOn()
  {
   if(!First)
   {
     First = true;
     Second = false;
     sendEvent(0.0, getIdentificator(user), "PointVec2C", []);

   }
  }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}
//-----------------------------------------------------------------


//-----------------------------------------------------------------
class CC2M3RussianBTRTask extends CBaseAIBtrTask//, CBaseRussianTask
{
}

//-----------------------------------------------------------------
class CC2M3RussianSUTask extends CBaseAISAUTask//, CBaseRussianTask
{

     boolean isActive;
     boolean First;
     boolean Second;

  void Init()
  { 
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
    First = false;
    Second = true;
    sendEvent(60.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(110.0, getIdentificator(user), "ToggelOn", []);
    sendEvent(380.0, getIdentificator(user), "PointVec2D", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2B", []);
   
  }
   

  event void PointVec2B()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    ActivateMovement(true);
    float Radius = randnum(299.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_RussianSu_Attack1_1");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(24.0, getIdentificator(user), "PointVec2B", []);
    }
    return;

  }
  event void PointVec2C()
  {
    if (!Second)
    {
    CBaseAITankTask::Init();
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_RussianSu_Attack1_2");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.5f );
    sendEvent(30.0, getIdentificator(user), "PointVec2C", []);

    }
    return;
  }

   event void PointVec2D()
  {
    CBaseAITankTask::Init();
    Second = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationEndVec =  GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_3");
    Vector  DestinationT1DVec = PreDestinationEndVec + RandomVector;
    SetOrder_MoveTo((DestinationT1DVec), 3.5f );
    sendEvent(52.0, getIdentificator(user), "PointVec2D", []);

   }

  event void ToggelOn()
  {
   if(!First)
   {
     First = true;
     Second = false;
     sendEvent(0.0, getIdentificator(user), "PointVec2C", []);

   }
  }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}

//-----------------------------------------------------------------
// RUSSIAN GROUP
//-----------------------------------------------------------------
class C2M3RussianSUGroup extends CBaseUnitGroup
{
 /*
  void Init()
  {

    CBaseUnitGroup::Init();
    ActivateMovement(false);
    ActivateRadar(false);
    ActivateFire(false);
    SetEnemyReactionType(ERT_FRIGID);
    sendEvent(68.0, getIdentificator(user), "StartSu", []);
    sendEvent(118.0, getIdentificator(user), "Fireaway", []);
  }

  event void StartSu()
  {
    CBaseUnitGroup::Init();
    PopDelayedOrder();
    SetFormation("CWedgeFormation", 40.0, false, false);
    ActivateMovement(true);
    float Speed  = 4.0;


    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_RussianSu_Attack1_1"),
                    GetNavPointBehPos("NavPoint_RussianSu_Attack1_2")
                           ];
    SetFirstQueueOrders([
                          ["C2M3RussianSUGroup", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
                          ["C2M3RussianSUGroup", "", [], ""]
                        ]);
  }

  event void Fireaway()
  {
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
  }

  event void OnUnitDestroyed(String _UnitID)
  {
    CBaseUnitGroup::OnUnitDestroyed(_UnitID);

//    if(GetMission().isDebug)
//      logWarning("{Ironweed} Destroy russian SU ID = "+ _UnitID);

    RefreshUnitsList();
  } */
}

//-----------------------------------------------------------------
class C2M3RussianTankFlangGroup extends CBaseUnitGroup
{
   boolean CombatBegin  = false;

    void Init()
  {
    CBaseUnitGroup::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    SetEnemyReactionType(ERT_FRIGID); //
   sendEvent(72.0, getIdentificator(user), "RussianAttackFlangTank", []);
  }                                                           // tweaked from 3.5 11-11-08
             
  event void RussianAttackFlangTank()                          // tweaked from 3.5 11-11-08
  {
    CBaseUnitGroup::Init();
    PopDelayedOrder();
    float Speed = 4.0f;
    ActivateMovement(true);
    SetFormation("CWedgeFormation", 30, true, false);
    CombatBegin  = true;
    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_RussianTankGroupFlang_Attack_1_1"),
                    GetNavPointBehPos("NavPoint_RussianTankGroupFlang_Attack_1_2")
                             ];

    SetFirstQueueOrders([
      ["RussianAttackFlangTank", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
      ["RussianAttackFlangTank", "", [], ""]
                        ]);

  }

    event void GroupCombatBegin()
  {
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
  }

  void OnUnitHitByEnemy(String _UnitID, String _EnemyID)
  {
//    if(GetMission().isDebug)
//      logWarning("[C2M3RussianTankFlangGroup] OnUnitHitByEnemy  unit ID = " + _UnitID + " enemy ID = " + _EnemyID );

    Component Owner = GetMission().GetObject(_EnemyID);
    if (!CombatBegin) //  && checkMask(Owner, ["FRIEND"], [])
    {
      ForEachUnitTask("ActivateMovement", [true]);
      sendEvent(0.0, getIdentificator(this), "GroupCombatBegin", []);
    }
    return;
  }

}
class C2M3RuTankGrp1_Task extends CBaseAITankTask
{

     boolean isActive;
     boolean First;
     boolean Second;

  void Init()
  { 
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
    First = false;
    Second = true;
    sendEvent(83.0, getIdentificator(user), "SetActiveGroup", []);
    sendEvent(118.0, getIdentificator(user), "ToggelOn", []);
    sendEvent(395.0, getIdentificator(user), "PointVec2D", []);
  }

  event void SetActiveGroup()
  {
    if (!isActive)
    isActive = true;
    sendEvent(1.0, getIdentificator(user), "PointVec2B", []);
   
  }
   

  event void PointVec2B()
  {
    if (!First )
    {
    CBaseAITankTask::Init();
    ActivateMovement(true);
    float Radius = randnum(299.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestination2BVec =  GetNavPointBehPos("NavPoint_Russian76_1_Attack1");
    Vector  Destination2BVec = PreDestination2BVec + RandomVector;
    SetOrder_MoveTo_Direct((Destination2BVec), 3.8f );
    sendEvent(24.0, getIdentificator(user), "PointVec2B", []);
    }
    return;

  }
  event void PointVec2C()
  {
    if (!Second)
    {
    CBaseAITankTask::Init();
    SetEnemyReactionType(ERT_AGGRESSIVE); //
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationA2Vec =  GetNavPointBehPos("NavPoint_Russian76_1_Attack2");
    Vector  DestinationT1AVec = PreDestinationA2Vec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationT1AVec), 4.0f );
    sendEvent(30.0, getIdentificator(user), "PointVec2C", []);

    }
    return;
  }

   event void PointVec2D()
  {
    CBaseAITankTask::Init();
    Second = true;
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationEndVec =  GetNavPointBehPos("NavPoint_RussianTankGroup2_Attack_3");
    Vector  DestinationT1DVec = PreDestinationEndVec + RandomVector;
    SetOrder_MoveTo((DestinationT1DVec), 3.5f );
    sendEvent(52.0, getIdentificator(user), "PointVec2D", []);

   }

  event void ToggelOn()
  {
   if(!First)
   {
     First = true;
     Second = false;
     sendEvent(0.0, getIdentificator(user), "PointVec2C", []);

   }
  }
 event void EndAssault()
  {

  ActivateMovement(false);

  }
}
//-----------------------------------------------------------------
class C2M3RussianTank76Group1 extends CBaseUnitGroup
{

}

//----------------------------------------------------------------- 



class C2M3RussianTank76GroupB extends CBaseUnitGroup   //, CC2M3Broken
{
  boolean CombatBegin  = false;
  float Speed = 4.5f;
  void Init()
  {
    CBaseUnitGroup::Init();
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    SetEnemyReactionType(ERT_FRIGID);
    sendEvent(80.0, getIdentificator(user), "RussianTankB", []);
  }

  event void RussianTankB()
  {
    CBaseUnitGroup::Init();
    PopDelayedOrder();
    ActivateMovement(true);
    CombatBegin  = true;
    SetFormation("CWedgeFormation", 40.0, true, false);
    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_RussianTankGroupB_Attack_1"),
                    GetNavPointBehPos("NavPoint_RussianTankGroupB_Attack_2")
                           ];
    SetFirstQueueOrders([
      ["C2M3RussianTank76GroupB", "SetOrder_MoveToEx", [ApproachPoints, Speed], ""],
      ["C2M3RussianTank76GroupB", "", [], ""]
                        ]); 
                        
  }
    event void GroupCombatBegin()
  {
    ActivateRadar(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
  }

  void OnUnitHitByEnemy(String _UnitID, String _EnemyID)
  {
    Component Owner = GetMission().GetObject(_EnemyID);
    if (!CombatBegin) //  && checkMask(Owner, ["FRIEND"], [])
    {
      ForEachUnitTask("ActivateMovement", [true]);
      sendEvent(0.0, getIdentificator(this), "GroupCombatBegin", []);
    }
    return;
  }
}

class C2M3RuTankGrpC_Task extends CBaseAITankTask
{

     boolean isActive;

  void Init()

  {
   // ShowUnit(false);
    CBaseAITankTask::Init();
    ActivateFire(false);
    ActivateRadar(false);
    isActive = false;
   // sendEvent(1400.0, getIdentificator(user), "ShowEnemytank", []); //
    sendEvent(30.0, getIdentificator(user), "SetActiveGroup", []);  //
  }
  event void SetActiveGroup()
  {
    if (!isActive)
  //  ShowUnit(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    ActivateRadar(true);
    isActive = true;
   sendEvent(0.0, getIdentificator(user), "PointVecEnemy", []);
  }

  event void ShowEnemytank()
  {
    ShowUnit(true);
  }

  event void PointVecEnemy()
  {
    ActivateMovement(true);
    float Radius = randnum(199.99);
    Vector RandomVector = new Vector(rand(Radius), rand(Radius), 0.0);
    Vector  PreDestinationVec =  GetNavPointBehPos("NavPoint_RussianGroupC_2");
    Vector  DestinationEVec = PreDestinationVec + RandomVector;
    SetOrder_MoveTo_Direct((DestinationEVec), 4.0f );
    sendEvent(50.0, getIdentificator(user), "PointVecEnemy", []);
  }
}
class C2M3RussianTank76GroupC extends CBaseUnitGroup   //, CC2M3Broken
{

}
//-----------------------------------------------------------------

class C2M3RussianBTRGroup extends CBaseUnitGroup, CC2M3Broken
{
  float BTRAttackSpeed = 7.0f;                                                                     // tweaked from 3.5 11-11-08
  Vector direction;
  boolean MoveToSplitAttack = false;
  //sendEvent(0.0, "C2M3RussianBTRGroup", "RussianBTR_Attack", []);                                                                                 // tweaked from 3.5 11-11-08
  event void RussianBTR_Attack()
  {
    if (MoveToSplitAttack)
        return;
    MoveToSplitAttack = true;
    ForEachUnitTask("ActivateBehavior", [true]);
    sendEvent(0.0, "C2M3GermanPak40_C", "ActivatePak40_C", []);

    Array ApproachPoints =  BrokenPath(70, 70, getPosition(user).origin, GetNavPointBehPos("NavPoint_RussianBTR_Attack"));
    direction = (getPosition(user).origin - GetNavPointBehPos("NavPoint_RussianBTR_Attack"));
    direction.Normalize();
    SetOrderName("RussianBTRAttack");
    SetFirstQueueOrders([
      ["RussianBTRAttack", "SetOrder_MoveToEx", [ApproachPoints, BTRAttackSpeed], ""],
      ["RussianBTRAttack", "EndAttack", [], ""]
                        ]);
  }

  void OnStopped(Component _UnitTask)
  {
    if(MoveToSplitAttack)
    {
      if(m_CurrentOrder.m_Order == "RussianBTRAttack" || m_CurrentOrder.m_Order == "Maneuver")
      {
        CancelAllOrders();
        clearEventsForObject(getIdentificator(user));
        if (m_GroupTargets.isEmpty())
          sendEvent(rand(0.0, 3.0), getIdentificator(user), "ContinueMove", []);
        else
          sendEvent(rand(5.0, 7.0), getIdentificator(user), "ContinueMove", []);
      }
      else
        CBaseUnitGroup::OnStopped(_UnitTask);
    }
    else
      CBaseUnitGroup::OnStopped(_UnitTask);
  }

  event void ContinueMove()
  {
    Vector m_Pos_1 = getPosition(user).origin;
    Vector m_Pos_2 = GetNavPointBehPos("NavPoint_RussianBTR_Attack");
    float m_CurrentDistance = (m_Pos_1 - m_Pos_2).Magnitude();

    Array ApproachPoints =  BrokenPath(60, 60, m_Pos_2 + direction * m_CurrentDistance, GetNavPointBehPos("NavPoint_RussianBTR_Attack"));
    //logError("ApproachPoints = " + new String(ApproachPoints));

    if (m_CurrentOrder.m_Formation != "")
       m_CurrentOrder.m_FormationDistance = rand(10.0, m_CurrentOrder.m_FormationDistance);

    SetOrderName("RussianBTRAttack");
    SetFirstQueueOrders([
      ["RussianBTRAttack", "SetOrder_MoveToEx", [ApproachPoints, BTRAttackSpeed], ""],
      ["RussianBTRAttack", "EndAttack", [], ""]
                        ]);
    if(ApproachPoints.size() == 1)
    {
      clearEventsForObject(getIdentificator(user));
      MoveToSplitAttack = false;
      EndAttack();
    }
  }


  void EndAttack()
  {
//    if(GetMission().isDebug)
//      logWarning("[Ironweed]  Russian BTR Attack.");

    m_EnemyReactionType == ERT_AGGRESSIVE;
    //SetOrder_MoveTo(GetNavPointBehPos("NavPoint_RussianTankGroupFlang_Attack_3"), TankAttackSpeed, true);
  }
}

//-----------------------------------------------------------------
// GERMAN SP_Tank
//-----------------------------------------------------------------
class C2M3GermanT4WachtTask extends CBaseAITankTask
{
  void Init()
  {
    CBaseAITankTask::Init();

    ActivateRadar(true);
    ActivateFire(true);
  }
}
//-----------------------------------------------------------------
// GERMAN GROUPS
//-----------------------------------------------------------------
class C2M3GermanTankT4Group1 extends CBaseUnitGroup
{


  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateBehavior", [true]);

  }

  event void GermanAttackT4Group1Tank()
  {
    TankAttackSpeed = 5.0f;
    CBaseUnitGroup::Init();
    ActivateBehavior(true);
    ActivateFire(true);
    ActivateRadar(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);

    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_German_T4Group1_1"),
                    GetNavPointBehPos("NavPoint_German_T4Group1_2"),
                    GetNavPointBehPos("NavPoint_German_T4Group1_3")
                           ];


    SetFirstQueueOrders([
      ["C2M3GermanTankT4Group1", "SetOrder_MoveToEx", [ApproachPoints, TankAttackSpeed], ""],
      ["C2M3GermanTankT4Group1", "", [], ""]
                        ]);
  }

}

//-----------------------------------------------------------------
class C2M3GermanTankT4Group2 extends CBaseUnitGroup
{

  void Init()
  {
    CBaseUnitGroup::Init();
    ForEachUnitTask("ActivateBehavior", [true]);
  }

  event void GermanAttackT4Group2Tank()
  {
    TankAttackSpeed = 5.0f;
    CBaseUnitGroup::Init();
    ActivateBehavior(true);
    ActivateFire(true);
    ActivateRadar(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);

    Array ApproachPoints = [
                    GetNavPointBehPos("NavPoint_German_T4Group2_1"),
                    GetNavPointBehPos("NavPoint_German_T4Group2_2"),
                    GetNavPointBehPos("NavPoint_German_T4Group2_3")
                           ];

    SetFirstQueueOrders([
      ["GermanAttackTankGroup2", "SetOrder_MoveToEx", [ApproachPoints, TankAttackSpeed], ""],
      ["GermanAttackTankGroup2", "", [], ""]
                        ]);
  }

}

//-----------------------------------------------------------------
class C2M3GermanTigerGroup extends CBaseUnitGroup
{
      void Init()
  {
    CBaseUnitGroup::Init();
    ActivateBehavior(true);
    ActivateFire(true);
    SetEnemyReactionType(ERT_AGGRESSIVE);
    ActivateRadar(true); 
  
   }
}

//-----------------------------------------------------------------
class CC2M3Pak40CTask extends CBaseAITask
{
 
  void Init()
  {
    CBaseAITask::Init();
    ActivateBehavior(true);

  }
}


//GermanInfantry-----------------------------------------------------------------
class C2M3GermanSoldierGroup extends CBaseUnitGroup
{
  void Init()
  {
    CBaseUnitGroup::Init();
   // SetImmortalMode(true);
  }
                                                                                                                                        // tweaked from 3.5 11-11-08
  //sendEvent(0.0, "C2M3GermanSoldierGroup", "KillGroup", []);
  //sendEvent(0.0, "C2M3GermanSoldierGroup", "enableGroup", []);
  event void enableGroup()
  {
    ForEachUnitTask("ActivateBehavior", [true]);
  }

  event void KillGroup()
  {
    for(int i = 0; i < m_Units.size(); i++)
    {
      Component unit = GetMission().GetObject(m_Units[i]);
      if (unit != null)
       if(unit.GetObject("Behavior") != null)
          unit.SetImmortalMode(false);;
    }
  }
}
//class C2M3RussianSoldierGroup extends CBaseUnitGroup
//{
//}
// Russian Soldiers----------------------------------------------------------------------
class C2M3RussianSoldierGroup extends CBaseUnitGroup
{
  float m_SpeedAttack = 3.5f;

  event void C2M3RusSoldiersAttack()
  {

     Array ApproachPoints = [
                   GetNavPointBehPos("NavPoint_C2M3RusSoldierAttack_1"),
                   GetNavPointBehPos("NavPoint_C2M3RusSoldierAttack_2"),
                   GetNavPointBehPos("NavPoint_C2M3RusSoldierAttack_3")
                           ];
    SetFormation("CFrontFormation", 30.0, true, false);
    SetFirstQueueOrders([
      ["C2M3RussianSoldierGroup", "SetOrder_MoveToEx", [ApproachPoints, m_SpeedAttack], ""],
      ["C2M3RussianSoldierGroup", "", [], ""]
                        ]);
  }
}
class CC2M3_PnzTask extends CBaseAITankTask, CBaseAITask
{
     boolean isActive;


    void Init()
  {
    CBaseAITankTask::Init(); //
    ActivateFire(false);
    ActivateRadar(false);
    ActivateMovement(false);
    isActive = false;

   sendEvent(22.0,  getIdentificator(user), "SetActiveNow", []);   //
    /**/
  }

  event void SetActiveNow()
  {
    if (!isActive)
    ActivateFire(true);
    ActivateRadar(true);
    ActivateMovement(true);
    isActive = true;

  }
}

