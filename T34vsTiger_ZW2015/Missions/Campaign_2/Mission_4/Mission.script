//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CC2M4Mission extends CSPMission
{
  //-------------------------------
  // Contruction and initialization
  //-------------------------------
  String m_LocalTime             = "14:22:00";
  String m_TerrainMapTextureName = "Textures/c2m4_Map.tex";

  static String m_MissionBriefingPicMaterial = "C2M4BriefingPic";

  static Array  m_MissionObjectives = [
      [MOTID_Primary, CC2M4Mission_Strings::Objective01, MOSID_InProgress, true],
      [MOTID_Primary, CC2M4Mission_Strings::Objective02, MOSID_InProgress, true],
      [MOTID_Primary, CC2M4Mission_Strings::Objective03, MOSID_InProgress, true]
                               ];
  static WString ObjectivesText = CC2M4Mission_Strings::ObjectivesText;
  boolean isDebug = true;
  int Penalty_count = 0;

  Array m_NavpointsForPlayerMap = [
                              [
                                 ["NavPnt_END"],
                                  CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags   NAV_RENDER_Default
                                  new Color(30.0/256.0, 60.0/256.0, 215.0/256.0)   // NavColor
                              ],

                              [
                                 ["NavPnt_FallBack1"],
                                  CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags   NAV_RENDER_Default
                                  new Color(255.0/256.0, 200.0/256.0, 0.0/256.0)   // NavColor
                              ],

                              [
                                 ["NavPnt_FallBack2"],
                                  CBaseCockpitTerrainMap::NAV_RENDER_Default,  // flags   NAV_RENDER_Default
                                  new Color(30.0/256.0, 200.0/256.0, 10.0/256.0)   // NavColor
                              ]

  ];

  float  CockpitMapMinRange        = 500.0;
  float  CockpitMapMaxRange        = 4800.0;
  float  CockpitMapNavNameMaxRange = 4000.0;
  int    CockpitMapZoomSteps       = 5;
  Vector MarksInitPoint            = new Vector(1000.0, 1000.0, 0.0);
  Array  CockpitMapAccessBox       = [new Vector(402, 582.0, 0.0), new Vector(18000.0, 18000.0, 0.0)];

  final static Array RouterWorkingZones = [
                                             [40000.0 , 40000.0, 60000.0, 60000.0]
                                          ];

  Array KillList_Primary1 = ["CompanyGrpONE_1", "CompanyGrpONE_2", "CompanyGrpONE_3", "CompanyGrpONE_4", "CompanyGrpONE_5", "CompanyGrpONE_6", "CompanyGrpFOUR_01", "CompanyGrpFOUR_02"];
  Array KillList_Primary2 = ["CompanyGrpSAU1", "CompanyGrpSAU2", "CompanyGrpSAU3", "CompanyGrpSAU4", "CompanyGrpSAU5", "CompanyGrpSAU6", "CompanyGrpSAU7", "CompanyGrpSAU8"];
  Array KillList_Primary3 = ["CompanyGrpTWO1", "CompanyGrpTWO2", "CompanyGrpTWO3", "CompanyGrpTWO4", "CompanyGrpTWO5", "CompanyGrpTWO6", "CompanyGrpTWO7", "CompanyGrpTWO8", "CompanyGrpTWO9"];
  Array KillList_Primary4 = ["CompanyGrpTHREE1", "CompanyGrpTHREE2", "CompanyGrpTHREE3", "CompanyGrpTHREE4", "CompanyGrpTHREE5", "CompanyGrpTHREE6", "CompanyGrpTHREE7", "CompanyGrpTHREE8", "CompanyGrpFOUR_03", "CompanyGrpFOUR_04", "CompanyGrpFOUR_05", "CompanyGrpFOUR_06", "CompanyGrpFOUR_7", "CompanyGrpFOUR_8"];
  Array KillPNZ = ["Tiger_Tnk1", "Tiger_Tnk2", "Tiger_Tnk3", "Tiger_Tnk4", "Tiger_Tnk5", "Panther_1", "Panther_3", "Panther_4", "Panther_2"];
  Array SupplyLineList = [ "GCol2BTR1", "SupplyLine_1", "SupplyLine_2", "SupplyLine_3", "SupplyLine_4", "SupplyLine_5", "SupplyLine_6", "SupplyLine_7", "SupplyLine_8", "SupplyLine_9", "SupplyLine_10", "GCol2BTR2"];


// String CL_Invisible = "INVISIBLE_ON_RADAR";

  boolean MainPlayerStart = false;
  boolean Primary1Death  = false;
  boolean Primary3  = false;
  boolean Action1 = false;
  boolean Action2 = false;
  boolean Action3 = false;

  void CC2M4Mission()
  {
    // Construct mission
    CSPMission("CC2M4Mission", "CC2M4Content");

    // Set mission properties
    SetMissionTerrain(new #ChunkedTerrain<CC2M4Terrain>());
    SetMissionAtmosphere(new #Atmosphere<CC2M4Atmosphere>());
    SetMissionSky(new #SkyObject<CSky01Model>());

    if (CDebugSettings::LoadForest)
      SetMissionForest(new CSTBaseForestC1(GetMissionAtmosphere()));

    if (CDebugSettings::LoadRoads)
      SetMissionRoadsParms(new CBaseRoadC1());

    if (CDebugSettings::LoadGrass)
      RegisterObject("Grass", new #Grass<CBaseGrassC1>());

  //  m_MissionLensFlare = new #LensFlare<CC2M4LensFlare>(); //
    SetMissionWorldMatrices(new #WorldMatrices<CC2M4WorldMatrices>(),
      [
        [LAYER_TERRAIN_NAME, "CC2M4LandscapeLayer"      ],
        [LAYER_TERRAIN_ZONE, "CC2M4TerrainZoneLayer"    ],
        [LAYER_ROUTER_ZONE,  "CC2M4RouterZoneLayer"     ],
        [LAYER_MICROTEXTURE_MAP1, "CC2M4MicroTextures1" ],
        //["Landing Zone Texture",  "CC2M4LZTexture"    ],
        [LAYER_TERRAIN_WATERHEIGHTS, "CC2M4WaterHeights"]
      ]);

    SetRouterPrecalculatedGraph(new #RouterPrecalculatedGraph<CRouterPrecalculatedGraph>());

    SetRouterMap("RouterMap_Layer1", new #RouterMap<CC1RouterMap>(), 64, RouterWorkingZones);
  }

  void StartMission()
  {
    // call inherited    //
    CSPMission::StartMission();
    
  //  sendEvent(0, SOID_MissionController, "StartWithTimeOut", []);
  /**/
   // sendEvent(30.0,  "GSoldGroup", "PopDelayedOrder", []);
    sendEvent(70.0, "CC2M4Grp_CompanyGrpONE", "MoveToAttackPosition", []);

    sendEvent(130.0, "CC2M4Grp_CompanyGrpTWO", "MoveToAttackPosition", []);

    sendEvent(120.0, "CC2M4Grp_CompanyGrpTHREE", "MoveToAttackPosition", []);

    sendEvent(80.0, "CC2M4Grp_CompanyGrpSAU", "MoveToAttackPosition", []);

    sendEvent(101.0, "CC2M4Grp_CompanyGrpFOUR", "MoveToAttackPosition", []);

    sendEvent(53.0, "CC2M4PanzerGrupen2", "MoveToAttackPosition", []);      // PopDelayedOrder

    sendEvent(20.0, "CC2M4PanzerGrupen1", "MoveToAttackPosition", []);

    sendEvent(130.0,  "C2M4TrooperGroupA", "C2M4TroopersMarchA", []);   //

    sendEvent(180.0,  "C2M4TrooperGroup", "PopDelayedOrder", []);     //

    sendEvent(110.0, "CC2M4Gr_SupplyLine", "MoveToAttackPosition", []);

    sendEvent(142.0, "CC2M4Gr_SupplyEndLine", "MoveToAttackPosition", []);

    sendEvent(378.0, "CC2M4RussianSoldierGroup", "PopDelayedOrder", []);

    sendEvent(388.0, "CC2M4RussianSoldierGroup2", "PopDelayedOrder", []);

  //  sendEvent(500.0, "CBTRCompanyGrp", "MoveToAttackPosition", []);
    //Component console = new #GameController().GetObject(SOID_Console);
    //console.disablebeh();
    //console.showbehinf(true);
  }

  event void OnMissionDialogEnd(String _DialogID)
  {
  }

  event void OnEngineStateChanged(boolean _IsWorkEngine)
  {
    if (!MainPlayerStart)
    {
      //logWarning("Start cinema!!");
      MainPlayerStart = true;
      SendCockpitMessage(L"Wait for your Komerads before you engage enemy!", new Color(0.0, 1.0, 0.0));
    //  Component _Game = new #GameController();
      //if ( null != _Game)
      //  _Game.RunCinema("EngineStart");
    }
  }

   event void FailMissionMad()
  {
    FailMission(0.0);
  }

  event void OnMissionEnd()
   {
     if ((Action1 == true) && (Primary3 == true))
     {
      SetObjectiveStatus(2, MOSID_Completed);
    //  sendEvent(0.0, SOID_MissionController, "Shutdown", []); 
     }
     else
     return;

   }

  event void OnObjectDestroyed(String _ObjectID)
  {
    CMission::OnObjectDestroyed(_ObjectID);

    // TMP
    Component DeadThing = GetObject(_ObjectID);
    if (null == DeadThing)
    {
      //logError("Component 'DeadThing' == null");
      return;
    }
    // TMP

    //logWarning("Object destroyed: " + _ObjectID + ", last damaged by unit: " + new String (DeadThing.GetLastDamager()));

    String Affiliation  = DeadThing.GetAffiliation();
    String Damager      = DeadThing.GetLastDamager();

    if (Damager == "MainPlayerUnit")
    {
      //logWarning("CheckMadPlayer");
      //logWarning("CheckMadPlayer. Affiliation is " + Affiliation);
      //logWarning("CheckMadPlayer. Damager is " + Damager);

      if (!checkMask(DeadThing, ["HUMAN"], []))
      {
        //logWarning("MadPlayer_kill_Non_Human");

        if (Affiliation == "FRIEND")
        {
          //logWarning("MissionWillBeKilledByFriendlyFire");
          Penalty_count = Penalty_count + 1;
          SendCockpitMessage(CGameMessages::msg_FriendlyFireWarning, new Color(1.0, 1.0, 0.0));
          // New report for Cocpit: "You kill friendly unit. Mission will be fail"
          if (Penalty_count >= 2)
          {
            logWarning("MissionKillingByFriendlyFire");  //
            SendCockpitMessage(CGameMessages::msg_FriendlyFireFailed, new Color(1.0, 0.0, 0.0));
            sendEvent(11.0, SOID_MissionController, "FailMissionMad", []);
          }
        }
      }
    }
    
    int _Index_Primary1  = KillList_Primary1.find(_ObjectID);
    int _Index_Primary2  = KillList_Primary2.find(_ObjectID);
    int _Index_Primary3  = KillList_Primary3.find(_ObjectID);
    int _Index_Primary4  = KillList_Primary4.find(_ObjectID);
    int _Index_SupplyLineList  = SupplyLineList.find(_ObjectID);
    int _Index_KillPnz   = KillPNZ.find(_ObjectID);


    if(_Index_Primary1 != -1)
    {
      KillList_Primary1.remove(_Index_Primary1);
    }
    if(_Index_Primary2 != -1)
    {
      KillList_Primary2.remove(_Index_Primary2);
    }

    if(_Index_Primary3 != -1)
    {
      KillList_Primary3.remove(_Index_Primary3);
    }

    if(_Index_Primary4 != -1)
    {
      KillList_Primary4.remove(_Index_Primary4);
    }

    if(_Index_KillPnz != -1)
    {

      KillPNZ.remove(_Index_KillPnz);

    }
    
   if(_Index_SupplyLineList != -1)
    {
       SupplyLineList.remove(_Index_SupplyLineList);
    }

    if((SupplyLineList.size() <= 2) || (KillPNZ.size() <= 2))

    {

      sendEvent(1.0, SOID_MissionController, "FailMissionMad", []);

    }

   if((KillList_Primary1.size() <= 1) && (KillList_Primary2.size() <= 1))
    {
         SetObjectiveStatus(0, MOSID_Completed);
         sendEvent(0.0, getIdentificator(this), "Objectiveone", []);
    }
   if (KillList_Primary3.size() <= 1)
    {
        SetObjectiveStatus(1, MOSID_Completed);
        sendEvent(0.0, getIdentificator(this), "Objectivetwo", []);
    }



 }

  void OnObjectEnterNavPoint( String _NavPointID, String _ObjectID)
  {


     if (_NavPointID == "NavPnt_END")
       {
        if (_ObjectID.IsStartsWith("MainPlayerUnit"))
        {
           sendEvent(2.0, SOID_MissionController, "OnMissionEnd", []);
         }
       }

     if ((_NavPointID == "NavPnt_FallBack1") || (_NavPointID == "NavPnt_FallBack2"))
       {
        if (_ObjectID.IsStartsWith("MainPlayerUnit"))
        {
           sendEvent(0.0, SOID_MissionController, "MoveTo2ndPosition", []);
         }
       }

       if ((_NavPointID == "NavPnt_12") || (_NavPointID == "NavPnt_END"))
       {

         if (_ObjectID.IsStartsWith("SupplyLine"))
         {
            if(!Action1)
            {
            SendCockpitMessage(L"Convoy out of danger Kommander!", new Color(0.0, 1.0, 0.0));
            Action1 = true;
            return Action1;
            }

         }

       }

       if (_NavPointID == "NavPnt9")
       {

         if (_ObjectID.IsStartsWith("Tiger_Tnk"))
         {
          
            logWarning( get_ObjectID + "entered NavPnt9 ");
          //  sendEvent(1.0, SOID_MissionController, "MoveTo2ndPosition", []);
          if(!Action3)
            {
            Action3 = true;
            return Action3;
            }

          }
       }
  }

  void OnObjectLeaveNavPoint( String _NavPointID, String _ObjectID)
  {
  // if(_NavPointID == "NavPnt8")
       //Phase2 = true;
  }

 event void MoveTo2ndPosition()
  {
   
   sendEvent(0.0, "CC2M4PanzerGrupen1", "FallBackPosition", []); //
   sendEvent(10.0, "CC2M4PanzerGrupen2", "FallBackPosition", []); //
   logWarning("PanzerGrupen -  FallBack! ");
  }

 event void Objectiveone()
 {
      if(!Primary1Death)   //
       {                 //
         //sendEvent(20.0, "CC2M4PanzerGrupen1", "FallBackPosition", []);
          //logWarning("Objective 0 complete Grupen1 withdrawl");  
         Primary1Death  = true;
         return Primary1Death;
       } //
 }
 event void Objectivetwo()
 {
      if(!Primary3)  //
        {          //
         sendEvent(0.0, "CC2M4PanzerGrupen2", "MoveTo2ndPosition", []);//
         //logWarning("Objective 1 complete ");
         Primary3  = true;
         return Primary3;
        }     //
 }

  event void SetNavPointIdentifiersArray(String _NavPointID, Array _ID)
  {
    Component NavPoint = GetMission().GetObject(_NavPointID);

    if (null != NavPoint)
    {
      NavPoint.SetIdentifiers(_ID);
    }
    else
      logError("Component NavPoint with ID = " + _NavPointID + " - null!" );
  }



   void Shutdown()
  {
    CSPMission::Shutdown();
  }
}
