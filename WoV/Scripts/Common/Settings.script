//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CSpecialSettings
{
  //
  // 3D Driver settings
  //

  final static boolean IsEnabledScreenEffects = true;

  // Dividers for create special render targets
  final static Array SpecRenderTargetTexConfig = [
      1,
      4,
      4
    ];

  final static Array RenderTargetTexConfig     = [
      512,
      256
    ];

  //
  // Bloom effect settings
  //
  
  //final static float BloomScale               = 0.45;//murkz
  //final static float LuminanceCoefficient     = 0.51;//murkz
  //final static float MiddleGrayCoefficient    = 0.19;//murkz
  //final static float WhiteCutoffCoefficient   = 0.69;//murkz

  //
  // Settings ranges
  //

  final static int  TextureBestLODRange = 4;
  final static int  MaxLightsQtyRange   = 4;
  final static int  ShadowDetailRange   = 4;
  
  //
  // Shadow settings
  //

  final static Array StencilShadowSettings  = [
      [ [], [CLASSIFICATOR_SHADOW] ],
      [ [], ["INVENTORY_ITEM"]     ],
      [ [], ["INVENTORY_ITEM"]     ],
      [ [], ["INVENTORY_ITEM"]     ],
      [ [], ["INVENTORY_ITEM"]     ] // CLASSIFICATOR_MAIN_GEOMETRY, 
    ];

  final static Array ShadowDetailValues     = [
      [ 0, 16   ],
      [ 1, 512  ],
      [ 2, 512  ],
      [ 3, 1024 ],
      [ 4, 1024 ]
    ];

  final static Array MirrorDetailValues     = [
      [ 128,  0.0 ],
      [ 256,  0.0 ],
      [ 512,  0.0 ],
      [ 1024, 0.0 ]
    ];

  final static Array WaterDetailValues      = [
      [ 128,  0.0 ],
      [ 256,  0.0 ],
      [ 512,  0.0 ],
      [ 1024, 0.0 ]
    ];

  //
  // Editor settings
  //

  static Array SpecObjectsVisibleState = [
      [ CBaseSoundZone::SPEC_CLASS, false ],
      [ CNavPoint::SPEC_CLASS,      false ],
      [ CSoundEmitter::SPEC_CLASS,  false ],
      [ CEffectEmitter::SPEC_CLASS, false ],
      [ CTerrainPatch::SPEC_CLASS,  false ]
    ];

  static boolean IsSpecObjectsVisible(
      String _ObjectsClass
    )
  {
    Map VisibleState = new Map(SpecObjectsVisibleState);

    if (VisibleState.find(_ObjectsClass))
      return VisibleState.getValue();

    return false;
  }

  //
  // Current settings
  //

  boolean m_IsGameStarted          = false;
  boolean m_IsInOnGameStartedCall  = false;

  int     m_CurrentShadowDetail    = -1;
  float   m_CurrentMirrorDetail    = -1.0;
  float   m_CurrentWaterDetail     = -1.0;
  float   m_CurrentTerrainDetail   = -1.0;

  boolean m_LightTerrainPatches    = false;
  boolean m_GenerateTerrainShadows = false;
  Array   m_TerrainShadowsMasks    = [];

  //
  // Event handlers
  //

  void OnGameStarted()
  {
    m_IsInOnGameStartedCall = true;

    m_IsGameStarted = true;
    OnSettingsChanged();

    m_IsInOnGameStartedCall = false;
  }      

  void OnSettingsChanged()
  {
    if (!m_IsGameStarted)
      return;

    // Update terrain detail settings
    float TerrainDetail = GetTerrainDetail();
    if (false == m_IsInOnGameStartedCall)
    {
      if (m_CurrentTerrainDetail != TerrainDetail)
      {
        Component Mission = (new #GameController()).GetLoadedMission();
        if (null != Mission)
        {
          Component Terrain = Mission.GetMissionTerrain();
          if (null != Terrain)
            Terrain.OnTerrainDetailChanged();
        }
      }
    }
    m_CurrentTerrainDetail = TerrainDetail;

    // Update mirror detail settings
    float MirrorDetail = GetWaterDetail();      //$TMP
    if (m_CurrentMirrorDetail != MirrorDetail)
    {
      int Index = iround(float(MirrorDetailValues.size() - 1) * MirrorDetail);
      (new #MirrorRender()).InitRenderTargets(
          MirrorDetailValues[Index][0], 
          MirrorDetailValues[Index][1]
        );

      (new #MirrorRender()).InitContentMasks(
          [
            [[], [ CLASSIFICATOR_SHADOW ]]
          ]
        );

      m_CurrentMirrorDetail = MirrorDetail;
    }      

    // Update water detail settings
    float WaterDetail = GetWaterDetail();
    if (m_CurrentWaterDetail != WaterDetail)
    {
      int Index = iround(float(WaterDetailValues.size() - 1) * WaterDetail); 
      (new #WaterRender()).InitRenderTargets(
          WaterDetailValues[Index][0], 
          WaterDetailValues[Index][1]
        );

      (new #WaterRender()).InitContentMasks(
          [
            [[], [ CLASSIFICATOR_SHADOW ]]
          ]
        );

      m_CurrentWaterDetail = WaterDetail;
    }      

    // Update shadow detail settings
    int ShadowDetail = GetShadowDetail();
    if (m_CurrentShadowDetail != ShadowDetail)
    {
      if (ShadowDetail >= ShadowDetailValues.size())
        ShadowDetail = ShadowDetailValues.size() - 1;
      
//      (new #ShadowMapArray()).InitRenderTargets(
//          ShadowDetailValues[ShadowDetail][0],
//          ShadowDetailValues[ShadowDetail][1]
//        );

//      (new #ShadowMapArray()).InitContentMasks(
//          [
//            [[], []]
//          ]
//        );

      (new #ShadowRender()).EnableShadowsRender(
          ShadowDetail > 0
        );

      m_CurrentShadowDetail = ShadowDetail;
    }      
  }      
}

//
// CUISettings
//

class CUISettings
{
  // Text List settings

  final static float TextListFontSize         = 0.018554688 * 1.8;

  final static Color TextListSelectedColor    = new Color(0.7,      0.7,      1.0);
  final static Color TextListNormalColor      = new Color(0.866667, 0.866667, 0.866667);
  final static Color TextListHiSelectedColor  = new Color(0.8,      0.8,      1.0);
  final static Color TextListHiNormalColor    = new Color(1.0,      1.0,      1.0);

  // Map markers settings

  final static Color MapRecyclingPlantColor       = new Color( 15.0 / 255.0, 206.0 / 255.0, 172.0 / 255.0);
  final static Color MapAgricultureFarmColor      = new Color(  0.0 / 255.0, 255.0 / 255.0, 103.0 / 255.0);
  final static Color MapCattleFarmColor           = new Color(234.0 / 255.0,  68.0 / 255.0,  92.0 / 255.0);
  final static Color MapChemicalsPlantColor       = new Color(238.0 / 255.0,   0.0 / 255.0, 255.0 / 255.0);
  final static Color MapCoalMineColor             = new Color(151.0 / 255.0, 151.0 / 255.0, 151.0 / 255.0);
  final static Color MapFillingStationColor       = new Color(255.0 / 255.0, 143.0 / 255.0,  60.0 / 255.0);
  final static Color MapFoodFactoryColor          = new Color(255.0 / 255.0, 219.0 / 255.0, 133.0 / 255.0);
  final static Color MapHitechFactoryColor        = new Color(  0.0 / 255.0, 206.0 / 255.0, 255.0 / 255.0);
  final static Color MapOilProcessingFactoryColor = new Color(  0.0 / 255.0, 255.0 / 255.0, 247.0 / 255.0);
  final static Color MapOreMineColor              = new Color(159.0 / 255.0, 183.0 / 255.0, 189.0 / 255.0);
  final static Color MapPowerStationColor         = new Color(255.0 / 255.0,  91.0 / 255.0,   0.0 / 255.0);
  final static Color MapSawmillColor              = new Color(216.0 / 255.0, 124.0 / 255.0, 255.0 / 255.0);
  final static Color MapShipyardColor             = new Color(  0.0 / 255.0, 155.0 / 255.0, 194.0 / 255.0);
  final static Color MapSoftwareHouseColor        = new Color(255.0 / 255.0, 246.0 / 255.0,  48.0 / 255.0);
  final static Color MapSteelWorksColor           = new Color(197.0 / 255.0, 210.0 / 255.0, 216.0 / 255.0);
  final static Color MapTextileFactoryColor       = new Color(255.0 / 255.0, 255.0 / 255.0, 225.0 / 255.0);
  final static Color MapTimberWorksColor          = new Color(109.0 / 255.0, 255.0 / 255.0,   1.0 / 255.0);
  final static Color MapTransistorFactoryColor    = new Color(255.0 / 255.0, 137.0 / 255.0, 132.0 / 255.0);
  final static Color MapFederalStorageColor       = new Color(200.0 / 255.0, 213.0 / 255.0,   0.0 / 255.0);
  final static Color MapSeaPortColor              = new Color( 98.0 / 255.0, 173.0 / 255.0, 237.0 / 255.0);
  final static Color MapCityColor                 = new Color(113.0 / 255.0, 190.0 / 255.0, 207.0 / 255.0);

  // Audio player settings

  final static WString MusicFilesPattern = L"*.wav; *.mid; *.midi; *.mp3; *.wma";

  // Product colors in pie chart

  final static Color PetrolColor         = new Color( 15.0 / 255.0, 206.0 / 255.0, 172.0 / 255.0);
  final static Color MazutColor          = new Color(  0.0 / 255.0, 255.0 / 255.0, 103.0 / 255.0);
  final static Color CattleColor         = new Color(234.0 / 255.0,  68.0 / 255.0,  92.0 / 255.0);
  final static Color GrainColor          = new Color(238.0 / 255.0,   0.0 / 255.0, 255.0 / 255.0);
  final static Color CottonColor         = new Color(151.0 / 255.0, 151.0 / 255.0, 151.0 / 255.0);
  final static Color FertilizersColor    = new Color(255.0 / 255.0, 143.0 / 255.0,  60.0 / 255.0);
  final static Color ChemicalsColor      = new Color(255.0 / 255.0, 219.0 / 255.0, 133.0 / 255.0);
  final static Color CoalColor           = new Color(  0.0 / 255.0, 206.0 / 255.0, 255.0 / 255.0);
  final static Color OreColor            = new Color(  0.0 / 255.0, 255.0 / 255.0, 247.0 / 255.0);
  final static Color MetalworksColor     = new Color(159.0 / 255.0, 183.0 / 255.0, 189.0 / 255.0);
  final static Color WoodColor           = new Color(255.0 / 255.0,  91.0 / 255.0,   0.0 / 255.0);
  final static Color SawTimbersColor     = new Color(216.0 / 255.0, 124.0 / 255.0, 255.0 / 255.0);
  final static Color ElectronicsColor    = new Color(  0.0 / 255.0, 155.0 / 255.0, 194.0 / 255.0);
  final static Color FoodstuffColor      = new Color(255.0 / 255.0, 246.0 / 255.0,  48.0 / 255.0);
  final static Color TextileColor        = new Color(197.0 / 255.0, 210.0 / 255.0, 216.0 / 255.0);
  final static Color HighTechColor       = new Color(255.0 / 255.0, 255.0 / 255.0, 225.0 / 255.0);
  final static Color PaperColor          = new Color(109.0 / 255.0, 255.0 / 255.0,   1.0 / 255.0);
  final static Color SoftwareColor       = new Color(255.0 / 255.0, 137.0 / 255.0, 132.0 / 255.0);
  final static Color GarbageColor        = new Color(200.0 / 255.0, 213.0 / 255.0,   0.0 / 255.0);
  final static Color FoodAdditivesColor  = new Color( 98.0 / 255.0, 173.0 / 255.0, 237.0 / 255.0);
  final static Color PCGamesColor        = new Color(113.0 / 255.0, 190.0 / 255.0, 207.0 / 255.0);
  final static Color GMProductsColor     = new Color(255.0 / 255.0,   0.0 / 255.0,   0.0 / 255.0);
  final static Color SpaceMaterialsColor = new Color(255.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0);
}
