//-------------------------------------------------------------------
//
//  This code is copyright 2001 by G5 Software.
//  Any unauthorized usage, either in part or in whole of this code
//  is strictly prohibited. Violators WILL be prosecuted to the
//  maximum extent allowed by law.
//
//-------------------------------------------------------------------

class CMortarExplosion
  extends CUnitExplosion
{
  float  Damage   = 150.0;
  float  Radius   = 15.0;
  String SoundId  = "M29MortarExplosionSound";
}

class CMortarGunBulletExplosion
  extends CMortarBulletExplosion
{
}

class CMortarGunBulletControl
  extends CHeavyGunBulletControl
{
  Array     Classificator = [];
  float     MaxDistance   = 100000.0;
  Vector    GravityAccel  = CWorldPhysics::GravityVector;

  String    ExplosionId  = "MortarPointGunBulletExplosion";
  Component BulletRender = null;
  //Component BulletRender = new #StaticEffect<CHeavyGunBulletEffect>();
}

class CMortarGun
  extends CHeavyGun
{
  final static float  InitBulletSpeed = 214.0;
  final static float  FireDeviation   = 0.3;
  final static String BulletPatternId = "MortarPointGunBullet";
  final static String FireEffectId    = "MortarGunFireEffect";
  final static String CloudEffectId   = "MortarGunCloudEffect";

  final static String    FireSoundId  = "MortarGunFireSound";

  final static Vector GravityVector   = CWorldPhysics::GravityVector;

  // *** Gun parameters for behavior
  final static boolean SpecialWeapon  = true;

  // *** Gun parameters for behavior
  final static int  FirePeriod        = 7000;  // ms
  final static int  FirePeriodRandAdd = 1000;   // ms

  final static boolean BurstFire      = false;
  final static int  BurstTime         = 2000; // ms
  final static int  BurstTimeRandAdd  = 0; // ms

  final static Array GunSpecificFireMask = [
                                [["GROUND"],["AIR"]], // high priority mask: RestrictTo, Exclude
                                [["NAVAL"],["AIR"]]   // low priority mask
                              ];
}

// Behavior

class CMortarUnitBehavior
  extends CBaseGroundBehavior
{
  boolean  CanMove   = false;
  boolean  HasRouter = false;
  boolean  HasRadar  = true;


  // *** radar parameters

  float  MaxRadarDistance = 1700; // m
  float  MinRadarDistance = 5;    // m

  int    UpdateRadarPeriod        = 3000; // ms
  int    UpdateRadarPeriodRandAdd = 1000; // ms

  // *** movement physical parameters

  // physical limitations
  Vector MaxSpeed = new Vector( 25, 0, 0);
  float  MinRotateRadius = 0; // unit can turn when staying
}

class CMortarTargetingAnimatorA
  extends CTargetingAnimator
{
  String HorAnimName    = "turret_a";
  String VerAnimName    = "gun_a";

  float  LeftEndAngle   = -180.0;
  float  RightEndAngle  =  180.0;
  float  TopEndAngle    = -5.0;
  float  BottomEndAngle =  60.0;
}

class CMortarUnit
  extends CGroundBuilding, CTargetableObject
{
  final static WString CockpitTargetPointer        = getLocalized("Units", "str_MortarPointer");
  final static float   DefaultHitPoints            = CHitPoints::MortarUnitHitPoints;
  final static int     Targeting_MapUIElementIndex = 4;    // See at: RadarView.script -> CBaseCockpitTerrainMap::ObjectsUIElements
  static String        PrevExplosionID             = "MortarExplosion";

  // Automatic classificators of this object
  final static Array AutomaticClassificators  = ["GROUND"];

  // =======================================
  // Contruction and initialization
  // =======================================

  void CMortarUnit()
  {
    SetupMesh(new #AnimatedObject<Cu_stat_M29MortarModel>(), [200, 150, 100, 50, 3]);

    SetupWeapon("Weapon", new #Weapon<CMortarGun>(),
      ["Fire_A"],
      new #TargetingAnimator<CMortarTargetingAnimatorA>());

    PutonGround();
    SetupBehavior( new #VehicleBehavior<CMortarUnitBehavior>());
  }

  void Construct(
      Component _Mission,
      Component _PropMap
    )
  {
    CGroundBuilding::Construct(_Mission, _PropMap);

    GetObject("StateControl").SetDamageTypeModifier(CBaseExplosion::CLASSIFICATOR_DAMAGE_BULLET, 0.00f);
  }
}
